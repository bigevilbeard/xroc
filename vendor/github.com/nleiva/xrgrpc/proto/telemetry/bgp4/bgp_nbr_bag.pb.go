// Code generated by protoc-gen-go.
// source: bgp_nbr_bag.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_default_vrf_neighbors_neighbor is a generated protocol buffer package.

It is generated from these files:
	bgp_nbr_bag.proto

It has these top-level messages:
	BgpNbrBag_KEYS
	BgpNbrBag
	BgpTimespec
	IPV4TunnelAddressType
	IPV4MDTAddressType
	RTConstraintAddressType
	IPV6AddressType
	BgpL2VpnAddrT
	L2VPNEVPNAddressType
	BgpL2VpnMspwAddrT
	IPV6MVPNAddressType
	IPV4MVPNAddressType
	LS_LSAddressType
	IPv4FlowspecAddressType
	IPv6FlowspecAddressType
	BgpAddrtype
	BgpPerfNbrAf_
	BgpPerfNbr_
	BgpNbrGshut_
	BgpNbrAf_
	NbrAfP
	BgpNotfntype_
	BgpNbrMsgStatsUnit
	BgpNbrMsgStatsOp
	BgpNbrMsgStats
*/
package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_default_vrf_neighbors_neighbor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BGP Neighbor Information
type BgpNbrBag_KEYS struct {
	InstanceName    string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	NeighborAddress string `protobuf:"bytes,2,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
}

func (m *BgpNbrBag_KEYS) Reset()                    { *m = BgpNbrBag_KEYS{} }
func (m *BgpNbrBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*BgpNbrBag_KEYS) ProtoMessage()               {}
func (*BgpNbrBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BgpNbrBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpNbrBag_KEYS) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

type BgpNbrBag struct {
	// Speaker this neighbor is allocated to
	SpeakerId uint32 `protobuf:"varint,50,opt,name=speaker_id,json=speakerId" json:"speaker_id,omitempty"`
	// Description
	Description string `protobuf:"bytes,51,opt,name=description" json:"description,omitempty"`
	// Local AS number
	LocalAs uint32 `protobuf:"varint,52,opt,name=local_as,json=localAs" json:"local_as,omitempty"`
	// Remote AS number
	RemoteAs uint32 `protobuf:"varint,53,opt,name=remote_as,json=remoteAs" json:"remote_as,omitempty"`
	// Internal link to neighbor
	HasInternalLink string `protobuf:"bytes,54,opt,name=has_internal_link,json=hasInternalLink" json:"has_internal_link,omitempty"`
	// External neighbor not directly connected
	IsExternalNeighborNotDirectlyConnected string `protobuf:"bytes,55,opt,name=is_external_neighbor_not_directly_connected,json=isExternalNeighborNotDirectlyConnected" json:"is_external_neighbor_not_directly_connected,omitempty"`
	// Number of messages received
	MessagesReceived uint32 `protobuf:"varint,56,opt,name=messages_received,json=messagesReceived" json:"messages_received,omitempty"`
	// Number of messages sent
	MessagesSent uint32 `protobuf:"varint,57,opt,name=messages_sent,json=messagesSent" json:"messages_sent,omitempty"`
	// No. of update msgs received
	UpdateMessagesIn uint32 `protobuf:"varint,58,opt,name=update_messages_in,json=updateMessagesIn" json:"update_messages_in,omitempty"`
	// No. of update messages sent
	UpdateMessagesOut uint32 `protobuf:"varint,59,opt,name=update_messages_out,json=updateMessagesOut" json:"update_messages_out,omitempty"`
	// No. of msgs on receive queue
	MessagesQueuedIn uint32 `protobuf:"varint,60,opt,name=messages_queued_in,json=messagesQueuedIn" json:"messages_queued_in,omitempty"`
	// No. of messages on send queue
	MessagesQueuedOut uint32 `protobuf:"varint,61,opt,name=messages_queued_out,json=messagesQueuedOut" json:"messages_queued_out,omitempty"`
	// Time (in secs) that the connection has been established
	ConnectionEstablishedTime uint32 `protobuf:"varint,62,opt,name=connection_established_time,json=connectionEstablishedTime" json:"connection_established_time,omitempty"`
	// State of connection
	ConnectionState string `protobuf:"bytes,63,opt,name=connection_state,json=connectionState" json:"connection_state,omitempty"`
	// Previous state of connection
	PreviousConnectionState uint32 `protobuf:"varint,64,opt,name=previous_connection_state,json=previousConnectionState" json:"previous_connection_state,omitempty"`
	// Administrative status of connection
	ConnectionAdminStatus uint32 `protobuf:"varint,65,opt,name=connection_admin_status,json=connectionAdminStatus" json:"connection_admin_status,omitempty"`
	// Open check error code
	OpenCheckErrorCode string `protobuf:"bytes,66,opt,name=open_check_error_code,json=openCheckErrorCode" json:"open_check_error_code,omitempty"`
	// Local address for the connection
	ConnectionLocalAddress *BgpAddrtype `protobuf:"bytes,67,opt,name=connection_local_address,json=connectionLocalAddress" json:"connection_local_address,omitempty"`
	// Local address configured for the neighbor connection
	IsLocalAddressConfigured string `protobuf:"bytes,68,opt,name=is_local_address_configured,json=isLocalAddressConfigured" json:"is_local_address_configured,omitempty"`
	// Local port for the connection
	ConnectionLocalPort uint32 `protobuf:"varint,69,opt,name=connection_local_port,json=connectionLocalPort" json:"connection_local_port,omitempty"`
	// Remote address for the connection
	ConnectionRemoteAddress *BgpAddrtype `protobuf:"bytes,70,opt,name=connection_remote_address,json=connectionRemoteAddress" json:"connection_remote_address,omitempty"`
	// Remote port for the connection
	ConnectionRemotePort uint32 `protobuf:"varint,71,opt,name=connection_remote_port,json=connectionRemotePort" json:"connection_remote_port,omitempty"`
	// Interface Handle of Neighbor
	NeighborInterfaceHandle uint32 `protobuf:"varint,72,opt,name=neighbor_interface_handle,json=neighborInterfaceHandle" json:"neighbor_interface_handle,omitempty"`
	// Notification was sent during last reset
	ResetNotificationSent string `protobuf:"bytes,73,opt,name=reset_notification_sent,json=resetNotificationSent" json:"reset_notification_sent,omitempty"`
	// Neighbor is administratively shut down
	IsAdministrativelyShutDown string `protobuf:"bytes,74,opt,name=is_administratively_shut_down,json=isAdministrativelyShutDown" json:"is_administratively_shut_down,omitempty"`
	// Neighbor shut down because it exceeded max prfx count
	IsNeighborMaxPrefixShutdown string `protobuf:"bytes,75,opt,name=is_neighbor_max_prefix_shutdown,json=isNeighborMaxPrefixShutdown" json:"is_neighbor_max_prefix_shutdown,omitempty"`
	// Neighbor shut down during a SEVERE low memory condition
	IsOutOfMemoryShutdown string `protobuf:"bytes,76,opt,name=is_out_of_memory_shutdown,json=isOutOfMemoryShutdown" json:"is_out_of_memory_shutdown,omitempty"`
	// Neighbor forced up during a low memory condition
	IsOutOfMemoryForcedUp string `protobuf:"bytes,77,opt,name=is_out_of_memory_forced_up,json=isOutOfMemoryForcedUp" json:"is_out_of_memory_forced_up,omitempty"`
	// EBGP peer belongs to AS League
	IsEbgpPeerAsLeague string `protobuf:"bytes,78,opt,name=is_ebgp_peer_as_league,json=isEbgpPeerAsLeague" json:"is_ebgp_peer_as_league,omitempty"`
	// EBGP peer with common administation
	IsEbgpPeerCommonAdmin string `protobuf:"bytes,79,opt,name=is_ebgp_peer_common_admin,json=isEbgpPeerCommonAdmin" json:"is_ebgp_peer_common_admin,omitempty"`
	// TTL Security enabled
	TtlSecurityEnabled string `protobuf:"bytes,80,opt,name=ttl_security_enabled,json=ttlSecurityEnabled" json:"ttl_security_enabled,omitempty"`
	// Suppress 4byteas capability
	Suppress4ByteAs string `protobuf:"bytes,81,opt,name=suppress4_byte_as,json=suppress4ByteAs" json:"suppress4_byte_as,omitempty"`
	// BFD state for this peer
	BfdSessionState string `protobuf:"bytes,82,opt,name=bfd_session_state,json=bfdSessionState" json:"bfd_session_state,omitempty"`
	// BFD state for this peer
	BfdSessionCreatedState string `protobuf:"bytes,83,opt,name=bfd_session_created_state,json=bfdSessionCreatedState" json:"bfd_session_created_state,omitempty"`
	// BFD enable mode for this peer
	BfdSessionEnableMode string `protobuf:"bytes,84,opt,name=bfd_session_enable_mode,json=bfdSessionEnableMode" json:"bfd_session_enable_mode,omitempty"`
	// BFD Mininterval for this peer
	BfdMinintervalval uint32 `protobuf:"varint,85,opt,name=bfd_minintervalval,json=bfdMinintervalval" json:"bfd_minintervalval,omitempty"`
	// BFD Multiplier for this peer
	BfdMultiplierval uint32 `protobuf:"varint,86,opt,name=bfd_multiplierval,json=bfdMultiplierval" json:"bfd_multiplierval,omitempty"`
	// Timestamp since when nbr is in this bfd state
	BfdStateTs uint64 `protobuf:"varint,87,opt,name=bfd_state_ts,json=bfdStateTs" json:"bfd_state_ts,omitempty"`
	// Router ID for the neighbor
	RouterId string `protobuf:"bytes,88,opt,name=router_id,json=routerId" json:"router_id,omitempty"`
	// Negotiated protocol version
	NegotiatedProtocolVersion uint32 `protobuf:"varint,89,opt,name=negotiated_protocol_version,json=negotiatedProtocolVersion" json:"negotiated_protocol_version,omitempty"`
	// Maximum number of hops for external BGP neighbor
	EbgpTimeToLive uint32 `protobuf:"varint,90,opt,name=ebgp_time_to_live,json=ebgpTimeToLive" json:"ebgp_time_to_live,omitempty"`
	// If true, MPLS and NULL rewrite is disabled; if false, it is enabled
	IsEbgpMultihopBgpmplsForwardingDisabled string `protobuf:"bytes,91,opt,name=is_ebgp_multihop_bgpmpls_forwarding_disabled,json=isEbgpMultihopBgpmplsForwardingDisabled" json:"is_ebgp_multihop_bgpmpls_forwarding_disabled,omitempty"`
	// Neighbor TCP Maximum Segment size
	Tcpmss uint32 `protobuf:"varint,92,opt,name=tcpmss" json:"tcpmss,omitempty"`
	// Message in log count
	MsgLogIn uint32 `protobuf:"varint,93,opt,name=msg_log_in,json=msgLogIn" json:"msg_log_in,omitempty"`
	// Message out log count
	MsgLogOut uint32 `protobuf:"varint,94,opt,name=msg_log_out,json=msgLogOut" json:"msg_log_out,omitempty"`
	// Local AS configured on the neighbor
	NeighborLocalAs uint32 `protobuf:"varint,95,opt,name=neighbor_local_as,json=neighborLocalAs" json:"neighbor_local_as,omitempty"`
	// Option to not prepend the Local AS to announcements
	LocalAsNoPrepend string `protobuf:"bytes,96,opt,name=local_as_no_prepend,json=localAsNoPrepend" json:"local_as_no_prepend,omitempty"`
	// Capability negotiation suppressed
	IsCapabilityNegotiationSuppressed string `protobuf:"bytes,97,opt,name=is_capability_negotiation_suppressed,json=isCapabilityNegotiationSuppressed" json:"is_capability_negotiation_suppressed,omitempty"`
	// Capability negotiation performed
	IsCapabilityNegotiationPerformed string `protobuf:"bytes,98,opt,name=is_capability_negotiation_performed,json=isCapabilityNegotiationPerformed" json:"is_capability_negotiation_performed,omitempty"`
	// Route refresh capability received
	IsRouteRefreshCapabilityReceived string `protobuf:"bytes,99,opt,name=is_route_refresh_capability_received,json=isRouteRefreshCapabilityReceived" json:"is_route_refresh_capability_received,omitempty"`
	// Route refresh old capability received
	IsRouteRefreshOldCapabilityReceived string `protobuf:"bytes,100,opt,name=is_route_refresh_old_capability_received,json=isRouteRefreshOldCapabilityReceived" json:"is_route_refresh_old_capability_received,omitempty"`
	// GR awareness received
	IsGrAware string `protobuf:"bytes,101,opt,name=is_gr_aware,json=isGrAware" json:"is_gr_aware,omitempty"`
	// 4-byte AScapability received
	Is4ByteAsCapabilityReceived string `protobuf:"bytes,102,opt,name=is4_byte_as_capability_received,json=is4ByteAsCapabilityReceived" json:"is4_byte_as_capability_received,omitempty"`
	// 4-byte AScapability Snt
	Is4ByteAsCapabilitySent string `protobuf:"bytes,103,opt,name=is4_byte_as_capability_sent,json=is4ByteAsCapabilitySent" json:"is4_byte_as_capability_sent,omitempty"`
	// Multi-protocol capability has been received
	MultiProtocolCapabilityReceived string `protobuf:"bytes,104,opt,name=multi_protocol_capability_received,json=multiProtocolCapabilityReceived" json:"multi_protocol_capability_received,omitempty"`
	// Hold time (in secs) negotiated for this connection
	HoldTime uint32 `protobuf:"varint,105,opt,name=hold_time,json=holdTime" json:"hold_time,omitempty"`
	// Keepalive time (in secs) negotiated for this connection
	KeepAliveTime uint32 `protobuf:"varint,106,opt,name=keep_alive_time,json=keepAliveTime" json:"keep_alive_time,omitempty"`
	// Hold time (in secs) configured for this connection
	ConfiguredHoldTime uint32 `protobuf:"varint,107,opt,name=configured_hold_time,json=configuredHoldTime" json:"configured_hold_time,omitempty"`
	// Keepalive time (in secs) configured for this connection
	ConfiguredKeepalive uint32 `protobuf:"varint,108,opt,name=configured_keepalive,json=configuredKeepalive" json:"configured_keepalive,omitempty"`
	// Minimum acceptable hold time from neighbor (in secs) configured for this connection
	ConfiguredMinAccHoldTime uint32 `protobuf:"varint,109,opt,name=configured_min_acc_hold_time,json=configuredMinAccHoldTime" json:"configured_min_acc_hold_time,omitempty"`
	// Minimum advertisement interval, secs part
	MinAdvertiseInterval uint32 `protobuf:"varint,110,opt,name=min_advertise_interval,json=minAdvertiseInterval" json:"min_advertise_interval,omitempty"`
	// Minimum advertisement interval, msecs part
	MinAdvertiseIntervalMsecs uint32 `protobuf:"varint,111,opt,name=min_advertise_interval_msecs,json=minAdvertiseIntervalMsecs" json:"min_advertise_interval_msecs,omitempty"`
	// Minimum origination interval (in secs)
	MinOriginationInterval uint32 `protobuf:"varint,112,opt,name=min_origination_interval,json=minOriginationInterval" json:"min_origination_interval,omitempty"`
	// Time (in secs) for connect retry timer
	ConnectRetryInterval uint32 `protobuf:"varint,113,opt,name=connect_retry_interval,json=connectRetryInterval" json:"connect_retry_interval,omitempty"`
	// Time (in secs) since last update message was received
	TimeSinceLastUpdate uint32 `protobuf:"varint,114,opt,name=time_since_last_update,json=timeSinceLastUpdate" json:"time_since_last_update,omitempty"`
	// Time (in secs) since last read
	TimeSinceLastRead uint32 `protobuf:"varint,115,opt,name=time_since_last_read,json=timeSinceLastRead" json:"time_since_last_read,omitempty"`
	// Time (in secs) since last read before last reset
	TimeSinceLastReadReset uint32 `protobuf:"varint,116,opt,name=time_since_last_read_reset,json=timeSinceLastReadReset" json:"time_since_last_read_reset,omitempty"`
	// CB
	TimeLastCb uint64 `protobuf:"varint,117,opt,name=time_last_cb,json=timeLastCb" json:"time_last_cb,omitempty"`
	// Last CB before reset
	TimeLastCbReset uint32 `protobuf:"varint,118,opt,name=time_last_cb_reset,json=timeLastCbReset" json:"time_last_cb_reset,omitempty"`
	// FB
	TimeLastFb uint64 `protobuf:"varint,119,opt,name=time_last_fb,json=timeLastFb" json:"time_last_fb,omitempty"`
	// Count
	CountLastWrite uint32 `protobuf:"varint,120,opt,name=count_last_write,json=countLastWrite" json:"count_last_write,omitempty"`
	// Time (in secs) since last write
	TimeSinceLastWrite uint32 `protobuf:"varint,121,opt,name=time_since_last_write,json=timeSinceLastWrite" json:"time_since_last_write,omitempty"`
	// Attempted size of last write
	AttemptedLastWriteBytes uint32 `protobuf:"varint,122,opt,name=attempted_last_write_bytes,json=attemptedLastWriteBytes" json:"attempted_last_write_bytes,omitempty"`
	// Actual size of last write
	ActualLastWriteBytes uint32 `protobuf:"varint,123,opt,name=actual_last_write_bytes,json=actualLastWriteBytes" json:"actual_last_write_bytes,omitempty"`
	// Time (in secs) since second  last write
	TimeSinceSecondLastWrite uint32 `protobuf:"varint,124,opt,name=time_since_second_last_write,json=timeSinceSecondLastWrite" json:"time_since_second_last_write,omitempty"`
	// Attempted size of second last write
	AttemptedSecondLastWriteBytes uint32 `protobuf:"varint,125,opt,name=attempted_second_last_write_bytes,json=attemptedSecondLastWriteBytes" json:"attempted_second_last_write_bytes,omitempty"`
	// Actual size of second last write
	ActualSecondLastWriteBytes uint32 `protobuf:"varint,126,opt,name=actual_second_last_write_bytes,json=actualSecondLastWriteBytes" json:"actual_second_last_write_bytes,omitempty"`
	// Time (in secs) since last write before last reset
	TimeSinceLastWriteReset uint32 `protobuf:"varint,127,opt,name=time_since_last_write_reset,json=timeSinceLastWriteReset" json:"time_since_last_write_reset,omitempty"`
	// Attempted size of last write before reset
	AttemptedLastWriteResetBytes uint32 `protobuf:"varint,128,opt,name=attempted_last_write_reset_bytes,json=attemptedLastWriteResetBytes" json:"attempted_last_write_reset_bytes,omitempty"`
	// Actual size of last write before reset
	ActualLastWriteResetBytes uint32 `protobuf:"varint,129,opt,name=actual_last_write_reset_bytes,json=actualLastWriteResetBytes" json:"actual_last_write_reset_bytes,omitempty"`
	// Time (in secs) since last write before last reset
	TimeSinceSecondLastWriteReset uint32 `protobuf:"varint,130,opt,name=time_since_second_last_write_reset,json=timeSinceSecondLastWriteReset" json:"time_since_second_last_write_reset,omitempty"`
	// Attempted size of second last write before reset
	AttemptedSecondLastWriteResetBytes uint32 `protobuf:"varint,131,opt,name=attempted_second_last_write_reset_bytes,json=attemptedSecondLastWriteResetBytes" json:"attempted_second_last_write_reset_bytes,omitempty"`
	// Actual size of second last write before reset
	ActualSecondLastWriteResetBytes uint32 `protobuf:"varint,132,opt,name=actual_second_last_write_reset_bytes,json=actualSecondLastWriteResetBytes" json:"actual_second_last_write_reset_bytes,omitempty"`
	// Time (in secs) since last write thread event
	LastWriteEvent uint32 `protobuf:"varint,133,opt,name=last_write_event,json=lastWriteEvent" json:"last_write_event,omitempty"`
	// Time (in secs) since second last write thread event
	SecondLastWriteEvent uint32 `protobuf:"varint,134,opt,name=second_last_write_event,json=secondLastWriteEvent" json:"second_last_write_event,omitempty"`
	// Time (in secs) since last KA timer expiry before reset
	LastKAexpiryReset uint32 `protobuf:"varint,135,opt,name=last_k_aexpiry_reset,json=lastKAexpiryReset" json:"last_k_aexpiry_reset,omitempty"`
	// Time (in secs) since second last KA timer expiry before reset
	SecondLastKAexpiryReset uint32 `protobuf:"varint,136,opt,name=second_last_k_aexpiry_reset,json=secondLastKAexpiryReset" json:"second_last_k_aexpiry_reset,omitempty"`
	// Duration (in secs) since last time that KA was not sent before reset
	LastKAnotsentReset uint32 `protobuf:"varint,137,opt,name=last_k_anotsent_reset,json=lastKAnotsentReset" json:"last_k_anotsent_reset,omitempty"`
	// Duration (in secs) since last time that an error was encountered after KA expiry
	LastKAerrorReset uint32 `protobuf:"varint,138,opt,name=last_k_aerror_reset,json=lastKAerrorReset" json:"last_k_aerror_reset,omitempty"`
	// Time (in secs) since the last KA timer start before reset
	LastKAstartReset uint32 `protobuf:"varint,139,opt,name=last_k_astart_reset,json=lastKAstartReset" json:"last_k_astart_reset,omitempty"`
	// Time (in secs) since the second last KA timer start before reset
	SecondLastKAstartReset uint32 `protobuf:"varint,140,opt,name=second_last_k_astart_reset,json=secondLastKAstartReset" json:"second_last_k_astart_reset,omitempty"`
	// Number of times the connection was established
	ConnectionUpCount uint32 `protobuf:"varint,141,opt,name=connection_up_count,json=connectionUpCount" json:"connection_up_count,omitempty"`
	// Number of times connection was dropped
	ConnectionDownCount uint32 `protobuf:"varint,142,opt,name=connection_down_count,json=connectionDownCount" json:"connection_down_count,omitempty"`
	// Time since the connection last went down (seconds)
	TimeSinceConnectionLastDropped uint32 `protobuf:"varint,143,opt,name=time_since_connection_last_dropped,json=timeSinceConnectionLastDropped" json:"time_since_connection_last_dropped,omitempty"`
	// Reason for last connection reset
	ResetReason string `protobuf:"bytes,144,opt,name=reset_reason,json=resetReason" json:"reset_reason,omitempty"`
	// Reason for last peer close event
	PeerResetReason string `protobuf:"bytes,145,opt,name=peer_reset_reason,json=peerResetReason" json:"peer_reset_reason,omitempty"`
	// If peer closed, error received from transport
	PeerErrorCode uint32 `protobuf:"varint,146,opt,name=peer_error_code,json=peerErrorCode" json:"peer_error_code,omitempty"`
	// Code for the last error notification seen on the connection
	LastNotifyErrorCode uint32 `protobuf:"varint,147,opt,name=last_notify_error_code,json=lastNotifyErrorCode" json:"last_notify_error_code,omitempty"`
	// Error subcode of the last error notification seen on the connection
	LastNotifyErrorSubcode uint32 `protobuf:"varint,148,opt,name=last_notify_error_subcode,json=lastNotifyErrorSubcode" json:"last_notify_error_subcode,omitempty"`
	// Information on the last notification sent
	SendNotificationInfo *BgpNotfntype_ `protobuf:"bytes,149,opt,name=send_notification_info,json=sendNotificationInfo" json:"send_notification_info,omitempty"`
	// Information on the last notification received
	ReceivedNotificationInfo *BgpNotfntype_ `protobuf:"bytes,150,opt,name=received_notification_info,json=receivedNotificationInfo" json:"received_notification_info,omitempty"`
	// Number of error notifications received on the connection
	ErrorNotifiesReceived uint32 `protobuf:"varint,151,opt,name=error_notifies_received,json=errorNotifiesReceived" json:"error_notifies_received,omitempty"`
	// Number of error notifications sent on the connection
	ErrorNotifiesSent uint32 `protobuf:"varint,152,opt,name=error_notifies_sent,json=errorNotifiesSent" json:"error_notifies_sent,omitempty"`
	// Remote AS number
	RemoteAsNumber uint32 `protobuf:"varint,153,opt,name=remote_as_number,json=remoteAsNumber" json:"remote_as_number,omitempty"`
	// Bandwidth of link to single-hop eBGP peer
	DmzLinkBandwidth uint32 `protobuf:"varint,154,opt,name=dmz_link_bandwidth,json=dmzLinkBandwidth" json:"dmz_link_bandwidth,omitempty"`
	// Receive Bandwidth of link to single-hop eBGP peer
	EbgpRecvDmz string `protobuf:"bytes,155,opt,name=ebgp_recv_dmz,json=ebgpRecvDmz" json:"ebgp_recv_dmz,omitempty"`
	// Ebgp send dmz link bw mode
	EbgpSendDmzMode string `protobuf:"bytes,156,opt,name=ebgp_send_dmz_mode,json=ebgpSendDmzMode" json:"ebgp_send_dmz_mode,omitempty"`
	// Precedence or DSCP type
	TosType uint32 `protobuf:"varint,157,opt,name=tos_type,json=tosType" json:"tos_type,omitempty"`
	// Precedence or DSCP value
	TosValue uint32 `protobuf:"varint,158,opt,name=tos_value,json=tosValue" json:"tos_value,omitempty"`
	// Performance statistics
	PerformanceStatistics *BgpPerfNbr_ `protobuf:"bytes,159,opt,name=performance_statistics,json=performanceStatistics" json:"performance_statistics,omitempty"`
	// Address family specific neighbor data
	AfData []*NbrAfP `protobuf:"bytes,160,rep,name=af_data,json=afData" json:"af_data,omitempty"`
	// The TCP mode to be used to set up BGP session with the neighbor
	TcpSessionOpenMode string `protobuf:"bytes,161,opt,name=tcp_session_open_mode,json=tcpSessionOpenMode" json:"tcp_session_open_mode,omitempty"`
	// Name of the VRF
	VrfName string `protobuf:"bytes,162,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	// Standby RP socket inited for Active Open
	StandbyRp string `protobuf:"bytes,163,opt,name=standby_rp,json=standbyRp" json:"standby_rp,omitempty"`
	// Neighbor supports NSR
	NsrEnabled string `protobuf:"bytes,164,opt,name=nsr_enabled,json=nsrEnabled" json:"nsr_enabled,omitempty"`
	// Neighbor supports graceful-restart
	GracefulRestartEnabledNbr string `protobuf:"bytes,165,opt,name=graceful_restart_enabled_nbr,json=gracefulRestartEnabledNbr" json:"graceful_restart_enabled_nbr,omitempty"`
	// Neighbor restart time (in seconds)
	GrRestartTime uint32 `protobuf:"varint,166,opt,name=gr_restart_time,json=grRestartTime" json:"gr_restart_time,omitempty"`
	// Neighbor stale-path time (in seconds)
	GrStalePathTime uint32 `protobuf:"varint,167,opt,name=gr_stale_path_time,json=grStalePathTime" json:"gr_stale_path_time,omitempty"`
	// First standby SeqNo offset
	FssnOffset uint32 `protobuf:"varint,168,opt,name=fssn_offset,json=fssnOffset" json:"fssn_offset,omitempty"`
	// First standby PDU boundary SeqNo offset
	FpbsnOffset uint32 `protobuf:"varint,169,opt,name=fpbsn_offset,json=fpbsnOffset" json:"fpbsn_offset,omitempty"`
	// SeqNo of the last Ackd byte
	LastAckdSeqNo uint32 `protobuf:"varint,170,opt,name=last_ackd_seq_no,json=lastAckdSeqNo" json:"last_ackd_seq_no,omitempty"`
	// Total bytes written by write thread
	BytesWritten uint32 `protobuf:"varint,171,opt,name=bytes_written,json=bytesWritten" json:"bytes_written,omitempty"`
	// Total bytes read
	BytesRead uint32 `protobuf:"varint,172,opt,name=bytes_read,json=bytesRead" json:"bytes_read,omitempty"`
	// Total read bytes value insocket-lib
	SocketReadBytes uint32 `protobuf:"varint,173,opt,name=socket_read_bytes,json=socketReadBytes" json:"socket_read_bytes,omitempty"`
	// If true, socket read isdisabled
	IsReadDisabled string `protobuf:"bytes,174,opt,name=is_read_disabled,json=isReadDisabled" json:"is_read_disabled,omitempty"`
	// Total update bytes read
	UpdateBytesRead uint32 `protobuf:"varint,175,opt,name=update_bytes_read,json=updateBytesRead" json:"update_bytes_read,omitempty"`
	// NSR state
	NsrState string `protobuf:"bytes,176,opt,name=nsr_state,json=nsrState" json:"nsr_state,omitempty"`
	// If true, active socket canbe closed if passive openis received for a GRcapable neighbor
	IsPassiveClose string `protobuf:"bytes,177,opt,name=is_passive_close,json=isPassiveClose" json:"is_passive_close,omitempty"`
	// Neighbor enforce first AS
	NbrEnforceFirstAs string `protobuf:"bytes,178,opt,name=nbr_enforce_first_as,json=nbrEnforceFirstAs" json:"nbr_enforce_first_as,omitempty"`
	// BMP Servers to which the neighbor sends logs
	ActiveBmpServers uint32 `protobuf:"varint,179,opt,name=active_bmp_servers,json=activeBmpServers" json:"active_bmp_servers,omitempty"`
	// Cluster id
	NbrClusterId uint32 `protobuf:"varint,180,opt,name=nbr_cluster_id,json=nbrClusterId" json:"nbr_cluster_id,omitempty"`
	// Type of cluster_id:undefined/number/Ip address
	NbrInCluster uint32 `protobuf:"varint,181,opt,name=nbr_in_cluster,json=nbrInCluster" json:"nbr_in_cluster,omitempty"`
	// If true, the VPN client isan IBGP CE peer
	IgnoreConnected string `protobuf:"bytes,182,opt,name=ignore_connected,json=ignoreConnected" json:"ignore_connected,omitempty"`
	// If true, don't do NHconnected check for nbr
	InternalVpnClient string `protobuf:"bytes,183,opt,name=internal_vpn_client,json=internalVpnClient" json:"internal_vpn_client,omitempty"`
	// If true, socket has beenauto-armed for io control
	IoArmed string `protobuf:"bytes,184,opt,name=io_armed,json=ioArmed" json:"io_armed,omitempty"`
	// If true, socket has beenauto-armed for read
	ReadArmed string `protobuf:"bytes,185,opt,name=read_armed,json=readArmed" json:"read_armed,omitempty"`
	// If true, socket has beenauto-armed for write
	WriteArmed string `protobuf:"bytes,186,opt,name=write_armed,json=writeArmed" json:"write_armed,omitempty"`
	// Message statistics
	MessageStatistics *BgpNbrMsgStats `protobuf:"bytes,187,opt,name=message_statistics,json=messageStatistics" json:"message_statistics,omitempty"`
	// Remaining discard data (bytes) on Standby
	DiscardDataBytes uint32 `protobuf:"varint,188,opt,name=discard_data_bytes,json=discardDataBytes" json:"discard_data_bytes,omitempty"`
	// Local AS Replace-AS option
	LocalAsReplaceAs string `protobuf:"bytes,189,opt,name=local_as_replace_as,json=localAsReplaceAs" json:"local_as_replace_as,omitempty"`
	// Local AS Dual-AS option
	LocalAsDualAs string `protobuf:"bytes,190,opt,name=local_as_dual_as,json=localAsDualAs" json:"local_as_dual_as,omitempty"`
	// Applies only if Local AS Dual-AS option is enabled. Indicates if Dual-AS mode is native.
	LocalAsDualAsModeNative string `protobuf:"bytes,191,opt,name=local_as_dual_as_mode_native,json=localAsDualAsModeNative" json:"local_as_dual_as_mode_native,omitempty"`
	// Indicates if Egress Peer Engineering is enabled
	EgressPeerEngineeringEnabled string `protobuf:"bytes,192,opt,name=egress_peer_engineering_enabled,json=egressPeerEngineeringEnabled" json:"egress_peer_engineering_enabled,omitempty"`
	// Time When neighbor entered TCP Init Sync
	TcpInitSyncTimeSpec *BgpTimespec `protobuf:"bytes,193,opt,name=tcp_init_sync_time_spec,json=tcpInitSyncTimeSpec" json:"tcp_init_sync_time_spec,omitempty"`
	// Time when neighbor entered TCP Init Sync Phase Two
	TcpInitSyncPhaseTwoTimeSpec *BgpTimespec `protobuf:"bytes,194,opt,name=tcp_init_sync_phase_two_time_spec,json=tcpInitSyncPhaseTwoTimeSpec" json:"tcp_init_sync_phase_two_time_spec,omitempty"`
	// Time when neighbor entered TCP Init Sync Done
	TcpInitSyncDoneTimeSpec *BgpTimespec `protobuf:"bytes,195,opt,name=tcp_init_sync_done_time_spec,json=tcpInitSyncDoneTimeSpec" json:"tcp_init_sync_done_time_spec,omitempty"`
	// Discard AS4_PATH in case there is a discrepancy in merging AS_PATH and AS4_PATH,retain ASPATH
	DiscardAs4Path uint32 `protobuf:"varint,196,opt,name=discard_as4_path,json=discardAs4Path" json:"discard_as4_path,omitempty"`
	// Prefix validation disabled
	RpkiDisable string `protobuf:"bytes,197,opt,name=rpki_disable,json=rpkiDisable" json:"rpki_disable,omitempty"`
	// Prefix v. use validity
	RpkiUseValidity string `protobuf:"bytes,198,opt,name=rpki_use_validity,json=rpkiUseValidity" json:"rpki_use_validity,omitempty"`
	// Prefix v. allow invalid
	RpkiAllowInvalid string `protobuf:"bytes,199,opt,name=rpki_allow_invalid,json=rpkiAllowInvalid" json:"rpki_allow_invalid,omitempty"`
	// Prefix v. signal ibgp
	RpkiSignalIbgp string `protobuf:"bytes,200,opt,name=rpki_signal_ibgp,json=rpkiSignalIbgp" json:"rpki_signal_ibgp,omitempty"`
	// Graceful Maintenance
	GracefulMaintenance *BgpNbrGshut_ `protobuf:"bytes,201,opt,name=graceful_maintenance,json=gracefulMaintenance" json:"graceful_maintenance,omitempty"`
}

func (m *BgpNbrBag) Reset()                    { *m = BgpNbrBag{} }
func (m *BgpNbrBag) String() string            { return proto.CompactTextString(m) }
func (*BgpNbrBag) ProtoMessage()               {}
func (*BgpNbrBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BgpNbrBag) GetSpeakerId() uint32 {
	if m != nil {
		return m.SpeakerId
	}
	return 0
}

func (m *BgpNbrBag) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BgpNbrBag) GetLocalAs() uint32 {
	if m != nil {
		return m.LocalAs
	}
	return 0
}

func (m *BgpNbrBag) GetRemoteAs() uint32 {
	if m != nil {
		return m.RemoteAs
	}
	return 0
}

func (m *BgpNbrBag) GetHasInternalLink() string {
	if m != nil {
		return m.HasInternalLink
	}
	return ""
}

func (m *BgpNbrBag) GetIsExternalNeighborNotDirectlyConnected() string {
	if m != nil {
		return m.IsExternalNeighborNotDirectlyConnected
	}
	return ""
}

func (m *BgpNbrBag) GetMessagesReceived() uint32 {
	if m != nil {
		return m.MessagesReceived
	}
	return 0
}

func (m *BgpNbrBag) GetMessagesSent() uint32 {
	if m != nil {
		return m.MessagesSent
	}
	return 0
}

func (m *BgpNbrBag) GetUpdateMessagesIn() uint32 {
	if m != nil {
		return m.UpdateMessagesIn
	}
	return 0
}

func (m *BgpNbrBag) GetUpdateMessagesOut() uint32 {
	if m != nil {
		return m.UpdateMessagesOut
	}
	return 0
}

func (m *BgpNbrBag) GetMessagesQueuedIn() uint32 {
	if m != nil {
		return m.MessagesQueuedIn
	}
	return 0
}

func (m *BgpNbrBag) GetMessagesQueuedOut() uint32 {
	if m != nil {
		return m.MessagesQueuedOut
	}
	return 0
}

func (m *BgpNbrBag) GetConnectionEstablishedTime() uint32 {
	if m != nil {
		return m.ConnectionEstablishedTime
	}
	return 0
}

func (m *BgpNbrBag) GetConnectionState() string {
	if m != nil {
		return m.ConnectionState
	}
	return ""
}

func (m *BgpNbrBag) GetPreviousConnectionState() uint32 {
	if m != nil {
		return m.PreviousConnectionState
	}
	return 0
}

func (m *BgpNbrBag) GetConnectionAdminStatus() uint32 {
	if m != nil {
		return m.ConnectionAdminStatus
	}
	return 0
}

func (m *BgpNbrBag) GetOpenCheckErrorCode() string {
	if m != nil {
		return m.OpenCheckErrorCode
	}
	return ""
}

func (m *BgpNbrBag) GetConnectionLocalAddress() *BgpAddrtype {
	if m != nil {
		return m.ConnectionLocalAddress
	}
	return nil
}

func (m *BgpNbrBag) GetIsLocalAddressConfigured() string {
	if m != nil {
		return m.IsLocalAddressConfigured
	}
	return ""
}

func (m *BgpNbrBag) GetConnectionLocalPort() uint32 {
	if m != nil {
		return m.ConnectionLocalPort
	}
	return 0
}

func (m *BgpNbrBag) GetConnectionRemoteAddress() *BgpAddrtype {
	if m != nil {
		return m.ConnectionRemoteAddress
	}
	return nil
}

func (m *BgpNbrBag) GetConnectionRemotePort() uint32 {
	if m != nil {
		return m.ConnectionRemotePort
	}
	return 0
}

func (m *BgpNbrBag) GetNeighborInterfaceHandle() uint32 {
	if m != nil {
		return m.NeighborInterfaceHandle
	}
	return 0
}

func (m *BgpNbrBag) GetResetNotificationSent() string {
	if m != nil {
		return m.ResetNotificationSent
	}
	return ""
}

func (m *BgpNbrBag) GetIsAdministrativelyShutDown() string {
	if m != nil {
		return m.IsAdministrativelyShutDown
	}
	return ""
}

func (m *BgpNbrBag) GetIsNeighborMaxPrefixShutdown() string {
	if m != nil {
		return m.IsNeighborMaxPrefixShutdown
	}
	return ""
}

func (m *BgpNbrBag) GetIsOutOfMemoryShutdown() string {
	if m != nil {
		return m.IsOutOfMemoryShutdown
	}
	return ""
}

func (m *BgpNbrBag) GetIsOutOfMemoryForcedUp() string {
	if m != nil {
		return m.IsOutOfMemoryForcedUp
	}
	return ""
}

func (m *BgpNbrBag) GetIsEbgpPeerAsLeague() string {
	if m != nil {
		return m.IsEbgpPeerAsLeague
	}
	return ""
}

func (m *BgpNbrBag) GetIsEbgpPeerCommonAdmin() string {
	if m != nil {
		return m.IsEbgpPeerCommonAdmin
	}
	return ""
}

func (m *BgpNbrBag) GetTtlSecurityEnabled() string {
	if m != nil {
		return m.TtlSecurityEnabled
	}
	return ""
}

func (m *BgpNbrBag) GetSuppress4ByteAs() string {
	if m != nil {
		return m.Suppress4ByteAs
	}
	return ""
}

func (m *BgpNbrBag) GetBfdSessionState() string {
	if m != nil {
		return m.BfdSessionState
	}
	return ""
}

func (m *BgpNbrBag) GetBfdSessionCreatedState() string {
	if m != nil {
		return m.BfdSessionCreatedState
	}
	return ""
}

func (m *BgpNbrBag) GetBfdSessionEnableMode() string {
	if m != nil {
		return m.BfdSessionEnableMode
	}
	return ""
}

func (m *BgpNbrBag) GetBfdMinintervalval() uint32 {
	if m != nil {
		return m.BfdMinintervalval
	}
	return 0
}

func (m *BgpNbrBag) GetBfdMultiplierval() uint32 {
	if m != nil {
		return m.BfdMultiplierval
	}
	return 0
}

func (m *BgpNbrBag) GetBfdStateTs() uint64 {
	if m != nil {
		return m.BfdStateTs
	}
	return 0
}

func (m *BgpNbrBag) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *BgpNbrBag) GetNegotiatedProtocolVersion() uint32 {
	if m != nil {
		return m.NegotiatedProtocolVersion
	}
	return 0
}

func (m *BgpNbrBag) GetEbgpTimeToLive() uint32 {
	if m != nil {
		return m.EbgpTimeToLive
	}
	return 0
}

func (m *BgpNbrBag) GetIsEbgpMultihopBgpmplsForwardingDisabled() string {
	if m != nil {
		return m.IsEbgpMultihopBgpmplsForwardingDisabled
	}
	return ""
}

func (m *BgpNbrBag) GetTcpmss() uint32 {
	if m != nil {
		return m.Tcpmss
	}
	return 0
}

func (m *BgpNbrBag) GetMsgLogIn() uint32 {
	if m != nil {
		return m.MsgLogIn
	}
	return 0
}

func (m *BgpNbrBag) GetMsgLogOut() uint32 {
	if m != nil {
		return m.MsgLogOut
	}
	return 0
}

func (m *BgpNbrBag) GetNeighborLocalAs() uint32 {
	if m != nil {
		return m.NeighborLocalAs
	}
	return 0
}

func (m *BgpNbrBag) GetLocalAsNoPrepend() string {
	if m != nil {
		return m.LocalAsNoPrepend
	}
	return ""
}

func (m *BgpNbrBag) GetIsCapabilityNegotiationSuppressed() string {
	if m != nil {
		return m.IsCapabilityNegotiationSuppressed
	}
	return ""
}

func (m *BgpNbrBag) GetIsCapabilityNegotiationPerformed() string {
	if m != nil {
		return m.IsCapabilityNegotiationPerformed
	}
	return ""
}

func (m *BgpNbrBag) GetIsRouteRefreshCapabilityReceived() string {
	if m != nil {
		return m.IsRouteRefreshCapabilityReceived
	}
	return ""
}

func (m *BgpNbrBag) GetIsRouteRefreshOldCapabilityReceived() string {
	if m != nil {
		return m.IsRouteRefreshOldCapabilityReceived
	}
	return ""
}

func (m *BgpNbrBag) GetIsGrAware() string {
	if m != nil {
		return m.IsGrAware
	}
	return ""
}

func (m *BgpNbrBag) GetIs4ByteAsCapabilityReceived() string {
	if m != nil {
		return m.Is4ByteAsCapabilityReceived
	}
	return ""
}

func (m *BgpNbrBag) GetIs4ByteAsCapabilitySent() string {
	if m != nil {
		return m.Is4ByteAsCapabilitySent
	}
	return ""
}

func (m *BgpNbrBag) GetMultiProtocolCapabilityReceived() string {
	if m != nil {
		return m.MultiProtocolCapabilityReceived
	}
	return ""
}

func (m *BgpNbrBag) GetHoldTime() uint32 {
	if m != nil {
		return m.HoldTime
	}
	return 0
}

func (m *BgpNbrBag) GetKeepAliveTime() uint32 {
	if m != nil {
		return m.KeepAliveTime
	}
	return 0
}

func (m *BgpNbrBag) GetConfiguredHoldTime() uint32 {
	if m != nil {
		return m.ConfiguredHoldTime
	}
	return 0
}

func (m *BgpNbrBag) GetConfiguredKeepalive() uint32 {
	if m != nil {
		return m.ConfiguredKeepalive
	}
	return 0
}

func (m *BgpNbrBag) GetConfiguredMinAccHoldTime() uint32 {
	if m != nil {
		return m.ConfiguredMinAccHoldTime
	}
	return 0
}

func (m *BgpNbrBag) GetMinAdvertiseInterval() uint32 {
	if m != nil {
		return m.MinAdvertiseInterval
	}
	return 0
}

func (m *BgpNbrBag) GetMinAdvertiseIntervalMsecs() uint32 {
	if m != nil {
		return m.MinAdvertiseIntervalMsecs
	}
	return 0
}

func (m *BgpNbrBag) GetMinOriginationInterval() uint32 {
	if m != nil {
		return m.MinOriginationInterval
	}
	return 0
}

func (m *BgpNbrBag) GetConnectRetryInterval() uint32 {
	if m != nil {
		return m.ConnectRetryInterval
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceLastUpdate() uint32 {
	if m != nil {
		return m.TimeSinceLastUpdate
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceLastRead() uint32 {
	if m != nil {
		return m.TimeSinceLastRead
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceLastReadReset() uint32 {
	if m != nil {
		return m.TimeSinceLastReadReset
	}
	return 0
}

func (m *BgpNbrBag) GetTimeLastCb() uint64 {
	if m != nil {
		return m.TimeLastCb
	}
	return 0
}

func (m *BgpNbrBag) GetTimeLastCbReset() uint32 {
	if m != nil {
		return m.TimeLastCbReset
	}
	return 0
}

func (m *BgpNbrBag) GetTimeLastFb() uint64 {
	if m != nil {
		return m.TimeLastFb
	}
	return 0
}

func (m *BgpNbrBag) GetCountLastWrite() uint32 {
	if m != nil {
		return m.CountLastWrite
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceLastWrite() uint32 {
	if m != nil {
		return m.TimeSinceLastWrite
	}
	return 0
}

func (m *BgpNbrBag) GetAttemptedLastWriteBytes() uint32 {
	if m != nil {
		return m.AttemptedLastWriteBytes
	}
	return 0
}

func (m *BgpNbrBag) GetActualLastWriteBytes() uint32 {
	if m != nil {
		return m.ActualLastWriteBytes
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceSecondLastWrite() uint32 {
	if m != nil {
		return m.TimeSinceSecondLastWrite
	}
	return 0
}

func (m *BgpNbrBag) GetAttemptedSecondLastWriteBytes() uint32 {
	if m != nil {
		return m.AttemptedSecondLastWriteBytes
	}
	return 0
}

func (m *BgpNbrBag) GetActualSecondLastWriteBytes() uint32 {
	if m != nil {
		return m.ActualSecondLastWriteBytes
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceLastWriteReset() uint32 {
	if m != nil {
		return m.TimeSinceLastWriteReset
	}
	return 0
}

func (m *BgpNbrBag) GetAttemptedLastWriteResetBytes() uint32 {
	if m != nil {
		return m.AttemptedLastWriteResetBytes
	}
	return 0
}

func (m *BgpNbrBag) GetActualLastWriteResetBytes() uint32 {
	if m != nil {
		return m.ActualLastWriteResetBytes
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceSecondLastWriteReset() uint32 {
	if m != nil {
		return m.TimeSinceSecondLastWriteReset
	}
	return 0
}

func (m *BgpNbrBag) GetAttemptedSecondLastWriteResetBytes() uint32 {
	if m != nil {
		return m.AttemptedSecondLastWriteResetBytes
	}
	return 0
}

func (m *BgpNbrBag) GetActualSecondLastWriteResetBytes() uint32 {
	if m != nil {
		return m.ActualSecondLastWriteResetBytes
	}
	return 0
}

func (m *BgpNbrBag) GetLastWriteEvent() uint32 {
	if m != nil {
		return m.LastWriteEvent
	}
	return 0
}

func (m *BgpNbrBag) GetSecondLastWriteEvent() uint32 {
	if m != nil {
		return m.SecondLastWriteEvent
	}
	return 0
}

func (m *BgpNbrBag) GetLastKAexpiryReset() uint32 {
	if m != nil {
		return m.LastKAexpiryReset
	}
	return 0
}

func (m *BgpNbrBag) GetSecondLastKAexpiryReset() uint32 {
	if m != nil {
		return m.SecondLastKAexpiryReset
	}
	return 0
}

func (m *BgpNbrBag) GetLastKAnotsentReset() uint32 {
	if m != nil {
		return m.LastKAnotsentReset
	}
	return 0
}

func (m *BgpNbrBag) GetLastKAerrorReset() uint32 {
	if m != nil {
		return m.LastKAerrorReset
	}
	return 0
}

func (m *BgpNbrBag) GetLastKAstartReset() uint32 {
	if m != nil {
		return m.LastKAstartReset
	}
	return 0
}

func (m *BgpNbrBag) GetSecondLastKAstartReset() uint32 {
	if m != nil {
		return m.SecondLastKAstartReset
	}
	return 0
}

func (m *BgpNbrBag) GetConnectionUpCount() uint32 {
	if m != nil {
		return m.ConnectionUpCount
	}
	return 0
}

func (m *BgpNbrBag) GetConnectionDownCount() uint32 {
	if m != nil {
		return m.ConnectionDownCount
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceConnectionLastDropped() uint32 {
	if m != nil {
		return m.TimeSinceConnectionLastDropped
	}
	return 0
}

func (m *BgpNbrBag) GetResetReason() string {
	if m != nil {
		return m.ResetReason
	}
	return ""
}

func (m *BgpNbrBag) GetPeerResetReason() string {
	if m != nil {
		return m.PeerResetReason
	}
	return ""
}

func (m *BgpNbrBag) GetPeerErrorCode() uint32 {
	if m != nil {
		return m.PeerErrorCode
	}
	return 0
}

func (m *BgpNbrBag) GetLastNotifyErrorCode() uint32 {
	if m != nil {
		return m.LastNotifyErrorCode
	}
	return 0
}

func (m *BgpNbrBag) GetLastNotifyErrorSubcode() uint32 {
	if m != nil {
		return m.LastNotifyErrorSubcode
	}
	return 0
}

func (m *BgpNbrBag) GetSendNotificationInfo() *BgpNotfntype_ {
	if m != nil {
		return m.SendNotificationInfo
	}
	return nil
}

func (m *BgpNbrBag) GetReceivedNotificationInfo() *BgpNotfntype_ {
	if m != nil {
		return m.ReceivedNotificationInfo
	}
	return nil
}

func (m *BgpNbrBag) GetErrorNotifiesReceived() uint32 {
	if m != nil {
		return m.ErrorNotifiesReceived
	}
	return 0
}

func (m *BgpNbrBag) GetErrorNotifiesSent() uint32 {
	if m != nil {
		return m.ErrorNotifiesSent
	}
	return 0
}

func (m *BgpNbrBag) GetRemoteAsNumber() uint32 {
	if m != nil {
		return m.RemoteAsNumber
	}
	return 0
}

func (m *BgpNbrBag) GetDmzLinkBandwidth() uint32 {
	if m != nil {
		return m.DmzLinkBandwidth
	}
	return 0
}

func (m *BgpNbrBag) GetEbgpRecvDmz() string {
	if m != nil {
		return m.EbgpRecvDmz
	}
	return ""
}

func (m *BgpNbrBag) GetEbgpSendDmzMode() string {
	if m != nil {
		return m.EbgpSendDmzMode
	}
	return ""
}

func (m *BgpNbrBag) GetTosType() uint32 {
	if m != nil {
		return m.TosType
	}
	return 0
}

func (m *BgpNbrBag) GetTosValue() uint32 {
	if m != nil {
		return m.TosValue
	}
	return 0
}

func (m *BgpNbrBag) GetPerformanceStatistics() *BgpPerfNbr_ {
	if m != nil {
		return m.PerformanceStatistics
	}
	return nil
}

func (m *BgpNbrBag) GetAfData() []*NbrAfP {
	if m != nil {
		return m.AfData
	}
	return nil
}

func (m *BgpNbrBag) GetTcpSessionOpenMode() string {
	if m != nil {
		return m.TcpSessionOpenMode
	}
	return ""
}

func (m *BgpNbrBag) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpNbrBag) GetStandbyRp() string {
	if m != nil {
		return m.StandbyRp
	}
	return ""
}

func (m *BgpNbrBag) GetNsrEnabled() string {
	if m != nil {
		return m.NsrEnabled
	}
	return ""
}

func (m *BgpNbrBag) GetGracefulRestartEnabledNbr() string {
	if m != nil {
		return m.GracefulRestartEnabledNbr
	}
	return ""
}

func (m *BgpNbrBag) GetGrRestartTime() uint32 {
	if m != nil {
		return m.GrRestartTime
	}
	return 0
}

func (m *BgpNbrBag) GetGrStalePathTime() uint32 {
	if m != nil {
		return m.GrStalePathTime
	}
	return 0
}

func (m *BgpNbrBag) GetFssnOffset() uint32 {
	if m != nil {
		return m.FssnOffset
	}
	return 0
}

func (m *BgpNbrBag) GetFpbsnOffset() uint32 {
	if m != nil {
		return m.FpbsnOffset
	}
	return 0
}

func (m *BgpNbrBag) GetLastAckdSeqNo() uint32 {
	if m != nil {
		return m.LastAckdSeqNo
	}
	return 0
}

func (m *BgpNbrBag) GetBytesWritten() uint32 {
	if m != nil {
		return m.BytesWritten
	}
	return 0
}

func (m *BgpNbrBag) GetBytesRead() uint32 {
	if m != nil {
		return m.BytesRead
	}
	return 0
}

func (m *BgpNbrBag) GetSocketReadBytes() uint32 {
	if m != nil {
		return m.SocketReadBytes
	}
	return 0
}

func (m *BgpNbrBag) GetIsReadDisabled() string {
	if m != nil {
		return m.IsReadDisabled
	}
	return ""
}

func (m *BgpNbrBag) GetUpdateBytesRead() uint32 {
	if m != nil {
		return m.UpdateBytesRead
	}
	return 0
}

func (m *BgpNbrBag) GetNsrState() string {
	if m != nil {
		return m.NsrState
	}
	return ""
}

func (m *BgpNbrBag) GetIsPassiveClose() string {
	if m != nil {
		return m.IsPassiveClose
	}
	return ""
}

func (m *BgpNbrBag) GetNbrEnforceFirstAs() string {
	if m != nil {
		return m.NbrEnforceFirstAs
	}
	return ""
}

func (m *BgpNbrBag) GetActiveBmpServers() uint32 {
	if m != nil {
		return m.ActiveBmpServers
	}
	return 0
}

func (m *BgpNbrBag) GetNbrClusterId() uint32 {
	if m != nil {
		return m.NbrClusterId
	}
	return 0
}

func (m *BgpNbrBag) GetNbrInCluster() uint32 {
	if m != nil {
		return m.NbrInCluster
	}
	return 0
}

func (m *BgpNbrBag) GetIgnoreConnected() string {
	if m != nil {
		return m.IgnoreConnected
	}
	return ""
}

func (m *BgpNbrBag) GetInternalVpnClient() string {
	if m != nil {
		return m.InternalVpnClient
	}
	return ""
}

func (m *BgpNbrBag) GetIoArmed() string {
	if m != nil {
		return m.IoArmed
	}
	return ""
}

func (m *BgpNbrBag) GetReadArmed() string {
	if m != nil {
		return m.ReadArmed
	}
	return ""
}

func (m *BgpNbrBag) GetWriteArmed() string {
	if m != nil {
		return m.WriteArmed
	}
	return ""
}

func (m *BgpNbrBag) GetMessageStatistics() *BgpNbrMsgStats {
	if m != nil {
		return m.MessageStatistics
	}
	return nil
}

func (m *BgpNbrBag) GetDiscardDataBytes() uint32 {
	if m != nil {
		return m.DiscardDataBytes
	}
	return 0
}

func (m *BgpNbrBag) GetLocalAsReplaceAs() string {
	if m != nil {
		return m.LocalAsReplaceAs
	}
	return ""
}

func (m *BgpNbrBag) GetLocalAsDualAs() string {
	if m != nil {
		return m.LocalAsDualAs
	}
	return ""
}

func (m *BgpNbrBag) GetLocalAsDualAsModeNative() string {
	if m != nil {
		return m.LocalAsDualAsModeNative
	}
	return ""
}

func (m *BgpNbrBag) GetEgressPeerEngineeringEnabled() string {
	if m != nil {
		return m.EgressPeerEngineeringEnabled
	}
	return ""
}

func (m *BgpNbrBag) GetTcpInitSyncTimeSpec() *BgpTimespec {
	if m != nil {
		return m.TcpInitSyncTimeSpec
	}
	return nil
}

func (m *BgpNbrBag) GetTcpInitSyncPhaseTwoTimeSpec() *BgpTimespec {
	if m != nil {
		return m.TcpInitSyncPhaseTwoTimeSpec
	}
	return nil
}

func (m *BgpNbrBag) GetTcpInitSyncDoneTimeSpec() *BgpTimespec {
	if m != nil {
		return m.TcpInitSyncDoneTimeSpec
	}
	return nil
}

func (m *BgpNbrBag) GetDiscardAs4Path() uint32 {
	if m != nil {
		return m.DiscardAs4Path
	}
	return 0
}

func (m *BgpNbrBag) GetRpkiDisable() string {
	if m != nil {
		return m.RpkiDisable
	}
	return ""
}

func (m *BgpNbrBag) GetRpkiUseValidity() string {
	if m != nil {
		return m.RpkiUseValidity
	}
	return ""
}

func (m *BgpNbrBag) GetRpkiAllowInvalid() string {
	if m != nil {
		return m.RpkiAllowInvalid
	}
	return ""
}

func (m *BgpNbrBag) GetRpkiSignalIbgp() string {
	if m != nil {
		return m.RpkiSignalIbgp
	}
	return ""
}

func (m *BgpNbrBag) GetGracefulMaintenance() *BgpNbrGshut_ {
	if m != nil {
		return m.GracefulMaintenance
	}
	return nil
}

type BgpTimespec struct {
	// Seconds part of time value
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Nanoseconds part of time value
	Nanoseconds uint32 `protobuf:"varint,2,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *BgpTimespec) Reset()                    { *m = BgpTimespec{} }
func (m *BgpTimespec) String() string            { return proto.CompactTextString(m) }
func (*BgpTimespec) ProtoMessage()               {}
func (*BgpTimespec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BgpTimespec) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *BgpTimespec) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

// IPV4Tunnel Address type
type IPV4TunnelAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4TunnelAddressType) Reset()                    { *m = IPV4TunnelAddressType{} }
func (m *IPV4TunnelAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4TunnelAddressType) ProtoMessage()               {}
func (*IPV4TunnelAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IPV4TunnelAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4MDT Address type
type IPV4MDTAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MDTAddressType) Reset()                    { *m = IPV4MDTAddressType{} }
func (m *IPV4MDTAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MDTAddressType) ProtoMessage()               {}
func (*IPV4MDTAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IPV4MDTAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 RTConstraint Address type
type RTConstraintAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *RTConstraintAddressType) Reset()                    { *m = RTConstraintAddressType{} }
func (m *RTConstraintAddressType) String() string            { return proto.CompactTextString(m) }
func (*RTConstraintAddressType) ProtoMessage()               {}
func (*RTConstraintAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RTConstraintAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV6 Address type
type IPV6AddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6AddressType) Reset()                    { *m = IPV6AddressType{} }
func (m *IPV6AddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6AddressType) ProtoMessage()               {}
func (*IPV6AddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IPV6AddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpL2VpnAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnAddrT) Reset()                    { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()               {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// L2VPN EVPN Address type
type L2VPNEVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *L2VPNEVPNAddressType) Reset()                    { *m = L2VPNEVPNAddressType{} }
func (m *L2VPNEVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*L2VPNEVPNAddressType) ProtoMessage()               {}
func (*L2VPNEVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *L2VPNEVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnMspwAddrT) Reset()                    { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()               {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// IPV6 MVPN Address type
type IPV6MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6MVPNAddressType) Reset()                    { *m = IPV6MVPNAddressType{} }
func (m *IPV6MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6MVPNAddressType) ProtoMessage()               {}
func (*IPV6MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *IPV6MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 MVPN Address type
type IPV4MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MVPNAddressType) Reset()                    { *m = IPV4MVPNAddressType{} }
func (m *IPV4MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MVPNAddressType) ProtoMessage()               {}
func (*IPV4MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *IPV4MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// LINKSTATE LINKSTATE Address type
type LS_LSAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *LS_LSAddressType) Reset()                    { *m = LS_LSAddressType{} }
func (m *LS_LSAddressType) String() string            { return proto.CompactTextString(m) }
func (*LS_LSAddressType) ProtoMessage()               {}
func (*LS_LSAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *LS_LSAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv4 Flowspec Address type
type IPv4FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv4FlowspecAddressType) Reset()                    { *m = IPv4FlowspecAddressType{} }
func (m *IPv4FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv4FlowspecAddressType) ProtoMessage()               {}
func (*IPv4FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *IPv4FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv6 Flowspec Address type
type IPv6FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv6FlowspecAddressType) Reset()                    { *m = IPv6FlowspecAddressType{} }
func (m *IPv6FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv6FlowspecAddressType) ProtoMessage()               {}
func (*IPv6FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *IPv6FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpAddrtype struct {
	Afi string `protobuf:"bytes,1,opt,name=afi" json:"afi,omitempty"`
	// IPv4 Addr
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv4 Mcast Addr
	Ipv4McastAddress string `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress" json:"ipv4_mcast_address,omitempty"`
	// IPv4 Label Addr
	Ipv4LabelAddress string `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress" json:"ipv4_label_address,omitempty"`
	// IPv4 Tunnel
	Ipv4TunnelAddress *IPV4TunnelAddressType `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress" json:"ipv4_tunnel_address,omitempty"`
	// IPv4 MDT Addr
	Ipv4MdtAddress *IPV4MDTAddressType `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress" json:"ipv4_mdt_address,omitempty"`
	// IPv4 VPN Addr
	Ipv4VpnAddress string `protobuf:"bytes,7,opt,name=ipv4_vpn_address,json=ipv4VpnAddress" json:"ipv4_vpn_address,omitempty"`
	// IPv4 VPN Mcast Addr
	Ipv4VpnaMcastddress string `protobuf:"bytes,8,opt,name=ipv4_vpna_mcastddress,json=ipv4VpnaMcastddress" json:"ipv4_vpna_mcastddress,omitempty"`
	// IPV6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	// IPV6 Mcast Addr
	Ipv6McastAddress *IPV6AddressType `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress" json:"ipv6_mcast_address,omitempty"`
	// IPv6 Label Addr
	Ipv6LabelAddress *IPV6AddressType `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress" json:"ipv6_label_address,omitempty"`
	// IPv6 VPN Addr
	Ipv6VpnAddress *IPV6AddressType `protobuf:"bytes,12,opt,name=ipv6_vpn_address,json=ipv6VpnAddress" json:"ipv6_vpn_address,omitempty"`
	// IPv6 VPN Mcast Addr
	Ipv6VpnMcastAddress *IPV6AddressType `protobuf:"bytes,13,opt,name=ipv6_vpn_mcast_address,json=ipv6VpnMcastAddress" json:"ipv6_vpn_mcast_address,omitempty"`
	// L2VPN VPLS Addr
	L2VpnvplsAddress *BgpL2VpnAddrT `protobuf:"bytes,14,opt,name=l2_vpnvpls_address,json=l2VpnvplsAddress" json:"l2_vpnvpls_address,omitempty"`
	// RT Constrt Addr
	RtConstraintAddress *RTConstraintAddressType `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress" json:"rt_constraint_address,omitempty"`
	// MVPN addr
	Ipv6MvpnAddress *IPV6MVPNAddressType `protobuf:"bytes,16,opt,name=ipv6_mvpn_address,json=ipv6MvpnAddress" json:"ipv6_mvpn_address,omitempty"`
	// MVPN4 addr
	Ipv4MvpnAddress *IPV4MVPNAddressType `protobuf:"bytes,17,opt,name=ipv4_mvpn_address,json=ipv4MvpnAddress" json:"ipv4_mvpn_address,omitempty"`
	// L2VPN EVPN Addr
	L2VpnEvpnAddress *L2VPNEVPNAddressType `protobuf:"bytes,18,opt,name=l2_vpn_evpn_address,json=l2VpnEvpnAddress" json:"l2_vpn_evpn_address,omitempty"`
	// LINKSTATE LINKSTATE Addr
	LsLsAddress *LS_LSAddressType `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress" json:"ls_ls_address,omitempty"`
	// L2VPN MSPW Addr
	L2VpnMspwAddress *BgpL2VpnMspwAddrT `protobuf:"bytes,20,opt,name=l2_vpn_mspw_address,json=l2VpnMspwAddress" json:"l2_vpn_mspw_address,omitempty"`
	// IPV4 Flowspec Addr
	Ipv4FlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress" json:"ipv4_flowspec_address,omitempty"`
	// IPV6 Flowspec Addr
	Ipv6FlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress" json:"ipv6_flowspec_address,omitempty"`
	// IPV4 VPN Flowspec Addr
	Ipv4VpnFlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,23,opt,name=ipv4_vpn_flowspec_address,json=ipv4VpnFlowspecAddress" json:"ipv4_vpn_flowspec_address,omitempty"`
	// IPV6 VPN Flowspec Addr
	Ipv6VpnFlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,24,opt,name=ipv6_vpn_flowspec_address,json=ipv6VpnFlowspecAddress" json:"ipv6_vpn_flowspec_address,omitempty"`
}

func (m *BgpAddrtype) Reset()                    { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string            { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()               {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() *IPV4TunnelAddressType {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MdtAddress() *IPV4MDTAddressType {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6McastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6LabelAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnvplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() *RTConstraintAddressType {
	if m != nil {
		return m.RtConstraintAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() *IPV6MVPNAddressType {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() *IPV4MVPNAddressType {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() *L2VPNEVPNAddressType {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetLsLsAddress() *LS_LSAddressType {
	if m != nil {
		return m.LsLsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return nil
}

type BgpPerfNbrAf_ struct {
	SubGroupPendingMessageCount  uint32 `protobuf:"varint,1,opt,name=sub_group_pending_message_count,json=subGroupPendingMessageCount" json:"sub_group_pending_message_count,omitempty"`
	ProcessedMessages            uint32 `protobuf:"varint,2,opt,name=processed_messages,json=processedMessages" json:"processed_messages,omitempty"`
	SentMessages                 uint32 `protobuf:"varint,3,opt,name=sent_messages,json=sentMessages" json:"sent_messages,omitempty"`
	SplitHorizonUpdateTransmit   uint32 `protobuf:"varint,4,opt,name=split_horizon_update_transmit,json=splitHorizonUpdateTransmit" json:"split_horizon_update_transmit,omitempty"`
	SplitHorizonUpdateBlocked    uint32 `protobuf:"varint,5,opt,name=split_horizon_update_blocked,json=splitHorizonUpdateBlocked" json:"split_horizon_update_blocked,omitempty"`
	SplitHorizonWithdrawTransmit uint32 `protobuf:"varint,6,opt,name=split_horizon_withdraw_transmit,json=splitHorizonWithdrawTransmit" json:"split_horizon_withdraw_transmit,omitempty"`
	SplitHorizonWithdrawBlocked  uint32 `protobuf:"varint,7,opt,name=split_horizon_withdraw_blocked,json=splitHorizonWithdrawBlocked" json:"split_horizon_withdraw_blocked,omitempty"`
}

func (m *BgpPerfNbrAf_) Reset()                    { *m = BgpPerfNbrAf_{} }
func (m *BgpPerfNbrAf_) String() string            { return proto.CompactTextString(m) }
func (*BgpPerfNbrAf_) ProtoMessage()               {}
func (*BgpPerfNbrAf_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *BgpPerfNbrAf_) GetSubGroupPendingMessageCount() uint32 {
	if m != nil {
		return m.SubGroupPendingMessageCount
	}
	return 0
}

func (m *BgpPerfNbrAf_) GetProcessedMessages() uint32 {
	if m != nil {
		return m.ProcessedMessages
	}
	return 0
}

func (m *BgpPerfNbrAf_) GetSentMessages() uint32 {
	if m != nil {
		return m.SentMessages
	}
	return 0
}

func (m *BgpPerfNbrAf_) GetSplitHorizonUpdateTransmit() uint32 {
	if m != nil {
		return m.SplitHorizonUpdateTransmit
	}
	return 0
}

func (m *BgpPerfNbrAf_) GetSplitHorizonUpdateBlocked() uint32 {
	if m != nil {
		return m.SplitHorizonUpdateBlocked
	}
	return 0
}

func (m *BgpPerfNbrAf_) GetSplitHorizonWithdrawTransmit() uint32 {
	if m != nil {
		return m.SplitHorizonWithdrawTransmit
	}
	return 0
}

func (m *BgpPerfNbrAf_) GetSplitHorizonWithdrawBlocked() uint32 {
	if m != nil {
		return m.SplitHorizonWithdrawBlocked
	}
	return 0
}

type BgpPerfNbr_ struct {
	// Number of partial read throttles
	ReadThrottles uint32 `protobuf:"varint,1,opt,name=read_throttles,json=readThrottles" json:"read_throttles,omitempty"`
	// Num socket reads after nbrs crossed low threshold
	LowThrottledRead uint32 `protobuf:"varint,2,opt,name=low_throttled_read,json=lowThrottledRead" json:"low_throttled_read,omitempty"`
	// Num of socket reads after nbr crossed high threshold
	HighThrottledRead uint32 `protobuf:"varint,3,opt,name=high_throttled_read,json=highThrottledRead" json:"high_throttled_read,omitempty"`
	// Time (in secs) since last read after being throttled
	TimeSinceLastThrottledRead uint32 `protobuf:"varint,4,opt,name=time_since_last_throttled_read,json=timeSinceLastThrottledRead" json:"time_since_last_throttled_read,omitempty"`
	// No. of calls to function to read inbound data
	ReadCallsCount uint32 `protobuf:"varint,5,opt,name=read_calls_count,json=readCallsCount" json:"read_calls_count,omitempty"`
	// Number of BGP messages read
	ReadMessagesCount uint32 `protobuf:"varint,6,opt,name=read_messages_count,json=readMessagesCount" json:"read_messages_count,omitempty"`
	// No. of bytes of data read
	DataBytesRead uint32 `protobuf:"varint,7,opt,name=data_bytes_read,json=dataBytesRead" json:"data_bytes_read,omitempty"`
	// Time spent reading inbound data (milliseconds)
	IoReadTime uint32 `protobuf:"varint,8,opt,name=io_read_time,json=ioReadTime" json:"io_read_time,omitempty"`
	// No. of calls to function to write outbound data
	WriteCallsCount uint32 `protobuf:"varint,9,opt,name=write_calls_count,json=writeCallsCount" json:"write_calls_count,omitempty"`
	// No. of data bytes written
	DataBytesWritten uint32 `protobuf:"varint,10,opt,name=data_bytes_written,json=dataBytesWritten" json:"data_bytes_written,omitempty"`
	// Time spent writing outbound data (milliseconds)
	IoWriteTime uint32 `protobuf:"varint,11,opt,name=io_write_time,json=ioWriteTime" json:"io_write_time,omitempty"`
	// Seq No of the last sent byte
	LastSentSeqNo uint32 `protobuf:"varint,12,opt,name=last_sent_seq_no,json=lastSentSeqNo" json:"last_sent_seq_no,omitempty"`
	// No. of calls to function to process sub-group message list
	WriteSubgroupCallsCount uint32 `protobuf:"varint,13,opt,name=write_subgroup_calls_count,json=writeSubgroupCallsCount" json:"write_subgroup_calls_count,omitempty"`
	// Number of sub-group msgs processed
	WriteSubgroupMessagesCount uint32 `protobuf:"varint,14,opt,name=write_subgroup_messages_count,json=writeSubgroupMessagesCount" json:"write_subgroup_messages_count,omitempty"`
	// Time spent processing sub-group message list  (milliseconds)
	SubgroupListTime uint32 `protobuf:"varint,15,opt,name=subgroup_list_time,json=subgroupListTime" json:"subgroup_list_time,omitempty"`
	// No. of calls to function to process write queue
	WriteQueueCallsCount uint32 `protobuf:"varint,16,opt,name=write_queue_calls_count,json=writeQueueCallsCount" json:"write_queue_calls_count,omitempty"`
	// Number of write queue messages processed
	WriteQueueMessagesCount uint32 `protobuf:"varint,17,opt,name=write_queue_messages_count,json=writeQueueMessagesCount" json:"write_queue_messages_count,omitempty"`
	// Time spent processing write queue (milliseconds)
	WriteQueueTime uint32 `protobuf:"varint,18,opt,name=write_queue_time,json=writeQueueTime" json:"write_queue_time,omitempty"`
	// Number of inbound update messages processed
	InboundUpdateMessages uint32 `protobuf:"varint,19,opt,name=inbound_update_messages,json=inboundUpdateMessages" json:"inbound_update_messages,omitempty"`
	// Time spent processing inbound update messages (milliseconds)
	InboundUpdateMessagesTime uint32 `protobuf:"varint,20,opt,name=inbound_update_messages_time,json=inboundUpdateMessagesTime" json:"inbound_update_messages_time,omitempty"`
	// Size of largest socket (milliseconds)
	MaximumReadSize uint32 `protobuf:"varint,21,opt,name=maximum_read_size,json=maximumReadSize" json:"maximum_read_size,omitempty"`
	// Number of retried Active opens for this neighbor
	Actives uint32 `protobuf:"varint,22,opt,name=actives" json:"actives,omitempty"`
	// Number of Active Opens that failed in the Post Active State for this neighbor
	FailedPostActives uint32 `protobuf:"varint,23,opt,name=failed_post_actives,json=failedPostActives" json:"failed_post_actives,omitempty"`
	// Number of retried Passive opens for this neighbor
	Passives uint32 `protobuf:"varint,24,opt,name=passives" json:"passives,omitempty"`
	// Number of rejected Passive opens for this neighbor
	RejectedPassives uint32 `protobuf:"varint,25,opt,name=rejected_passives,json=rejectedPassives" json:"rejected_passives,omitempty"`
	// Number of Closed Active connections for this neighbor due to collision
	ActiveCollision uint32 `protobuf:"varint,26,opt,name=active_collision,json=activeCollision" json:"active_collision,omitempty"`
	// Number of Closed Remote opens for this neighborneighbor due to collision
	PassiveCollision uint32 `protobuf:"varint,27,opt,name=passive_collision,json=passiveCollision" json:"passive_collision,omitempty"`
	// Number of times io-control thread trigger read thread
	ControlToReadThreadTrigger uint32 `protobuf:"varint,28,opt,name=control_to_read_thread_trigger,json=controlToReadThreadTrigger" json:"control_to_read_thread_trigger,omitempty"`
	// Number of times io-control thread trigger write thread
	ControlToWriteThreadTrigger uint32 `protobuf:"varint,29,opt,name=control_to_write_thread_trigger,json=controlToWriteThreadTrigger" json:"control_to_write_thread_trigger,omitempty"`
	// Socket status, TRUE if socket closed
	NetworkStatus uint32 `protobuf:"varint,30,opt,name=network_status,json=networkStatus" json:"network_status,omitempty"`
	// Reset flags, per thread
	ResetFlags uint32 `protobuf:"varint,31,opt,name=reset_flags,json=resetFlags" json:"reset_flags,omitempty"`
	// Nbr flags, per thread
	NbrFlags uint32 `protobuf:"varint,32,opt,name=nbr_flags,json=nbrFlags" json:"nbr_flags,omitempty"`
	// Primary FD, per nbr
	NbrFd int32 `protobuf:"zigzag32,33,opt,name=nbr_fd,json=nbrFd" json:"nbr_fd,omitempty"`
	// Reset Retries, per nbr
	ResetRetries uint32 `protobuf:"varint,34,opt,name=reset_retries,json=resetRetries" json:"reset_retries,omitempty"`
	// Sync flags, per nbr
	SyncFlags uint32 `protobuf:"varint,35,opt,name=sync_flags,json=syncFlags" json:"sync_flags,omitempty"`
	// Number of times NSR scoped sync has been done
	NsrOperDownCount uint32 `protobuf:"varint,36,opt,name=nsr_oper_down_count,json=nsrOperDownCount" json:"nsr_oper_down_count,omitempty"`
	// Last time NSR scoped syncwas done for the neighbor
	LastNsrScopedSync uint32 `protobuf:"varint,37,opt,name=last_nsr_scoped_sync,json=lastNsrScopedSync" json:"last_nsr_scoped_sync,omitempty"`
}

func (m *BgpPerfNbr_) Reset()                    { *m = BgpPerfNbr_{} }
func (m *BgpPerfNbr_) String() string            { return proto.CompactTextString(m) }
func (*BgpPerfNbr_) ProtoMessage()               {}
func (*BgpPerfNbr_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *BgpPerfNbr_) GetReadThrottles() uint32 {
	if m != nil {
		return m.ReadThrottles
	}
	return 0
}

func (m *BgpPerfNbr_) GetLowThrottledRead() uint32 {
	if m != nil {
		return m.LowThrottledRead
	}
	return 0
}

func (m *BgpPerfNbr_) GetHighThrottledRead() uint32 {
	if m != nil {
		return m.HighThrottledRead
	}
	return 0
}

func (m *BgpPerfNbr_) GetTimeSinceLastThrottledRead() uint32 {
	if m != nil {
		return m.TimeSinceLastThrottledRead
	}
	return 0
}

func (m *BgpPerfNbr_) GetReadCallsCount() uint32 {
	if m != nil {
		return m.ReadCallsCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetReadMessagesCount() uint32 {
	if m != nil {
		return m.ReadMessagesCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetDataBytesRead() uint32 {
	if m != nil {
		return m.DataBytesRead
	}
	return 0
}

func (m *BgpPerfNbr_) GetIoReadTime() uint32 {
	if m != nil {
		return m.IoReadTime
	}
	return 0
}

func (m *BgpPerfNbr_) GetWriteCallsCount() uint32 {
	if m != nil {
		return m.WriteCallsCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetDataBytesWritten() uint32 {
	if m != nil {
		return m.DataBytesWritten
	}
	return 0
}

func (m *BgpPerfNbr_) GetIoWriteTime() uint32 {
	if m != nil {
		return m.IoWriteTime
	}
	return 0
}

func (m *BgpPerfNbr_) GetLastSentSeqNo() uint32 {
	if m != nil {
		return m.LastSentSeqNo
	}
	return 0
}

func (m *BgpPerfNbr_) GetWriteSubgroupCallsCount() uint32 {
	if m != nil {
		return m.WriteSubgroupCallsCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetWriteSubgroupMessagesCount() uint32 {
	if m != nil {
		return m.WriteSubgroupMessagesCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetSubgroupListTime() uint32 {
	if m != nil {
		return m.SubgroupListTime
	}
	return 0
}

func (m *BgpPerfNbr_) GetWriteQueueCallsCount() uint32 {
	if m != nil {
		return m.WriteQueueCallsCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetWriteQueueMessagesCount() uint32 {
	if m != nil {
		return m.WriteQueueMessagesCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetWriteQueueTime() uint32 {
	if m != nil {
		return m.WriteQueueTime
	}
	return 0
}

func (m *BgpPerfNbr_) GetInboundUpdateMessages() uint32 {
	if m != nil {
		return m.InboundUpdateMessages
	}
	return 0
}

func (m *BgpPerfNbr_) GetInboundUpdateMessagesTime() uint32 {
	if m != nil {
		return m.InboundUpdateMessagesTime
	}
	return 0
}

func (m *BgpPerfNbr_) GetMaximumReadSize() uint32 {
	if m != nil {
		return m.MaximumReadSize
	}
	return 0
}

func (m *BgpPerfNbr_) GetActives() uint32 {
	if m != nil {
		return m.Actives
	}
	return 0
}

func (m *BgpPerfNbr_) GetFailedPostActives() uint32 {
	if m != nil {
		return m.FailedPostActives
	}
	return 0
}

func (m *BgpPerfNbr_) GetPassives() uint32 {
	if m != nil {
		return m.Passives
	}
	return 0
}

func (m *BgpPerfNbr_) GetRejectedPassives() uint32 {
	if m != nil {
		return m.RejectedPassives
	}
	return 0
}

func (m *BgpPerfNbr_) GetActiveCollision() uint32 {
	if m != nil {
		return m.ActiveCollision
	}
	return 0
}

func (m *BgpPerfNbr_) GetPassiveCollision() uint32 {
	if m != nil {
		return m.PassiveCollision
	}
	return 0
}

func (m *BgpPerfNbr_) GetControlToReadThreadTrigger() uint32 {
	if m != nil {
		return m.ControlToReadThreadTrigger
	}
	return 0
}

func (m *BgpPerfNbr_) GetControlToWriteThreadTrigger() uint32 {
	if m != nil {
		return m.ControlToWriteThreadTrigger
	}
	return 0
}

func (m *BgpPerfNbr_) GetNetworkStatus() uint32 {
	if m != nil {
		return m.NetworkStatus
	}
	return 0
}

func (m *BgpPerfNbr_) GetResetFlags() uint32 {
	if m != nil {
		return m.ResetFlags
	}
	return 0
}

func (m *BgpPerfNbr_) GetNbrFlags() uint32 {
	if m != nil {
		return m.NbrFlags
	}
	return 0
}

func (m *BgpPerfNbr_) GetNbrFd() int32 {
	if m != nil {
		return m.NbrFd
	}
	return 0
}

func (m *BgpPerfNbr_) GetResetRetries() uint32 {
	if m != nil {
		return m.ResetRetries
	}
	return 0
}

func (m *BgpPerfNbr_) GetSyncFlags() uint32 {
	if m != nil {
		return m.SyncFlags
	}
	return 0
}

func (m *BgpPerfNbr_) GetNsrOperDownCount() uint32 {
	if m != nil {
		return m.NsrOperDownCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetLastNsrScopedSync() uint32 {
	if m != nil {
		return m.LastNsrScopedSync
	}
	return 0
}

type BgpNbrGshut_ struct {
	// Graceful Maintenance enabled
	GshutExists string `protobuf:"bytes,1,opt,name=gshut_exists,json=gshutExists" json:"gshut_exists,omitempty"`
	// Graceful Maintenance locally activated
	GshutLocalActive string `protobuf:"bytes,2,opt,name=gshut_local_active,json=gshutLocalActive" json:"gshut_local_active,omitempty"`
	// Graceful Maintenance activated
	GshutActive string `protobuf:"bytes,3,opt,name=gshut_active,json=gshutActive" json:"gshut_active,omitempty"`
	// Graceful Maintenance Local Preference set
	GshutLocprefSet string `protobuf:"bytes,4,opt,name=gshut_locpref_set,json=gshutLocprefSet" json:"gshut_locpref_set,omitempty"`
	// Graceful Maintenance Local Preference
	GshutLocpref uint32 `protobuf:"varint,5,opt,name=gshut_locpref,json=gshutLocpref" json:"gshut_locpref,omitempty"`
	// Graceful Maintenance number of AS prepends
	GshutPrepends uint32 `protobuf:"varint,6,opt,name=gshut_prepends,json=gshutPrepends" json:"gshut_prepends,omitempty"`
}

func (m *BgpNbrGshut_) Reset()                    { *m = BgpNbrGshut_{} }
func (m *BgpNbrGshut_) String() string            { return proto.CompactTextString(m) }
func (*BgpNbrGshut_) ProtoMessage()               {}
func (*BgpNbrGshut_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BgpNbrGshut_) GetGshutExists() string {
	if m != nil {
		return m.GshutExists
	}
	return ""
}

func (m *BgpNbrGshut_) GetGshutLocalActive() string {
	if m != nil {
		return m.GshutLocalActive
	}
	return ""
}

func (m *BgpNbrGshut_) GetGshutActive() string {
	if m != nil {
		return m.GshutActive
	}
	return ""
}

func (m *BgpNbrGshut_) GetGshutLocprefSet() string {
	if m != nil {
		return m.GshutLocprefSet
	}
	return ""
}

func (m *BgpNbrGshut_) GetGshutLocpref() uint32 {
	if m != nil {
		return m.GshutLocpref
	}
	return 0
}

func (m *BgpNbrGshut_) GetGshutPrepends() uint32 {
	if m != nil {
		return m.GshutPrepends
	}
	return 0
}

type BgpNbrAf_ struct {
	AfName                                        string         `protobuf:"bytes,1,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	IsNeighborRouteReflectorClient                string         `protobuf:"bytes,2,opt,name=is_neighbor_route_reflector_client,json=isNeighborRouteReflectorClient" json:"is_neighbor_route_reflector_client,omitempty"`
	IsLegacyPeRt                                  string         `protobuf:"bytes,3,opt,name=is_legacy_pe_rt,json=isLegacyPeRt" json:"is_legacy_pe_rt,omitempty"`
	IsNeighborAfCapable                           string         `protobuf:"bytes,4,opt,name=is_neighbor_af_capable,json=isNeighborAfCapable" json:"is_neighbor_af_capable,omitempty"`
	IsSoftReconfigurationInboundAllowed           string         `protobuf:"bytes,5,opt,name=is_soft_reconfiguration_inbound_allowed,json=isSoftReconfigurationInboundAllowed" json:"is_soft_reconfiguration_inbound_allowed,omitempty"`
	IsUseSoftReconfigurationAlwaysOn              string         `protobuf:"bytes,6,opt,name=is_use_soft_reconfiguration_always_on,json=isUseSoftReconfigurationAlwaysOn" json:"is_use_soft_reconfiguration_always_on,omitempty"`
	RemovePrivateAsFromUpdates                    string         `protobuf:"bytes,7,opt,name=remove_private_as_from_updates,json=removePrivateAsFromUpdates" json:"remove_private_as_from_updates,omitempty"`
	RemovePrivateAsEntireAspathFromUpdates        string         `protobuf:"bytes,8,opt,name=remove_private_as_entire_aspath_from_updates,json=removePrivateAsEntireAspathFromUpdates" json:"remove_private_as_entire_aspath_from_updates,omitempty"`
	RemovePrivateAsFromInboundUpdates             string         `protobuf:"bytes,9,opt,name=remove_private_as_from_inbound_updates,json=removePrivateAsFromInboundUpdates" json:"remove_private_as_from_inbound_updates,omitempty"`
	RemovePrivateAsEntireAspathFromInboundUpdates string         `protobuf:"bytes,10,opt,name=remove_private_as_entire_aspath_from_inbound_updates,json=removePrivateAsEntireAspathFromInboundUpdates" json:"remove_private_as_entire_aspath_from_inbound_updates,omitempty"`
	FlowspecValidationDIsable                     string         `protobuf:"bytes,11,opt,name=flowspec_validation_d_isable,json=flowspecValidationDIsable" json:"flowspec_validation_d_isable,omitempty"`
	FlowspecRedirectValidationDIsable             string         `protobuf:"bytes,12,opt,name=flowspec_redirect_validation_d_isable,json=flowspecRedirectValidationDIsable" json:"flowspec_redirect_validation_d_isable,omitempty"`
	OrrGroupName                                  string         `protobuf:"bytes,13,opt,name=orr_group_name,json=orrGroupName" json:"orr_group_name,omitempty"`
	OrrGroupIndex                                 uint32         `protobuf:"varint,14,opt,name=orr_group_index,json=orrGroupIndex" json:"orr_group_index,omitempty"`
	IsOrrRootAddressConfigured                    string         `protobuf:"bytes,15,opt,name=is_orr_root_address_configured,json=isOrrRootAddressConfigured" json:"is_orr_root_address_configured,omitempty"`
	AdvertiseAfi                                  string         `protobuf:"bytes,16,opt,name=advertise_afi,json=advertiseAfi" json:"advertise_afi,omitempty"`
	AdvertiseAfiReorg                             string         `protobuf:"bytes,17,opt,name=advertise_afi_reorg,json=advertiseAfiReorg" json:"advertise_afi_reorg,omitempty"`
	AdvertiseAfiDisable                           string         `protobuf:"bytes,18,opt,name=advertise_afi_disable,json=advertiseAfiDisable" json:"advertise_afi_disable,omitempty"`
	EncapsulationType                             uint32         `protobuf:"varint,19,opt,name=encapsulation_type,json=encapsulationType" json:"encapsulation_type,omitempty"`
	AdvertiseRtType                               uint32         `protobuf:"varint,20,opt,name=advertise_rt_type,json=advertiseRtType" json:"advertise_rt_type,omitempty"`
	AdvertiseAfiDefVrfImpDisable                  string         `protobuf:"bytes,21,opt,name=advertise_afi_def_vrf_imp_disable,json=advertiseAfiDefVrfImpDisable" json:"advertise_afi_def_vrf_imp_disable,omitempty"`
	AdvertiseEvpNv4AfiDefVrfImpDisable            string         `protobuf:"bytes,22,opt,name=advertise_evp_nv4_afi_def_vrf_imp_disable,json=advertiseEvpNv4AfiDefVrfImpDisable" json:"advertise_evp_nv4_afi_def_vrf_imp_disable,omitempty"`
	AdvertiseEvpNv6AfiDefVrfImpDisable            string         `protobuf:"bytes,23,opt,name=advertise_evp_nv6_afi_def_vrf_imp_disable,json=advertiseEvpNv6AfiDefVrfImpDisable" json:"advertise_evp_nv6_afi_def_vrf_imp_disable,omitempty"`
	AdvertiseAfiEoRReady                          string         `protobuf:"bytes,24,opt,name=advertise_afi_eo_r_ready,json=advertiseAfiEoRReady" json:"advertise_afi_eo_r_ready,omitempty"`
	AlwaysUseNextHopLocal                         string         `protobuf:"bytes,25,opt,name=always_use_next_hop_local,json=alwaysUseNextHopLocal" json:"always_use_next_hop_local,omitempty"`
	SentCommunityToNeighbor                       string         `protobuf:"bytes,26,opt,name=sent_community_to_neighbor,json=sentCommunityToNeighbor" json:"sent_community_to_neighbor,omitempty"`
	SentGshutCommunityToNeighbor                  string         `protobuf:"bytes,27,opt,name=sent_gshut_community_to_neighbor,json=sentGshutCommunityToNeighbor" json:"sent_gshut_community_to_neighbor,omitempty"`
	SentExtendedCommunityToNeighbor               string         `protobuf:"bytes,28,opt,name=sent_extended_community_to_neighbor,json=sentExtendedCommunityToNeighbor" json:"sent_extended_community_to_neighbor,omitempty"`
	NeighborDefaultOriginate                      string         `protobuf:"bytes,29,opt,name=neighbor_default_originate,json=neighborDefaultOriginate" json:"neighbor_default_originate,omitempty"`
	IsOrfSent                                     string         `protobuf:"bytes,30,opt,name=is_orf_sent,json=isOrfSent" json:"is_orf_sent,omitempty"`
	IsUpdateDeferred                              string         `protobuf:"bytes,31,opt,name=is_update_deferred,json=isUpdateDeferred" json:"is_update_deferred,omitempty"`
	IsOrfSendScheduled                            string         `protobuf:"bytes,32,opt,name=is_orf_send_scheduled,json=isOrfSendScheduled" json:"is_orf_send_scheduled,omitempty"`
	UpdateGroupNumber                             uint32         `protobuf:"varint,33,opt,name=update_group_number,json=updateGroupNumber" json:"update_group_number,omitempty"`
	FilterGroupIndex                              uint32         `protobuf:"varint,34,opt,name=filter_group_index,json=filterGroupIndex" json:"filter_group_index,omitempty"`
	IsUpdateThrottled                             string         `protobuf:"bytes,35,opt,name=is_update_throttled,json=isUpdateThrottled" json:"is_update_throttled,omitempty"`
	IsUpdateLeaving                               string         `protobuf:"bytes,36,opt,name=is_update_leaving,json=isUpdateLeaving" json:"is_update_leaving,omitempty"`
	VpnUpdateGenEnabled                           string         `protobuf:"bytes,37,opt,name=vpn_update_gen_enabled,json=vpnUpdateGenEnabled" json:"vpn_update_gen_enabled,omitempty"`
	VpnUpdateGenTriggerEnabled                    string         `protobuf:"bytes,38,opt,name=vpn_update_gen_trigger_enabled,json=vpnUpdateGenTriggerEnabled" json:"vpn_update_gen_trigger_enabled,omitempty"`
	IsAddpathSendOperational                      string         `protobuf:"bytes,39,opt,name=is_addpath_send_operational,json=isAddpathSendOperational" json:"is_addpath_send_operational,omitempty"`
	IsAddpathReceiveOperational                   string         `protobuf:"bytes,40,opt,name=is_addpath_receive_operational,json=isAddpathReceiveOperational" json:"is_addpath_receive_operational,omitempty"`
	NeighborVersion                               uint32         `protobuf:"varint,41,opt,name=neighbor_version,json=neighborVersion" json:"neighbor_version,omitempty"`
	Weight                                        uint32         `protobuf:"varint,42,opt,name=weight" json:"weight,omitempty"`
	MaxPrefixLimit                                uint32         `protobuf:"varint,43,opt,name=max_prefix_limit,json=maxPrefixLimit" json:"max_prefix_limit,omitempty"`
	UseMaxPrefixWarningOnly                       string         `protobuf:"bytes,44,opt,name=use_max_prefix_warning_only,json=useMaxPrefixWarningOnly" json:"use_max_prefix_warning_only,omitempty"`
	MaxPrefixDiscardExtraPaths                    string         `protobuf:"bytes,45,opt,name=max_prefix_discard_extra_paths,json=maxPrefixDiscardExtraPaths" json:"max_prefix_discard_extra_paths,omitempty"`
	MaxPrefixExceedDiscardPaths                   string         `protobuf:"bytes,46,opt,name=max_prefix_exceed_discard_paths,json=maxPrefixExceedDiscardPaths" json:"max_prefix_exceed_discard_paths,omitempty"`
	MaxPrefixThresholdPercent                     uint32         `protobuf:"varint,47,opt,name=max_prefix_threshold_percent,json=maxPrefixThresholdPercent" json:"max_prefix_threshold_percent,omitempty"`
	MaxPrefixRestartTime                          uint32         `protobuf:"varint,48,opt,name=max_prefix_restart_time,json=maxPrefixRestartTime" json:"max_prefix_restart_time,omitempty"`
	PrefixesAccepted                              uint32         `protobuf:"varint,49,opt,name=prefixes_accepted,json=prefixesAccepted" json:"prefixes_accepted,omitempty"`
	PrefixesSynced                                uint32         `protobuf:"varint,50,opt,name=prefixes_synced,json=prefixesSynced" json:"prefixes_synced,omitempty"`
	PrefixesWithdrawnNotFound                     uint32         `protobuf:"varint,51,opt,name=prefixes_withdrawn_not_found,json=prefixesWithdrawnNotFound" json:"prefixes_withdrawn_not_found,omitempty"`
	PrefixesDenied                                uint32         `protobuf:"varint,52,opt,name=prefixes_denied,json=prefixesDenied" json:"prefixes_denied,omitempty"`
	PrefixesDeniedNoPolicy                        uint32         `protobuf:"varint,53,opt,name=prefixes_denied_no_policy,json=prefixesDeniedNoPolicy" json:"prefixes_denied_no_policy,omitempty"`
	PrefixesDeniedRtPermit                        uint32         `protobuf:"varint,54,opt,name=prefixes_denied_rt_permit,json=prefixesDeniedRtPermit" json:"prefixes_denied_rt_permit,omitempty"`
	PrefixesDeniedOrfPolicy                       uint32         `protobuf:"varint,55,opt,name=prefixes_denied_orf_policy,json=prefixesDeniedOrfPolicy" json:"prefixes_denied_orf_policy,omitempty"`
	PrefixesDeniedPolicy                          uint32         `protobuf:"varint,56,opt,name=prefixes_denied_policy,json=prefixesDeniedPolicy" json:"prefixes_denied_policy,omitempty"`
	NumberOfBestpaths                             uint32         `protobuf:"varint,57,opt,name=number_of_bestpaths,json=numberOfBestpaths" json:"number_of_bestpaths,omitempty"`
	NumberOfBestExternalpaths                     uint32         `protobuf:"varint,58,opt,name=number_of_best_externalpaths,json=numberOfBestExternalpaths" json:"number_of_best_externalpaths,omitempty"`
	PrefixesAdvertised                            uint32         `protobuf:"varint,59,opt,name=prefixes_advertised,json=prefixesAdvertised" json:"prefixes_advertised,omitempty"`
	PrefixesBeAdvertised                          uint32         `protobuf:"varint,60,opt,name=prefixes_be_advertised,json=prefixesBeAdvertised" json:"prefixes_be_advertised,omitempty"`
	PrefixesSuppressed                            uint32         `protobuf:"varint,61,opt,name=prefixes_suppressed,json=prefixesSuppressed" json:"prefixes_suppressed,omitempty"`
	PrefixesWithdrawn                             uint32         `protobuf:"varint,62,opt,name=prefixes_withdrawn,json=prefixesWithdrawn" json:"prefixes_withdrawn,omitempty"`
	IsPeerOrfCapable                              string         `protobuf:"bytes,63,opt,name=is_peer_orf_capable,json=isPeerOrfCapable" json:"is_peer_orf_capable,omitempty"`
	IsAdvertisedOrfSend                           string         `protobuf:"bytes,64,opt,name=is_advertised_orf_send,json=isAdvertisedOrfSend" json:"is_advertised_orf_send,omitempty"`
	IsReceivedOrfSendCapable                      string         `protobuf:"bytes,65,opt,name=is_received_orf_send_capable,json=isReceivedOrfSendCapable" json:"is_received_orf_send_capable,omitempty"`
	IsAdvertisedOrfReceive                        string         `protobuf:"bytes,66,opt,name=is_advertised_orf_receive,json=isAdvertisedOrfReceive" json:"is_advertised_orf_receive,omitempty"`
	IsReceivedOrfReceiveCapable                   string         `protobuf:"bytes,67,opt,name=is_received_orf_receive_capable,json=isReceivedOrfReceiveCapable" json:"is_received_orf_receive_capable,omitempty"`
	IsAdvertisedGracefulRestart                   string         `protobuf:"bytes,68,opt,name=is_advertised_graceful_restart,json=isAdvertisedGracefulRestart" json:"is_advertised_graceful_restart,omitempty"`
	IsGracefulRestartStateFlag                    string         `protobuf:"bytes,69,opt,name=is_graceful_restart_state_flag,json=isGracefulRestartStateFlag" json:"is_graceful_restart_state_flag,omitempty"`
	IsReceivedGracefulRestartCapable              string         `protobuf:"bytes,70,opt,name=is_received_graceful_restart_capable,json=isReceivedGracefulRestartCapable" json:"is_received_graceful_restart_capable,omitempty"`
	IsAddPathSendCapabilityAdvertised             string         `protobuf:"bytes,71,opt,name=is_add_path_send_capability_advertised,json=isAddPathSendCapabilityAdvertised" json:"is_add_path_send_capability_advertised,omitempty"`
	IsAddPathSendCapabilityReceived               string         `protobuf:"bytes,72,opt,name=is_add_path_send_capability_received,json=isAddPathSendCapabilityReceived" json:"is_add_path_send_capability_received,omitempty"`
	IsAddPathReceiveCapabilityAdvertised          string         `protobuf:"bytes,73,opt,name=is_add_path_receive_capability_advertised,json=isAddPathReceiveCapabilityAdvertised" json:"is_add_path_receive_capability_advertised,omitempty"`
	IsAddPathReceiveCapabilityReceived            string         `protobuf:"bytes,74,opt,name=is_add_path_receive_capability_received,json=isAddPathReceiveCapabilityReceived" json:"is_add_path_receive_capability_received,omitempty"`
	RestartTime                                   uint32         `protobuf:"varint,75,opt,name=restart_time,json=restartTime" json:"restart_time,omitempty"`
	LocalRestartTime                              uint32         `protobuf:"varint,76,opt,name=local_restart_time,json=localRestartTime" json:"local_restart_time,omitempty"`
	StalePathTimeout                              uint32         `protobuf:"varint,77,opt,name=stale_path_timeout,json=stalePathTimeout" json:"stale_path_timeout,omitempty"`
	RibPurgeTimeoutValue                          uint32         `protobuf:"varint,78,opt,name=rib_purge_timeout_value,json=ribPurgeTimeoutValue" json:"rib_purge_timeout_value,omitempty"`
	NeighborPreservedForwardingState              string         `protobuf:"bytes,79,opt,name=neighbor_preserved_forwarding_state,json=neighborPreservedForwardingState" json:"neighbor_preserved_forwarding_state,omitempty"`
	LongLivedGracefulRestartStaleTimeConfigured   string         `protobuf:"bytes,80,opt,name=long_lived_graceful_restart_stale_time_configured,json=longLivedGracefulRestartStaleTimeConfigured" json:"long_lived_graceful_restart_stale_time_configured,omitempty"`
	LongLivedGracefulRestartStaleTimeSent         uint32         `protobuf:"varint,81,opt,name=long_lived_graceful_restart_stale_time_sent,json=longLivedGracefulRestartStaleTimeSent" json:"long_lived_graceful_restart_stale_time_sent,omitempty"`
	LongLivedGracefulRestartStaleTimeAccept       uint32         `protobuf:"varint,82,opt,name=long_lived_graceful_restart_stale_time_accept,json=longLivedGracefulRestartStaleTimeAccept" json:"long_lived_graceful_restart_stale_time_accept,omitempty"`
	LongLivedGracefulRestartCapabilityReceived    string         `protobuf:"bytes,83,opt,name=long_lived_graceful_restart_capability_received,json=longLivedGracefulRestartCapabilityReceived" json:"long_lived_graceful_restart_capability_received,omitempty"`
	LongLivedGracefulRestartStaleTimeReceived     uint32         `protobuf:"varint,84,opt,name=long_lived_graceful_restart_stale_time_received,json=longLivedGracefulRestartStaleTimeReceived" json:"long_lived_graceful_restart_stale_time_received,omitempty"`
	NeighborPreservedLongLivedForwardingState     string         `protobuf:"bytes,85,opt,name=neighbor_preserved_long_lived_forwarding_state,json=neighborPreservedLongLivedForwardingState" json:"neighbor_preserved_long_lived_forwarding_state,omitempty"`
	NeighborLongLivedGracefulRestartCapable       string         `protobuf:"bytes,86,opt,name=neighbor_long_lived_graceful_restart_capable,json=neighborLongLivedGracefulRestartCapable" json:"neighbor_long_lived_graceful_restart_capable,omitempty"`
	NeighborLongLivedGracefulRestartTimeRemaining uint32         `protobuf:"varint,87,opt,name=neighbor_long_lived_graceful_restart_time_remaining,json=neighborLongLivedGracefulRestartTimeRemaining" json:"neighbor_long_lived_graceful_restart_time_remaining,omitempty"`
	RouteRefreshesReceived                        uint32         `protobuf:"varint,88,opt,name=route_refreshes_received,json=routeRefreshesReceived" json:"route_refreshes_received,omitempty"`
	RouteRefreshesSent                            uint32         `protobuf:"varint,89,opt,name=route_refreshes_sent,json=routeRefreshesSent" json:"route_refreshes_sent,omitempty"`
	RefreshTargetVersion                          uint32         `protobuf:"varint,90,opt,name=refresh_target_version,json=refreshTargetVersion" json:"refresh_target_version,omitempty"`
	RefreshVersion                                uint32         `protobuf:"varint,91,opt,name=refresh_version,json=refreshVersion" json:"refresh_version,omitempty"`
	RefreshAckedVersion                           uint32         `protobuf:"varint,92,opt,name=refresh_acked_version,json=refreshAckedVersion" json:"refresh_acked_version,omitempty"`
	IsPrefixOrfPresent                            string         `protobuf:"bytes,93,opt,name=is_prefix_orf_present,json=isPrefixOrfPresent" json:"is_prefix_orf_present,omitempty"`
	OrfEntriesReceived                            uint32         `protobuf:"varint,94,opt,name=orf_entries_received,json=orfEntriesReceived" json:"orf_entries_received,omitempty"`
	IsDefaultOriginateSent                        string         `protobuf:"bytes,95,opt,name=is_default_originate_sent,json=isDefaultOriginateSent" json:"is_default_originate_sent,omitempty"`
	RoutePolicyPrefixOrf                          string         `protobuf:"bytes,96,opt,name=route_policy_prefix_orf,json=routePolicyPrefixOrf" json:"route_policy_prefix_orf,omitempty"`
	RoutePolicyIn                                 string         `protobuf:"bytes,97,opt,name=route_policy_in,json=routePolicyIn" json:"route_policy_in,omitempty"`
	RoutePolicyOut                                string         `protobuf:"bytes,98,opt,name=route_policy_out,json=routePolicyOut" json:"route_policy_out,omitempty"`
	RoutePolicyDefaultOriginate                   string         `protobuf:"bytes,99,opt,name=route_policy_default_originate,json=routePolicyDefaultOriginate" json:"route_policy_default_originate,omitempty"`
	IsNeighborEbgpWithoutInboundPolicy            string         `protobuf:"bytes,100,opt,name=is_neighbor_ebgp_without_inbound_policy,json=isNeighborEbgpWithoutInboundPolicy" json:"is_neighbor_ebgp_without_inbound_policy,omitempty"`
	IsNeighborEbgpWithoutOutboundPolicy           string         `protobuf:"bytes,101,opt,name=is_neighbor_ebgp_without_outbound_policy,json=isNeighborEbgpWithoutOutboundPolicy" json:"is_neighbor_ebgp_without_outbound_policy,omitempty"`
	IsAsOverrideSet                               string         `protobuf:"bytes,102,opt,name=is_as_override_set,json=isAsOverrideSet" json:"is_as_override_set,omitempty"`
	IsAllowAsInSet                                string         `protobuf:"bytes,103,opt,name=is_allow_as_in_set,json=isAllowAsInSet" json:"is_allow_as_in_set,omitempty"`
	AllowAsInCount                                uint32         `protobuf:"varint,104,opt,name=allow_as_in_count,json=allowAsInCount" json:"allow_as_in_count,omitempty"`
	AddressFamilyLongLivedTime                    uint32         `protobuf:"varint,105,opt,name=address_family_long_lived_time,json=addressFamilyLongLivedTime" json:"address_family_long_lived_time,omitempty"`
	EoRReceivedInReadOnly                         string         `protobuf:"bytes,106,opt,name=eo_r_received_in_read_only,json=eoRReceivedInReadOnly" json:"eo_r_received_in_read_only,omitempty"`
	AckedVersion                                  uint32         `protobuf:"varint,107,opt,name=acked_version,json=ackedVersion" json:"acked_version,omitempty"`
	SyncedAckedVersion                            uint32         `protobuf:"varint,108,opt,name=synced_acked_version,json=syncedAckedVersion" json:"synced_acked_version,omitempty"`
	OutstandingVersion                            uint32         `protobuf:"varint,109,opt,name=outstanding_version,json=outstandingVersion" json:"outstanding_version,omitempty"`
	OutstandingVersionMax                         uint32         `protobuf:"varint,110,opt,name=outstanding_version_max,json=outstandingVersionMax" json:"outstanding_version_max,omitempty"`
	NeighborAfPerformanceStatistics               *BgpPerfNbrAf_ `protobuf:"bytes,111,opt,name=neighbor_af_performance_statistics,json=neighborAfPerformanceStatistics" json:"neighbor_af_performance_statistics,omitempty"`
	IsAigpSet                                     string         `protobuf:"bytes,112,opt,name=is_aigp_set,json=isAigpSet" json:"is_aigp_set,omitempty"`
	IsRtPresent                                   string         `protobuf:"bytes,113,opt,name=is_rt_present,json=isRtPresent" json:"is_rt_present,omitempty"`
	ExtendedCommunity                             []uint32       `protobuf:"varint,114,rep,packed,name=extended_community,json=extendedCommunity" json:"extended_community,omitempty"`
	IsRtPresentStandby                            string         `protobuf:"bytes,115,opt,name=is_rt_present_standby,json=isRtPresentStandby" json:"is_rt_present_standby,omitempty"`
	ExtendedCommunityStandby                      []uint32       `protobuf:"varint,116,rep,packed,name=extended_community_standby,json=extendedCommunityStandby" json:"extended_community_standby,omitempty"`
	AcceptOwnEnabled                              string         `protobuf:"bytes,117,opt,name=accept_own_enabled,json=acceptOwnEnabled" json:"accept_own_enabled,omitempty"`
	SelectiveMultipathEligible                    string         `protobuf:"bytes,118,opt,name=selective_multipath_eligible,json=selectiveMultipathEligible" json:"selective_multipath_eligible,omitempty"`
	AfrpkiDisable                                 string         `protobuf:"bytes,119,opt,name=afrpki_disable,json=afrpkiDisable" json:"afrpki_disable,omitempty"`
	AfrpkiUseValidity                             string         `protobuf:"bytes,120,opt,name=afrpki_use_validity,json=afrpkiUseValidity" json:"afrpki_use_validity,omitempty"`
	AfrpkiAllowInvalid                            string         `protobuf:"bytes,121,opt,name=afrpki_allow_invalid,json=afrpkiAllowInvalid" json:"afrpki_allow_invalid,omitempty"`
	AfrpkiSignalIbgp                              string         `protobuf:"bytes,122,opt,name=afrpki_signal_ibgp,json=afrpkiSignalIbgp" json:"afrpki_signal_ibgp,omitempty"`
	IsAdvertisePermanentNetwork                   string         `protobuf:"bytes,123,opt,name=is_advertise_permanent_network,json=isAdvertisePermanentNetwork" json:"is_advertise_permanent_network,omitempty"`
	IsSendMcastAttr                               string         `protobuf:"bytes,124,opt,name=is_send_mcast_attr,json=isSendMcastAttr" json:"is_send_mcast_attr,omitempty"`
	ImportStitching                               string         `protobuf:"bytes,125,opt,name=import_stitching,json=importStitching" json:"import_stitching,omitempty"`
	ImportReoriginate                             string         `protobuf:"bytes,126,opt,name=import_reoriginate,json=importReoriginate" json:"import_reoriginate,omitempty"`
	ImportReoriginateStitching                    string         `protobuf:"bytes,127,opt,name=import_reoriginate_stitching,json=importReoriginateStitching" json:"import_reoriginate_stitching,omitempty"`
	AdvertiseV4Flags                              uint32         `protobuf:"varint,128,opt,name=advertise_v4_flags,json=advertiseV4Flags" json:"advertise_v4_flags,omitempty"`
	AdvertiseV6Flags                              uint32         `protobuf:"varint,129,opt,name=advertise_v6_flags,json=advertiseV6Flags" json:"advertise_v6_flags,omitempty"`
	AdvertiseLocalLabeledRouteUnicast             string         `protobuf:"bytes,130,opt,name=advertise_local_labeled_route_unicast,json=advertiseLocalLabeledRouteUnicast" json:"advertise_local_labeled_route_unicast,omitempty"`
}

func (m *BgpNbrAf_) Reset()                    { *m = BgpNbrAf_{} }
func (m *BgpNbrAf_) String() string            { return proto.CompactTextString(m) }
func (*BgpNbrAf_) ProtoMessage()               {}
func (*BgpNbrAf_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BgpNbrAf_) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpNbrAf_) GetIsNeighborRouteReflectorClient() string {
	if m != nil {
		return m.IsNeighborRouteReflectorClient
	}
	return ""
}

func (m *BgpNbrAf_) GetIsLegacyPeRt() string {
	if m != nil {
		return m.IsLegacyPeRt
	}
	return ""
}

func (m *BgpNbrAf_) GetIsNeighborAfCapable() string {
	if m != nil {
		return m.IsNeighborAfCapable
	}
	return ""
}

func (m *BgpNbrAf_) GetIsSoftReconfigurationInboundAllowed() string {
	if m != nil {
		return m.IsSoftReconfigurationInboundAllowed
	}
	return ""
}

func (m *BgpNbrAf_) GetIsUseSoftReconfigurationAlwaysOn() string {
	if m != nil {
		return m.IsUseSoftReconfigurationAlwaysOn
	}
	return ""
}

func (m *BgpNbrAf_) GetRemovePrivateAsFromUpdates() string {
	if m != nil {
		return m.RemovePrivateAsFromUpdates
	}
	return ""
}

func (m *BgpNbrAf_) GetRemovePrivateAsEntireAspathFromUpdates() string {
	if m != nil {
		return m.RemovePrivateAsEntireAspathFromUpdates
	}
	return ""
}

func (m *BgpNbrAf_) GetRemovePrivateAsFromInboundUpdates() string {
	if m != nil {
		return m.RemovePrivateAsFromInboundUpdates
	}
	return ""
}

func (m *BgpNbrAf_) GetRemovePrivateAsEntireAspathFromInboundUpdates() string {
	if m != nil {
		return m.RemovePrivateAsEntireAspathFromInboundUpdates
	}
	return ""
}

func (m *BgpNbrAf_) GetFlowspecValidationDIsable() string {
	if m != nil {
		return m.FlowspecValidationDIsable
	}
	return ""
}

func (m *BgpNbrAf_) GetFlowspecRedirectValidationDIsable() string {
	if m != nil {
		return m.FlowspecRedirectValidationDIsable
	}
	return ""
}

func (m *BgpNbrAf_) GetOrrGroupName() string {
	if m != nil {
		return m.OrrGroupName
	}
	return ""
}

func (m *BgpNbrAf_) GetOrrGroupIndex() uint32 {
	if m != nil {
		return m.OrrGroupIndex
	}
	return 0
}

func (m *BgpNbrAf_) GetIsOrrRootAddressConfigured() string {
	if m != nil {
		return m.IsOrrRootAddressConfigured
	}
	return ""
}

func (m *BgpNbrAf_) GetAdvertiseAfi() string {
	if m != nil {
		return m.AdvertiseAfi
	}
	return ""
}

func (m *BgpNbrAf_) GetAdvertiseAfiReorg() string {
	if m != nil {
		return m.AdvertiseAfiReorg
	}
	return ""
}

func (m *BgpNbrAf_) GetAdvertiseAfiDisable() string {
	if m != nil {
		return m.AdvertiseAfiDisable
	}
	return ""
}

func (m *BgpNbrAf_) GetEncapsulationType() uint32 {
	if m != nil {
		return m.EncapsulationType
	}
	return 0
}

func (m *BgpNbrAf_) GetAdvertiseRtType() uint32 {
	if m != nil {
		return m.AdvertiseRtType
	}
	return 0
}

func (m *BgpNbrAf_) GetAdvertiseAfiDefVrfImpDisable() string {
	if m != nil {
		return m.AdvertiseAfiDefVrfImpDisable
	}
	return ""
}

func (m *BgpNbrAf_) GetAdvertiseEvpNv4AfiDefVrfImpDisable() string {
	if m != nil {
		return m.AdvertiseEvpNv4AfiDefVrfImpDisable
	}
	return ""
}

func (m *BgpNbrAf_) GetAdvertiseEvpNv6AfiDefVrfImpDisable() string {
	if m != nil {
		return m.AdvertiseEvpNv6AfiDefVrfImpDisable
	}
	return ""
}

func (m *BgpNbrAf_) GetAdvertiseAfiEoRReady() string {
	if m != nil {
		return m.AdvertiseAfiEoRReady
	}
	return ""
}

func (m *BgpNbrAf_) GetAlwaysUseNextHopLocal() string {
	if m != nil {
		return m.AlwaysUseNextHopLocal
	}
	return ""
}

func (m *BgpNbrAf_) GetSentCommunityToNeighbor() string {
	if m != nil {
		return m.SentCommunityToNeighbor
	}
	return ""
}

func (m *BgpNbrAf_) GetSentGshutCommunityToNeighbor() string {
	if m != nil {
		return m.SentGshutCommunityToNeighbor
	}
	return ""
}

func (m *BgpNbrAf_) GetSentExtendedCommunityToNeighbor() string {
	if m != nil {
		return m.SentExtendedCommunityToNeighbor
	}
	return ""
}

func (m *BgpNbrAf_) GetNeighborDefaultOriginate() string {
	if m != nil {
		return m.NeighborDefaultOriginate
	}
	return ""
}

func (m *BgpNbrAf_) GetIsOrfSent() string {
	if m != nil {
		return m.IsOrfSent
	}
	return ""
}

func (m *BgpNbrAf_) GetIsUpdateDeferred() string {
	if m != nil {
		return m.IsUpdateDeferred
	}
	return ""
}

func (m *BgpNbrAf_) GetIsOrfSendScheduled() string {
	if m != nil {
		return m.IsOrfSendScheduled
	}
	return ""
}

func (m *BgpNbrAf_) GetUpdateGroupNumber() uint32 {
	if m != nil {
		return m.UpdateGroupNumber
	}
	return 0
}

func (m *BgpNbrAf_) GetFilterGroupIndex() uint32 {
	if m != nil {
		return m.FilterGroupIndex
	}
	return 0
}

func (m *BgpNbrAf_) GetIsUpdateThrottled() string {
	if m != nil {
		return m.IsUpdateThrottled
	}
	return ""
}

func (m *BgpNbrAf_) GetIsUpdateLeaving() string {
	if m != nil {
		return m.IsUpdateLeaving
	}
	return ""
}

func (m *BgpNbrAf_) GetVpnUpdateGenEnabled() string {
	if m != nil {
		return m.VpnUpdateGenEnabled
	}
	return ""
}

func (m *BgpNbrAf_) GetVpnUpdateGenTriggerEnabled() string {
	if m != nil {
		return m.VpnUpdateGenTriggerEnabled
	}
	return ""
}

func (m *BgpNbrAf_) GetIsAddpathSendOperational() string {
	if m != nil {
		return m.IsAddpathSendOperational
	}
	return ""
}

func (m *BgpNbrAf_) GetIsAddpathReceiveOperational() string {
	if m != nil {
		return m.IsAddpathReceiveOperational
	}
	return ""
}

func (m *BgpNbrAf_) GetNeighborVersion() uint32 {
	if m != nil {
		return m.NeighborVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *BgpNbrAf_) GetMaxPrefixLimit() uint32 {
	if m != nil {
		return m.MaxPrefixLimit
	}
	return 0
}

func (m *BgpNbrAf_) GetUseMaxPrefixWarningOnly() string {
	if m != nil {
		return m.UseMaxPrefixWarningOnly
	}
	return ""
}

func (m *BgpNbrAf_) GetMaxPrefixDiscardExtraPaths() string {
	if m != nil {
		return m.MaxPrefixDiscardExtraPaths
	}
	return ""
}

func (m *BgpNbrAf_) GetMaxPrefixExceedDiscardPaths() string {
	if m != nil {
		return m.MaxPrefixExceedDiscardPaths
	}
	return ""
}

func (m *BgpNbrAf_) GetMaxPrefixThresholdPercent() uint32 {
	if m != nil {
		return m.MaxPrefixThresholdPercent
	}
	return 0
}

func (m *BgpNbrAf_) GetMaxPrefixRestartTime() uint32 {
	if m != nil {
		return m.MaxPrefixRestartTime
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesAccepted() uint32 {
	if m != nil {
		return m.PrefixesAccepted
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesSynced() uint32 {
	if m != nil {
		return m.PrefixesSynced
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesWithdrawnNotFound() uint32 {
	if m != nil {
		return m.PrefixesWithdrawnNotFound
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesDenied() uint32 {
	if m != nil {
		return m.PrefixesDenied
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesDeniedNoPolicy() uint32 {
	if m != nil {
		return m.PrefixesDeniedNoPolicy
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesDeniedRtPermit() uint32 {
	if m != nil {
		return m.PrefixesDeniedRtPermit
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesDeniedOrfPolicy() uint32 {
	if m != nil {
		return m.PrefixesDeniedOrfPolicy
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesDeniedPolicy() uint32 {
	if m != nil {
		return m.PrefixesDeniedPolicy
	}
	return 0
}

func (m *BgpNbrAf_) GetNumberOfBestpaths() uint32 {
	if m != nil {
		return m.NumberOfBestpaths
	}
	return 0
}

func (m *BgpNbrAf_) GetNumberOfBestExternalpaths() uint32 {
	if m != nil {
		return m.NumberOfBestExternalpaths
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesAdvertised() uint32 {
	if m != nil {
		return m.PrefixesAdvertised
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesBeAdvertised() uint32 {
	if m != nil {
		return m.PrefixesBeAdvertised
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesSuppressed() uint32 {
	if m != nil {
		return m.PrefixesSuppressed
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesWithdrawn() uint32 {
	if m != nil {
		return m.PrefixesWithdrawn
	}
	return 0
}

func (m *BgpNbrAf_) GetIsPeerOrfCapable() string {
	if m != nil {
		return m.IsPeerOrfCapable
	}
	return ""
}

func (m *BgpNbrAf_) GetIsAdvertisedOrfSend() string {
	if m != nil {
		return m.IsAdvertisedOrfSend
	}
	return ""
}

func (m *BgpNbrAf_) GetIsReceivedOrfSendCapable() string {
	if m != nil {
		return m.IsReceivedOrfSendCapable
	}
	return ""
}

func (m *BgpNbrAf_) GetIsAdvertisedOrfReceive() string {
	if m != nil {
		return m.IsAdvertisedOrfReceive
	}
	return ""
}

func (m *BgpNbrAf_) GetIsReceivedOrfReceiveCapable() string {
	if m != nil {
		return m.IsReceivedOrfReceiveCapable
	}
	return ""
}

func (m *BgpNbrAf_) GetIsAdvertisedGracefulRestart() string {
	if m != nil {
		return m.IsAdvertisedGracefulRestart
	}
	return ""
}

func (m *BgpNbrAf_) GetIsGracefulRestartStateFlag() string {
	if m != nil {
		return m.IsGracefulRestartStateFlag
	}
	return ""
}

func (m *BgpNbrAf_) GetIsReceivedGracefulRestartCapable() string {
	if m != nil {
		return m.IsReceivedGracefulRestartCapable
	}
	return ""
}

func (m *BgpNbrAf_) GetIsAddPathSendCapabilityAdvertised() string {
	if m != nil {
		return m.IsAddPathSendCapabilityAdvertised
	}
	return ""
}

func (m *BgpNbrAf_) GetIsAddPathSendCapabilityReceived() string {
	if m != nil {
		return m.IsAddPathSendCapabilityReceived
	}
	return ""
}

func (m *BgpNbrAf_) GetIsAddPathReceiveCapabilityAdvertised() string {
	if m != nil {
		return m.IsAddPathReceiveCapabilityAdvertised
	}
	return ""
}

func (m *BgpNbrAf_) GetIsAddPathReceiveCapabilityReceived() string {
	if m != nil {
		return m.IsAddPathReceiveCapabilityReceived
	}
	return ""
}

func (m *BgpNbrAf_) GetRestartTime() uint32 {
	if m != nil {
		return m.RestartTime
	}
	return 0
}

func (m *BgpNbrAf_) GetLocalRestartTime() uint32 {
	if m != nil {
		return m.LocalRestartTime
	}
	return 0
}

func (m *BgpNbrAf_) GetStalePathTimeout() uint32 {
	if m != nil {
		return m.StalePathTimeout
	}
	return 0
}

func (m *BgpNbrAf_) GetRibPurgeTimeoutValue() uint32 {
	if m != nil {
		return m.RibPurgeTimeoutValue
	}
	return 0
}

func (m *BgpNbrAf_) GetNeighborPreservedForwardingState() string {
	if m != nil {
		return m.NeighborPreservedForwardingState
	}
	return ""
}

func (m *BgpNbrAf_) GetLongLivedGracefulRestartStaleTimeConfigured() string {
	if m != nil {
		return m.LongLivedGracefulRestartStaleTimeConfigured
	}
	return ""
}

func (m *BgpNbrAf_) GetLongLivedGracefulRestartStaleTimeSent() uint32 {
	if m != nil {
		return m.LongLivedGracefulRestartStaleTimeSent
	}
	return 0
}

func (m *BgpNbrAf_) GetLongLivedGracefulRestartStaleTimeAccept() uint32 {
	if m != nil {
		return m.LongLivedGracefulRestartStaleTimeAccept
	}
	return 0
}

func (m *BgpNbrAf_) GetLongLivedGracefulRestartCapabilityReceived() string {
	if m != nil {
		return m.LongLivedGracefulRestartCapabilityReceived
	}
	return ""
}

func (m *BgpNbrAf_) GetLongLivedGracefulRestartStaleTimeReceived() uint32 {
	if m != nil {
		return m.LongLivedGracefulRestartStaleTimeReceived
	}
	return 0
}

func (m *BgpNbrAf_) GetNeighborPreservedLongLivedForwardingState() string {
	if m != nil {
		return m.NeighborPreservedLongLivedForwardingState
	}
	return ""
}

func (m *BgpNbrAf_) GetNeighborLongLivedGracefulRestartCapable() string {
	if m != nil {
		return m.NeighborLongLivedGracefulRestartCapable
	}
	return ""
}

func (m *BgpNbrAf_) GetNeighborLongLivedGracefulRestartTimeRemaining() uint32 {
	if m != nil {
		return m.NeighborLongLivedGracefulRestartTimeRemaining
	}
	return 0
}

func (m *BgpNbrAf_) GetRouteRefreshesReceived() uint32 {
	if m != nil {
		return m.RouteRefreshesReceived
	}
	return 0
}

func (m *BgpNbrAf_) GetRouteRefreshesSent() uint32 {
	if m != nil {
		return m.RouteRefreshesSent
	}
	return 0
}

func (m *BgpNbrAf_) GetRefreshTargetVersion() uint32 {
	if m != nil {
		return m.RefreshTargetVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetRefreshVersion() uint32 {
	if m != nil {
		return m.RefreshVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetRefreshAckedVersion() uint32 {
	if m != nil {
		return m.RefreshAckedVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetIsPrefixOrfPresent() string {
	if m != nil {
		return m.IsPrefixOrfPresent
	}
	return ""
}

func (m *BgpNbrAf_) GetOrfEntriesReceived() uint32 {
	if m != nil {
		return m.OrfEntriesReceived
	}
	return 0
}

func (m *BgpNbrAf_) GetIsDefaultOriginateSent() string {
	if m != nil {
		return m.IsDefaultOriginateSent
	}
	return ""
}

func (m *BgpNbrAf_) GetRoutePolicyPrefixOrf() string {
	if m != nil {
		return m.RoutePolicyPrefixOrf
	}
	return ""
}

func (m *BgpNbrAf_) GetRoutePolicyIn() string {
	if m != nil {
		return m.RoutePolicyIn
	}
	return ""
}

func (m *BgpNbrAf_) GetRoutePolicyOut() string {
	if m != nil {
		return m.RoutePolicyOut
	}
	return ""
}

func (m *BgpNbrAf_) GetRoutePolicyDefaultOriginate() string {
	if m != nil {
		return m.RoutePolicyDefaultOriginate
	}
	return ""
}

func (m *BgpNbrAf_) GetIsNeighborEbgpWithoutInboundPolicy() string {
	if m != nil {
		return m.IsNeighborEbgpWithoutInboundPolicy
	}
	return ""
}

func (m *BgpNbrAf_) GetIsNeighborEbgpWithoutOutboundPolicy() string {
	if m != nil {
		return m.IsNeighborEbgpWithoutOutboundPolicy
	}
	return ""
}

func (m *BgpNbrAf_) GetIsAsOverrideSet() string {
	if m != nil {
		return m.IsAsOverrideSet
	}
	return ""
}

func (m *BgpNbrAf_) GetIsAllowAsInSet() string {
	if m != nil {
		return m.IsAllowAsInSet
	}
	return ""
}

func (m *BgpNbrAf_) GetAllowAsInCount() uint32 {
	if m != nil {
		return m.AllowAsInCount
	}
	return 0
}

func (m *BgpNbrAf_) GetAddressFamilyLongLivedTime() uint32 {
	if m != nil {
		return m.AddressFamilyLongLivedTime
	}
	return 0
}

func (m *BgpNbrAf_) GetEoRReceivedInReadOnly() string {
	if m != nil {
		return m.EoRReceivedInReadOnly
	}
	return ""
}

func (m *BgpNbrAf_) GetAckedVersion() uint32 {
	if m != nil {
		return m.AckedVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetSyncedAckedVersion() uint32 {
	if m != nil {
		return m.SyncedAckedVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetOutstandingVersion() uint32 {
	if m != nil {
		return m.OutstandingVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetOutstandingVersionMax() uint32 {
	if m != nil {
		return m.OutstandingVersionMax
	}
	return 0
}

func (m *BgpNbrAf_) GetNeighborAfPerformanceStatistics() *BgpPerfNbrAf_ {
	if m != nil {
		return m.NeighborAfPerformanceStatistics
	}
	return nil
}

func (m *BgpNbrAf_) GetIsAigpSet() string {
	if m != nil {
		return m.IsAigpSet
	}
	return ""
}

func (m *BgpNbrAf_) GetIsRtPresent() string {
	if m != nil {
		return m.IsRtPresent
	}
	return ""
}

func (m *BgpNbrAf_) GetExtendedCommunity() []uint32 {
	if m != nil {
		return m.ExtendedCommunity
	}
	return nil
}

func (m *BgpNbrAf_) GetIsRtPresentStandby() string {
	if m != nil {
		return m.IsRtPresentStandby
	}
	return ""
}

func (m *BgpNbrAf_) GetExtendedCommunityStandby() []uint32 {
	if m != nil {
		return m.ExtendedCommunityStandby
	}
	return nil
}

func (m *BgpNbrAf_) GetAcceptOwnEnabled() string {
	if m != nil {
		return m.AcceptOwnEnabled
	}
	return ""
}

func (m *BgpNbrAf_) GetSelectiveMultipathEligible() string {
	if m != nil {
		return m.SelectiveMultipathEligible
	}
	return ""
}

func (m *BgpNbrAf_) GetAfrpkiDisable() string {
	if m != nil {
		return m.AfrpkiDisable
	}
	return ""
}

func (m *BgpNbrAf_) GetAfrpkiUseValidity() string {
	if m != nil {
		return m.AfrpkiUseValidity
	}
	return ""
}

func (m *BgpNbrAf_) GetAfrpkiAllowInvalid() string {
	if m != nil {
		return m.AfrpkiAllowInvalid
	}
	return ""
}

func (m *BgpNbrAf_) GetAfrpkiSignalIbgp() string {
	if m != nil {
		return m.AfrpkiSignalIbgp
	}
	return ""
}

func (m *BgpNbrAf_) GetIsAdvertisePermanentNetwork() string {
	if m != nil {
		return m.IsAdvertisePermanentNetwork
	}
	return ""
}

func (m *BgpNbrAf_) GetIsSendMcastAttr() string {
	if m != nil {
		return m.IsSendMcastAttr
	}
	return ""
}

func (m *BgpNbrAf_) GetImportStitching() string {
	if m != nil {
		return m.ImportStitching
	}
	return ""
}

func (m *BgpNbrAf_) GetImportReoriginate() string {
	if m != nil {
		return m.ImportReoriginate
	}
	return ""
}

func (m *BgpNbrAf_) GetImportReoriginateStitching() string {
	if m != nil {
		return m.ImportReoriginateStitching
	}
	return ""
}

func (m *BgpNbrAf_) GetAdvertiseV4Flags() uint32 {
	if m != nil {
		return m.AdvertiseV4Flags
	}
	return 0
}

func (m *BgpNbrAf_) GetAdvertiseV6Flags() uint32 {
	if m != nil {
		return m.AdvertiseV6Flags
	}
	return 0
}

func (m *BgpNbrAf_) GetAdvertiseLocalLabeledRouteUnicast() string {
	if m != nil {
		return m.AdvertiseLocalLabeledRouteUnicast
	}
	return ""
}

type NbrAfP struct {
	Value *BgpNbrAf_ `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *NbrAfP) Reset()                    { *m = NbrAfP{} }
func (m *NbrAfP) String() string            { return proto.CompactTextString(m) }
func (*NbrAfP) ProtoMessage()               {}
func (*NbrAfP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *NbrAfP) GetValue() *BgpNbrAf_ {
	if m != nil {
		return m.Value
	}
	return nil
}

type BgpNotfntype_ struct {
	// Time since the last notification was sent or received (seconds)
	TimeSinceLastNotification uint32 `protobuf:"varint,1,opt,name=time_since_last_notification,json=timeSinceLastNotification" json:"time_since_last_notification,omitempty"`
	// Error code in last notification
	NotificationErrorCode uint32 `protobuf:"varint,2,opt,name=notification_error_code,json=notificationErrorCode" json:"notification_error_code,omitempty"`
	// Error subcode in last notification
	NotificationErrorSubcode uint32 `protobuf:"varint,3,opt,name=notification_error_subcode,json=notificationErrorSubcode" json:"notification_error_subcode,omitempty"`
	// Message data in last notification
	LastNotificationData []uint32 `protobuf:"varint,4,rep,packed,name=last_notification_data,json=lastNotificationData" json:"last_notification_data,omitempty"`
}

func (m *BgpNotfntype_) Reset()                    { *m = BgpNotfntype_{} }
func (m *BgpNotfntype_) String() string            { return proto.CompactTextString(m) }
func (*BgpNotfntype_) ProtoMessage()               {}
func (*BgpNotfntype_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *BgpNotfntype_) GetTimeSinceLastNotification() uint32 {
	if m != nil {
		return m.TimeSinceLastNotification
	}
	return 0
}

func (m *BgpNotfntype_) GetNotificationErrorCode() uint32 {
	if m != nil {
		return m.NotificationErrorCode
	}
	return 0
}

func (m *BgpNotfntype_) GetNotificationErrorSubcode() uint32 {
	if m != nil {
		return m.NotificationErrorSubcode
	}
	return 0
}

func (m *BgpNotfntype_) GetLastNotificationData() []uint32 {
	if m != nil {
		return m.LastNotificationData
	}
	return nil
}

type BgpNbrMsgStatsUnit struct {
	// Count
	Count uint32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	// Last timespec
	LastTimeSpec *BgpTimespec `protobuf:"bytes,2,opt,name=last_time_spec,json=lastTimeSpec" json:"last_time_spec,omitempty"`
}

func (m *BgpNbrMsgStatsUnit) Reset()                    { *m = BgpNbrMsgStatsUnit{} }
func (m *BgpNbrMsgStatsUnit) String() string            { return proto.CompactTextString(m) }
func (*BgpNbrMsgStatsUnit) ProtoMessage()               {}
func (*BgpNbrMsgStatsUnit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *BgpNbrMsgStatsUnit) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *BgpNbrMsgStatsUnit) GetLastTimeSpec() *BgpTimespec {
	if m != nil {
		return m.LastTimeSpec
	}
	return nil
}

type BgpNbrMsgStatsOp struct {
	// Transmit
	Tx *BgpNbrMsgStatsUnit `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	// Receive
	Rx *BgpNbrMsgStatsUnit `protobuf:"bytes,2,opt,name=rx" json:"rx,omitempty"`
}

func (m *BgpNbrMsgStatsOp) Reset()                    { *m = BgpNbrMsgStatsOp{} }
func (m *BgpNbrMsgStatsOp) String() string            { return proto.CompactTextString(m) }
func (*BgpNbrMsgStatsOp) ProtoMessage()               {}
func (*BgpNbrMsgStatsOp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *BgpNbrMsgStatsOp) GetTx() *BgpNbrMsgStatsUnit {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *BgpNbrMsgStatsOp) GetRx() *BgpNbrMsgStatsUnit {
	if m != nil {
		return m.Rx
	}
	return nil
}

type BgpNbrMsgStats struct {
	// Open
	Open *BgpNbrMsgStatsOp `protobuf:"bytes,1,opt,name=open" json:"open,omitempty"`
	// Notification
	Notification *BgpNbrMsgStatsOp `protobuf:"bytes,2,opt,name=notification" json:"notification,omitempty"`
	// Update
	Update *BgpNbrMsgStatsOp `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
	// Keepalive
	Keepalive *BgpNbrMsgStatsOp `protobuf:"bytes,4,opt,name=keepalive" json:"keepalive,omitempty"`
	// Route refresh
	RouteRefresh *BgpNbrMsgStatsOp `protobuf:"bytes,5,opt,name=route_refresh,json=routeRefresh" json:"route_refresh,omitempty"`
	// Total
	Total *BgpNbrMsgStatsOp `protobuf:"bytes,6,opt,name=total" json:"total,omitempty"`
}

func (m *BgpNbrMsgStats) Reset()                    { *m = BgpNbrMsgStats{} }
func (m *BgpNbrMsgStats) String() string            { return proto.CompactTextString(m) }
func (*BgpNbrMsgStats) ProtoMessage()               {}
func (*BgpNbrMsgStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *BgpNbrMsgStats) GetOpen() *BgpNbrMsgStatsOp {
	if m != nil {
		return m.Open
	}
	return nil
}

func (m *BgpNbrMsgStats) GetNotification() *BgpNbrMsgStatsOp {
	if m != nil {
		return m.Notification
	}
	return nil
}

func (m *BgpNbrMsgStats) GetUpdate() *BgpNbrMsgStatsOp {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *BgpNbrMsgStats) GetKeepalive() *BgpNbrMsgStatsOp {
	if m != nil {
		return m.Keepalive
	}
	return nil
}

func (m *BgpNbrMsgStats) GetRouteRefresh() *BgpNbrMsgStatsOp {
	if m != nil {
		return m.RouteRefresh
	}
	return nil
}

func (m *BgpNbrMsgStats) GetTotal() *BgpNbrMsgStatsOp {
	if m != nil {
		return m.Total
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpNbrBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.bgp_nbr_bag_KEYS")
	proto.RegisterType((*BgpNbrBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.bgp_nbr_bag")
	proto.RegisterType((*BgpTimespec)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.bgp_timespec")
	proto.RegisterType((*IPV4TunnelAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.IPV4TunnelAddressType")
	proto.RegisterType((*IPV4MDTAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.IPV4MDTAddressType")
	proto.RegisterType((*RTConstraintAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.RTConstraintAddressType")
	proto.RegisterType((*IPV6AddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.IPV6AddressType")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.bgp_l2vpn_addr_t")
	proto.RegisterType((*L2VPNEVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.L2VPNEVPNAddressType")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*IPV6MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.IPV6MVPNAddressType")
	proto.RegisterType((*IPV4MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.IPV4MVPNAddressType")
	proto.RegisterType((*LS_LSAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.LS_LSAddressType")
	proto.RegisterType((*IPv4FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.IPv4FlowspecAddressType")
	proto.RegisterType((*IPv6FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.IPv6FlowspecAddressType")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.bgp_addrtype")
	proto.RegisterType((*BgpPerfNbrAf_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.bgp_perf_nbr_af_")
	proto.RegisterType((*BgpPerfNbr_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.bgp_perf_nbr_")
	proto.RegisterType((*BgpNbrGshut_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.bgp_nbr_gshut_")
	proto.RegisterType((*BgpNbrAf_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.bgp_nbr_af_")
	proto.RegisterType((*NbrAfP)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.nbr_af_p")
	proto.RegisterType((*BgpNotfntype_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.bgp_notfntype_")
	proto.RegisterType((*BgpNbrMsgStatsUnit)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.bgp_nbr_msg_stats_unit")
	proto.RegisterType((*BgpNbrMsgStatsOp)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.bgp_nbr_msg_stats_op")
	proto.RegisterType((*BgpNbrMsgStats)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.neighbors.neighbor.bgp_nbr_msg_stats")
}

func init() { proto.RegisterFile("bgp_nbr_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 7872 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x7c, 0xe9, 0x77, 0x1c, 0x49,
	0x72, 0xdf, 0xeb, 0x39, 0x48, 0x22, 0x01, 0x10, 0x40, 0xe1, 0x2a, 0x80, 0x20, 0x09, 0x82, 0xc3,
	0xfb, 0x9a, 0xe1, 0x60, 0xb1, 0x33, 0xb3, 0x9c, 0x19, 0x35, 0x01, 0x90, 0x83, 0x1d, 0x5c, 0x53,
	0x0d, 0x72, 0xa4, 0x5d, 0xad, 0x4a, 0xd5, 0x55, 0xd9, 0x8d, 0x1c, 0x54, 0x57, 0xd5, 0x64, 0x66,
	0x37, 0xd0, 0xb4, 0x25, 0x59, 0x96, 0x6c, 0xcb, 0xb2, 0x2c, 0xcb, 0xf2, 0x5a, 0xb6, 0x35, 0xb6,
	0x0e, 0x4b, 0xab, 0x95, 0x64, 0x1d, 0x3e, 0x64, 0xcb, 0x87, 0x64, 0xf9, 0x5a, 0x1f, 0xff, 0x90,
	0x3f, 0xd9, 0xef, 0xf9, 0x65, 0x44, 0x66, 0x55, 0x56, 0x77, 0x63, 0x48, 0x7f, 0x18, 0xe2, 0x13,
	0xd0, 0x19, 0xbf, 0x88, 0x8c, 0xca, 0x23, 0x32, 0x32, 0x32, 0x23, 0xc9, 0x44, 0xbd, 0x99, 0xf9,
	0x49, 0x9d, 0xfb, 0xf5, 0xa0, 0x79, 0x37, 0xe3, 0xa9, 0x4c, 0x9d, 0x1f, 0x0f, 0x99, 0x08, 0x53,
	0x9f, 0xa5, 0xc2, 0x3f, 0xe2, 0x3e, 0xcb, 0x3a, 0xcb, 0xbe, 0x02, 0xa5, 0x19, 0xe5, 0x77, 0xeb,
	0xcd, 0xec, 0x2e, 0x4b, 0x84, 0x0c, 0x92, 0x90, 0x8a, 0xfc, 0xbf, 0xfc, 0x1f, 0x3f, 0x08, 0x25,
	0xeb, 0xd0, 0xbb, 0x11, 0x6d, 0x04, 0xed, 0x58, 0xfa, 0x1d, 0xde, 0xb8, 0x9b, 0x50, 0xd6, 0xdc,
	0xaf, 0xa7, 0x5c, 0xe4, 0xff, 0x2d, 0xd5, 0xc9, 0xb8, 0x55, 0xad, 0xff, 0xf1, 0xfa, 0x8f, 0xd4,
	0x9c, 0xcb, 0x64, 0x34, 0x97, 0x92, 0x04, 0x2d, 0xea, 0x56, 0x16, 0x2b, 0xd7, 0x87, 0xbc, 0x11,
	0x53, 0xb8, 0x1d, 0xb4, 0xa8, 0x73, 0x83, 0x8c, 0x1b, 0x21, 0x7e, 0x10, 0x45, 0x9c, 0x0a, 0xe1,
	0xbe, 0x02, 0xb8, 0x31, 0x53, 0x5e, 0xc5, 0xe2, 0xa5, 0x2f, 0x1e, 0x91, 0x61, 0xab, 0x12, 0xe7,
	0x3c, 0x21, 0x22, 0xa3, 0xc1, 0x01, 0xe5, 0x3e, 0x8b, 0xdc, 0xfb, 0x8b, 0x95, 0xeb, 0xa3, 0xde,
	0x90, 0x2e, 0xd9, 0x88, 0x9c, 0x45, 0x32, 0x1c, 0x51, 0x11, 0x72, 0x96, 0x49, 0x96, 0x26, 0xee,
	0xdb, 0x20, 0xd4, 0x2e, 0x72, 0xe6, 0xc8, 0x99, 0x38, 0x0d, 0x83, 0xd8, 0x0f, 0x84, 0xbb, 0x0c,
	0xec, 0xa7, 0xe1, 0x77, 0x55, 0x38, 0xe7, 0xc8, 0x10, 0xa7, 0xad, 0x54, 0x52, 0x45, 0xfb, 0x1a,
	0xd0, 0xce, 0x60, 0x41, 0x55, 0x38, 0x37, 0xc9, 0xc4, 0x7e, 0x20, 0x7c, 0x96, 0x48, 0xca, 0x93,
	0x20, 0xf6, 0x63, 0x96, 0x1c, 0xb8, 0x2b, 0xa8, 0xf4, 0x7e, 0x20, 0x36, 0x74, 0xf9, 0x26, 0x4b,
	0x0e, 0x9c, 0x6f, 0x93, 0x5b, 0x4c, 0xf8, 0xf4, 0x48, 0x43, 0xf3, 0x6f, 0x4d, 0x52, 0xe9, 0x47,
	0x8c, 0xd3, 0x50, 0xc6, 0x5d, 0x3f, 0x4c, 0x93, 0x84, 0x86, 0x92, 0x46, 0xee, 0xd7, 0x41, 0xca,
	0x55, 0x26, 0xd6, 0x35, 0xc7, 0xb6, 0x66, 0xd8, 0x4e, 0xe5, 0x9a, 0x86, 0xaf, 0x1a, 0xb4, 0x73,
	0x8b, 0x4c, 0xb4, 0xa8, 0x10, 0x41, 0x93, 0x0a, 0x9f, 0xd3, 0x90, 0xb2, 0x0e, 0x8d, 0xdc, 0x77,
	0x40, 0xdb, 0x71, 0x43, 0xf0, 0x74, 0xb9, 0xea, 0x8e, 0x1c, 0x2c, 0x68, 0x22, 0xdd, 0x77, 0x01,
	0x38, 0x62, 0x0a, 0x6b, 0x34, 0x91, 0xce, 0x6d, 0xe2, 0xb4, 0xb3, 0x28, 0x90, 0xd4, 0xcf, 0xb1,
	0x2c, 0x71, 0xdf, 0x43, 0x91, 0x48, 0xd9, 0xd2, 0x84, 0x8d, 0xc4, 0xb9, 0x4b, 0x26, 0x7b, 0xd1,
	0x69, 0x5b, 0xba, 0xdf, 0x00, 0xf8, 0x44, 0x19, 0xbe, 0xd3, 0x06, 0xe9, 0x39, 0xf0, 0xf3, 0x36,
	0x6d, 0xd3, 0x48, 0x49, 0x7f, 0x50, 0x56, 0xf8, 0x13, 0x20, 0xa0, 0xf4, 0x5e, 0xb4, 0x92, 0xfe,
	0x3e, 0x4a, 0x2f, 0xc3, 0x95, 0xf4, 0x0f, 0xc8, 0x39, 0xdd, 0x90, 0x2c, 0x4d, 0x7c, 0x2a, 0x64,
	0x50, 0x8f, 0x99, 0xd8, 0xa7, 0x91, 0x2f, 0x59, 0x8b, 0xba, 0x1f, 0x00, 0xdf, 0x5c, 0x01, 0x59,
	0x2f, 0x10, 0x7b, 0x0c, 0x87, 0xa2, 0xc5, 0x2f, 0x64, 0x20, 0xa9, 0xfb, 0x21, 0xf6, 0x6a, 0x51,
	0x5e, 0x53, 0xc5, 0xce, 0x7b, 0x64, 0x2e, 0xe3, 0xb4, 0xc3, 0xd2, 0xb6, 0xf0, 0xfb, 0x78, 0x7e,
	0x08, 0x2a, 0x9a, 0x35, 0x80, 0xd5, 0x1e, 0xde, 0x15, 0x32, 0x6b, 0xb1, 0x04, 0x51, 0x8b, 0x21,
	0x63, 0x5b, 0xb8, 0x55, 0xe0, 0x9c, 0x2e, 0xc8, 0x55, 0x45, 0xad, 0x01, 0xd1, 0x79, 0x8b, 0x4c,
	0xa7, 0x19, 0x4d, 0xfc, 0x70, 0x9f, 0x86, 0x07, 0x3e, 0xe5, 0x3c, 0xe5, 0x7e, 0x98, 0x46, 0xd4,
	0x7d, 0x08, 0x3a, 0x3a, 0x8a, 0xb8, 0xaa, 0x68, 0xeb, 0x8a, 0xb4, 0x9a, 0x46, 0xd4, 0xf9, 0xdd,
	0x0a, 0x71, 0xad, 0xba, 0xf4, 0x60, 0xd7, 0xb3, 0x6c, 0x75, 0xb1, 0x72, 0x7d, 0xf8, 0x7e, 0x72,
	0xf7, 0xab, 0xb6, 0x0d, 0x4a, 0x0a, 0x54, 0x2a, 0xbb, 0x19, 0xf5, 0x66, 0x0a, 0x7d, 0x36, 0x61,
	0xae, 0xa1, 0x36, 0xce, 0xfb, 0xe4, 0x1c, 0x13, 0x65, 0x0d, 0x55, 0xcb, 0x36, 0x58, 0xb3, 0xcd,
	0x69, 0xe4, 0xae, 0xc1, 0x37, 0xba, 0x4c, 0xd8, 0x4c, 0xab, 0x39, 0xdd, 0xb9, 0x4f, 0xa6, 0xfb,
	0x3e, 0x34, 0x4b, 0xb9, 0x74, 0xd7, 0xa1, 0x49, 0x27, 0x7b, 0x6a, 0xdd, 0x4d, 0xb9, 0x74, 0x7e,
	0xbf, 0x42, 0xac, 0xd1, 0xe0, 0x9b, 0xf9, 0xae, 0x9b, 0xe7, 0xd1, 0x89, 0x34, 0x8f, 0x35, 0x34,
	0x3c, 0x34, 0x37, 0xba, 0x7d, 0x96, 0xc9, 0x4c, 0xbf, 0xae, 0xf0, 0x85, 0x8f, 0xe1, 0x0b, 0xa7,
	0x7a, 0x19, 0xe1, 0x13, 0xdf, 0x23, 0x73, 0xb9, 0xc5, 0x01, 0x73, 0xd5, 0x08, 0x42, 0xea, 0xef,
	0x07, 0x49, 0x14, 0x53, 0xf7, 0x23, 0x1c, 0xa7, 0x06, 0xb0, 0x61, 0xe8, 0x1f, 0x01, 0x59, 0x8d,
	0x53, 0x4e, 0x05, 0x95, 0xca, 0x54, 0xb1, 0x06, 0x0b, 0x03, 0x1c, 0xe2, 0xca, 0x72, 0x6c, 0x40,
	0x6f, 0x4c, 0x03, 0x79, 0xdb, 0xa2, 0x82, 0x09, 0xa9, 0x92, 0xf3, 0x4c, 0xe0, 0xb8, 0x66, 0x42,
	0xf2, 0x40, 0xb5, 0x41, 0xdc, 0xf5, 0xc5, 0x7e, 0x5b, 0xfa, 0x51, 0x7a, 0x98, 0xb8, 0xdf, 0x04,
	0xee, 0x79, 0x26, 0xaa, 0x3d, 0x98, 0xda, 0x7e, 0x5b, 0xae, 0xa5, 0x87, 0x89, 0xb3, 0x46, 0x2e,
	0x32, 0x51, 0xd8, 0xca, 0x56, 0x70, 0xe4, 0x67, 0x9c, 0x36, 0xd8, 0x11, 0x48, 0x01, 0x21, 0x1f,
	0x83, 0x90, 0x73, 0x4c, 0x18, 0x03, 0xb9, 0x15, 0x1c, 0xed, 0x02, 0xa6, 0xa6, 0x21, 0xce, 0x3b,
	0x64, 0x8e, 0x81, 0x41, 0xf2, 0xd3, 0x86, 0xdf, 0xa2, 0xad, 0x94, 0x77, 0x0b, 0xfe, 0x4d, 0xfc,
	0x04, 0xa6, 0xec, 0xd2, 0x4e, 0x63, 0x0b, 0xa8, 0x39, 0xe7, 0xbb, 0x64, 0xbe, 0x8f, 0xb3, 0x91,
	0xf2, 0x90, 0x46, 0x7e, 0x3b, 0x73, 0xb7, 0x06, 0xb0, 0x3e, 0x02, 0xea, 0x93, 0xcc, 0xb9, 0x4f,
	0x66, 0x94, 0xbd, 0x57, 0x9d, 0x9a, 0x51, 0xca, 0xfd, 0x40, 0xf8, 0x31, 0x0d, 0x9a, 0x6d, 0xea,
	0x6e, 0xe3, 0x34, 0x65, 0x62, 0xbd, 0xde, 0xcc, 0x76, 0x29, 0xe5, 0x55, 0xb1, 0x09, 0x14, 0xad,
	0x68, 0xc1, 0x13, 0xa6, 0xad, 0x96, 0x31, 0x0d, 0xee, 0x8e, 0xa9, 0xcd, 0xb0, 0xad, 0x02, 0x15,
	0xda, 0xce, 0x79, 0x93, 0x4c, 0x49, 0x19, 0xfb, 0x82, 0x86, 0x6d, 0xce, 0x64, 0xd7, 0xa7, 0x49,
	0x50, 0x8f, 0x69, 0xe4, 0xee, 0x62, 0x5d, 0x52, 0xc6, 0x35, 0x4d, 0x5a, 0x47, 0x8a, 0x5a, 0xbb,
	0x44, 0x3b, 0xcb, 0xd4, 0x98, 0x5a, 0xf6, 0xeb, 0x5d, 0x5c, 0xe0, 0x3e, 0x41, 0x2b, 0x97, 0x13,
	0x1e, 0x76, 0xcd, 0x3a, 0x57, 0x6f, 0x44, 0xbe, 0xa0, 0x42, 0x14, 0xd6, 0xcd, 0x43, 0x6c, 0xbd,
	0x11, 0xd5, 0xb0, 0x1c, 0xad, 0xda, 0xbb, 0x64, 0xce, 0xc6, 0x86, 0x9c, 0x06, 0x92, 0x46, 0x9a,
	0xa7, 0x06, 0x3c, 0x33, 0x05, 0xcf, 0x2a, 0x92, 0x91, 0xf5, 0x6b, 0x64, 0xd6, 0x66, 0xc5, 0x6f,
	0xf0, 0x5b, 0xca, 0xb4, 0xed, 0x01, 0xe3, 0x54, 0xc1, 0x88, 0x9f, 0xb1, 0xa5, 0x8c, 0xdb, 0x1d,
	0xe2, 0x28, 0x36, 0x35, 0x84, 0xd4, 0xc8, 0xed, 0x04, 0x71, 0x27, 0x88, 0xdd, 0x27, 0xb8, 0x3a,
	0xd4, 0x1b, 0xd1, 0x56, 0x89, 0xa0, 0xd6, 0x4a, 0x80, 0xb7, 0x63, 0xc9, 0xb2, 0x98, 0x41, 0xb9,
	0xfb, 0x14, 0x97, 0x1e, 0x85, 0xb6, 0xcb, 0x9d, 0x45, 0x32, 0x02, 0x2a, 0x29, 0xfd, 0x7c, 0x29,
	0xdc, 0x4f, 0x17, 0x2b, 0xd7, 0x5f, 0xf3, 0x88, 0xd2, 0x43, 0x15, 0xed, 0xa1, 0x83, 0x90, 0xb6,
	0x25, 0xfa, 0x1e, 0x3f, 0x0c, 0x6a, 0x9e, 0xc1, 0x82, 0x8d, 0x48, 0xad, 0x44, 0x09, 0x6d, 0xa6,
	0x92, 0x41, 0x1b, 0x80, 0x0f, 0x16, 0xa6, 0xb1, 0xdf, 0xa1, 0x5c, 0x7d, 0x83, 0xfb, 0x23, 0xb8,
	0x12, 0x15, 0x90, 0x5d, 0x8d, 0x78, 0x8a, 0x00, 0xe7, 0x06, 0x99, 0x80, 0xd1, 0xa0, 0xd6, 0x2d,
	0x5f, 0xa6, 0x7e, 0xcc, 0x3a, 0xd4, 0xfd, 0x16, 0x70, 0x9d, 0x55, 0x04, 0xb5, 0x5c, 0xed, 0xa5,
	0x9b, 0xac, 0x43, 0x9d, 0xef, 0x90, 0xdb, 0x66, 0xec, 0xc0, 0xa7, 0xed, 0xa7, 0x99, 0x32, 0x50,
	0xad, 0x2c, 0x16, 0x6a, 0xc8, 0x1e, 0x06, 0x3c, 0x62, 0x49, 0xd3, 0x8f, 0x98, 0xc0, 0x91, 0xf1,
	0x6d, 0x50, 0xf5, 0x1a, 0x0e, 0xa7, 0x2d, 0xcd, 0xf1, 0x10, 0x19, 0x1e, 0xe5, 0xf8, 0x35, 0x0d,
	0x77, 0x66, 0xc8, 0x29, 0x19, 0x66, 0x2d, 0x21, 0xdc, 0x1f, 0x85, 0xea, 0xf5, 0x2f, 0x67, 0x81,
	0x90, 0x96, 0x68, 0xfa, 0x71, 0xda, 0x54, 0x2b, 0xf8, 0x77, 0xd0, 0x41, 0x6a, 0x89, 0xe6, 0x66,
	0xda, 0xdc, 0x48, 0x9c, 0x0b, 0x64, 0xd8, 0x50, 0xd5, 0x8a, 0xfd, 0x63, 0xe8, 0x9a, 0x21, 0x59,
	0xad, 0xd4, 0x37, 0xc9, 0x44, 0x3e, 0xb9, 0x73, 0x0f, 0xcc, 0x07, 0x54, 0xee, 0xf5, 0x6d, 0x6a,
	0x4f, 0xec, 0x0e, 0x99, 0x34, 0x10, 0x3f, 0x49, 0x95, 0x1d, 0xc8, 0x68, 0x12, 0xb9, 0x3f, 0x0e,
	0xdf, 0x31, 0xae, 0xfd, 0xb5, 0xed, 0x74, 0x17, 0xcb, 0x9d, 0x1d, 0xf2, 0x06, 0x13, 0x7e, 0x18,
	0x64, 0x41, 0x9d, 0xc5, 0x6a, 0x4a, 0x98, 0x56, 0x86, 0x11, 0xac, 0x07, 0x38, 0x8d, 0xdc, 0x00,
	0xf8, 0x2f, 0x31, 0xb1, 0x9a, 0x43, 0xb7, 0x0b, 0x64, 0x2d, 0x07, 0x3a, 0x5b, 0xe4, 0xf2, 0xf1,
	0x02, 0x33, 0xca, 0x1b, 0x29, 0x6f, 0xd1, 0xc8, 0xad, 0x83, 0xbc, 0xc5, 0x63, 0xe4, 0xed, 0x1a,
	0x9c, 0xb3, 0x0d, 0xfa, 0xc1, 0x48, 0xf1, 0x39, 0x6d, 0x70, 0x2a, 0xf6, 0x6d, 0xe1, 0xb9, 0x17,
	0x17, 0x1a, 0x79, 0x9e, 0x82, 0x7a, 0x88, 0x2c, 0x64, 0xe7, 0x5e, 0xdd, 0x13, 0x72, 0xbd, 0x4f,
	0x5e, 0x1a, 0x47, 0x03, 0x65, 0x46, 0x20, 0xf3, 0x72, 0x59, 0xe6, 0x4e, 0x1c, 0x0d, 0x10, 0x7b,
	0x81, 0x0c, 0x33, 0xe1, 0x37, 0xb9, 0x1f, 0x1c, 0x06, 0x9c, 0xba, 0x14, 0x38, 0x87, 0x98, 0x78,
	0xcc, 0xab, 0xaa, 0x00, 0x2d, 0x74, 0x6e, 0x40, 0x06, 0xd6, 0xd6, 0x30, 0x16, 0x5a, 0x9b, 0x93,
	0x01, 0xb5, 0x3c, 0x50, 0x8b, 0xfe, 0x40, 0x29, 0xb0, 0xcc, 0x34, 0x41, 0xc2, 0xec, 0x00, 0x09,
	0xb0, 0xd0, 0x7c, 0x4c, 0x96, 0x60, 0xc8, 0x17, 0x13, 0x6c, 0x90, 0x1a, 0xfb, 0x20, 0xe4, 0x22,
	0x20, 0xcd, 0x3c, 0x1b, 0xa0, 0xca, 0x39, 0x32, 0xb4, 0xaf, 0xda, 0x0d, 0x5c, 0x45, 0x86, 0xe3,
	0x59, 0x15, 0x80, 0x67, 0x78, 0x95, 0x8c, 0x1d, 0x50, 0x9a, 0xf9, 0x81, 0x9a, 0x88, 0x08, 0xf9,
	0x0c, 0x20, 0xa3, 0xaa, 0xb8, 0xaa, 0x4a, 0x01, 0xf7, 0x26, 0x99, 0x2a, 0x7c, 0x16, 0xbf, 0x90,
	0x77, 0x00, 0x60, 0xa7, 0xa0, 0x7d, 0x64, 0x24, 0xbf, 0x55, 0xe2, 0x50, 0xd2, 0xa0, 0x0e, 0x37,
	0xce, 0xdd, 0x16, 0x4d, 0xfb, 0xd8, 0x90, 0x9c, 0x0f, 0xc8, 0x82, 0xc5, 0xa2, 0xbc, 0xc7, 0x20,
	0x0c, 0xad, 0xca, 0x5a, 0xc0, 0xea, 0x16, 0x98, 0x2d, 0x96, 0x54, 0xc3, 0x30, 0xaf, 0x72, 0x99,
	0xcc, 0x00, 0x53, 0xd4, 0xa1, 0x5c, 0x32, 0x41, 0x7d, 0x63, 0x25, 0xdd, 0x04, 0x3d, 0x89, 0x16,
	0x4b, 0xaa, 0x86, 0xb8, 0xa1, 0x69, 0xce, 0x87, 0x64, 0x61, 0x30, 0x97, 0xdf, 0x12, 0x34, 0x14,
	0x6e, 0x8a, 0x36, 0x6d, 0x10, 0xef, 0x96, 0x02, 0x38, 0xef, 0x10, 0x57, 0x09, 0x48, 0x39, 0x6b,
	0xb2, 0x04, 0x67, 0x4f, 0x5e, 0x71, 0x06, 0xcc, 0x4a, 0xad, 0x9d, 0x82, 0x9c, 0x57, 0x5d, 0xb8,
	0x3e, 0x3e, 0xa7, 0x92, 0x77, 0x0b, 0xbe, 0xcf, 0x4b, 0xae, 0x8f, 0xa7, 0x88, 0x39, 0xd7, 0xdb,
	0x64, 0x06, 0xcc, 0xa7, 0x60, 0xca, 0x15, 0x8b, 0x03, 0x21, 0x7d, 0xdc, 0x90, 0xb8, 0x1c, 0xdb,
	0x56, 0x51, 0x6b, 0x8a, 0xb8, 0x19, 0x08, 0xf9, 0x04, 0x48, 0xce, 0x3d, 0x32, 0xd5, 0xcb, 0xc4,
	0x69, 0x10, 0xb9, 0x02, 0x57, 0x95, 0x12, 0x8b, 0x47, 0x83, 0xc8, 0x79, 0x8f, 0xcc, 0x0f, 0x62,
	0xf0, 0xc1, 0x35, 0x72, 0x25, 0x7e, 0x57, 0x1f, 0x9b, 0xa7, 0xa8, 0x6a, 0x91, 0x01, 0x5e, 0xe0,
	0x0a, 0xeb, 0x6e, 0x1b, 0x17, 0x19, 0x55, 0xa6, 0x80, 0xab, 0x75, 0xe7, 0x16, 0x71, 0x6c, 0x84,
	0x96, 0xda, 0x41, 0x43, 0x59, 0xe0, 0x06, 0x88, 0x6b, 0xd4, 0xdd, 0xc3, 0xb2, 0xb8, 0x47, 0x75,
	0xe7, 0xba, 0xda, 0xe0, 0xb4, 0x13, 0x89, 0x90, 0x43, 0xce, 0x24, 0x75, 0x8f, 0x70, 0x55, 0x81,
	0x72, 0x05, 0xfb, 0x54, 0x95, 0xaa, 0xbd, 0x46, 0xef, 0x67, 0x21, 0xbc, 0x8b, 0x23, 0xb9, 0xf4,
	0x45, 0xc8, 0xf2, 0x0d, 0x32, 0x1f, 0x48, 0x49, 0x5b, 0x99, 0x5a, 0xf2, 0x0a, 0x0e, 0x98, 0xdc,
	0xc2, 0x7d, 0x86, 0xbe, 0x66, 0x8e, 0xc8, 0xf9, 0xd4, 0xcc, 0x16, 0xca, 0x05, 0x08, 0x42, 0xd9,
	0x56, 0x7b, 0xe9, 0x5e, 0xce, 0xbf, 0x84, 0x7d, 0x8c, 0xe4, 0x1e, 0xb6, 0x0f, 0xc8, 0x82, 0xa5,
	0xa6, 0xa0, 0x61, 0x9a, 0xd8, 0x75, 0xbb, 0x7f, 0x19, 0xa7, 0x42, 0xae, 0x6d, 0x0d, 0x10, 0x85,
	0xce, 0x1f, 0x91, 0x4b, 0x85, 0xce, 0x7d, 0xec, 0x5a, 0x81, 0x9f, 0x00, 0x21, 0xe7, 0x73, 0x60,
	0x8f, 0x10, 0xd4, 0xe4, 0x21, 0xb9, 0xa0, 0x3f, 0xe0, 0x38, 0x31, 0x3f, 0x09, 0x62, 0xe6, 0x11,
	0x35, 0x50, 0xc6, 0x03, 0x72, 0x6e, 0x60, 0xa3, 0xeb, 0x6e, 0xff, 0x29, 0x6c, 0xc2, 0xfe, 0xa6,
	0xc7, 0xee, 0x7f, 0x4c, 0x16, 0x07, 0xb6, 0x3f, 0xfa, 0xf0, 0xa8, 0xc3, 0x5f, 0xa9, 0x80, 0x8c,
	0x85, 0xfe, 0x6e, 0x00, 0x19, 0xa8, 0x46, 0x95, 0x9c, 0xef, 0xef, 0x0b, 0x5b, 0xca, 0x4f, 0xa3,
	0x94, 0xb9, 0x9e, 0x2e, 0xb1, 0x44, 0x7c, 0x93, 0x2c, 0x7d, 0x59, 0xbf, 0xe8, 0x0f, 0xfa, 0xab,
	0x28, 0xe7, 0xfc, 0x71, 0xdd, 0x83, 0xdf, 0xb5, 0x47, 0xae, 0x7d, 0x59, 0x1f, 0xd9, 0x8a, 0xfd,
	0x0c, 0x0a, 0x5c, 0x3a, 0xae, 0xab, 0x2c, 0x0d, 0xb7, 0xc9, 0x1b, 0xc7, 0xf6, 0x97, 0x2d, 0xf2,
	0x67, 0x51, 0xe4, 0xc5, 0x81, 0xdd, 0x66, 0xc9, 0xbb, 0x41, 0xc6, 0x2d, 0x09, 0xb4, 0xa3, 0x96,
	0xaf, 0xbf, 0x86, 0xbc, 0x67, 0x63, 0x83, 0x5f, 0x57, 0xc5, 0x6a, 0x5f, 0xd5, 0x5f, 0x27, 0x72,
	0xfc, 0x75, 0xe4, 0x98, 0x12, 0xe5, 0x7a, 0x90, 0xef, 0x4d, 0x32, 0x05, 0x0c, 0x07, 0x7e, 0x40,
	0x8f, 0x32, 0xc6, 0xbb, 0xba, 0x19, 0xff, 0x06, 0x32, 0x4d, 0x28, 0xe2, 0xc7, 0x55, 0x24, 0x61,
	0xd3, 0xbd, 0x4f, 0xce, 0xd9, 0x35, 0xf5, 0x32, 0xfe, 0x1c, 0x32, 0xce, 0x16, 0xb5, 0x95, 0xd9,
	0xef, 0x93, 0x69, 0xc3, 0x97, 0xa4, 0x52, 0xad, 0xc8, 0x9a, 0xf1, 0x6f, 0x22, 0xa3, 0x83, 0x35,
	0x6a, 0x1a, 0xf2, 0xdc, 0x25, 0x93, 0x79, 0x5d, 0x10, 0xa1, 0x40, 0x8e, 0x9f, 0x47, 0x8e, 0x71,
	0xad, 0xa3, 0xa2, 0xf4, 0xe1, 0x85, 0x0c, 0xb8, 0xa9, 0xe1, 0x6f, 0x95, 0xf0, 0x40, 0x41, 0xfc,
	0x37, 0xc8, 0x7c, 0xcf, 0x27, 0xd9, 0x6c, 0xbf, 0x80, 0x6c, 0x33, 0xf6, 0x17, 0x59, 0xcc, 0xf7,
	0x88, 0x15, 0x07, 0xf0, 0xdb, 0x99, 0x0f, 0x56, 0xcf, 0xfd, 0xdb, 0xba, 0x01, 0x0b, 0xda, 0x93,
	0x6c, 0x55, 0x51, 0x9c, 0xb7, 0x4b, 0x51, 0x05, 0xb5, 0x35, 0xd4, 0x2c, 0xbf, 0x58, 0xe9, 0x0d,
	0x2b, 0xa8, 0x7d, 0x2b, 0x32, 0x7d, 0x5c, 0x1a, 0xfc, 0x76, 0x54, 0x42, 0x69, 0x1c, 0xf1, 0x34,
	0xcb, 0x68, 0xe4, 0xfe, 0x1d, 0x94, 0x70, 0x21, 0x1f, 0xfc, 0x45, 0x98, 0x48, 0xe9, 0xbd, 0x86,
	0x30, 0x67, 0x89, 0x8c, 0xe0, 0x70, 0xe4, 0x34, 0x10, 0x69, 0xe2, 0xfe, 0x12, 0xc6, 0x50, 0x87,
	0xa1, 0xd0, 0x83, 0x32, 0xb5, 0xb3, 0x81, 0x6d, 0x63, 0x09, 0xf8, 0x77, 0x11, 0x38, 0xa6, 0x28,
	0x9e, 0x05, 0xbe, 0x46, 0xa0, 0xc8, 0x8e, 0x1f, 0xfd, 0x32, 0xaa, 0x32, 0xaa, 0xca, 0x8b, 0xd8,
	0xd1, 0x32, 0x99, 0x01, 0x85, 0x61, 0xf7, 0xdf, 0xb5, 0xf1, 0x7f, 0x4f, 0x7f, 0xbc, 0x22, 0xc3,
	0xee, 0xbf, 0x5b, 0x70, 0xbd, 0x47, 0xe6, 0xfa, 0xb9, 0x44, 0xbb, 0x0e, 0x8c, 0xdf, 0xd5, 0xdd,
	0xd3, 0xc3, 0x58, 0x43, 0xb2, 0xf3, 0xfd, 0x0a, 0x99, 0x11, 0x34, 0x89, 0xca, 0x01, 0x07, 0x96,
	0x34, 0x52, 0xf7, 0xef, 0x57, 0x20, 0x1a, 0x93, 0xbd, 0x9c, 0x68, 0x4c, 0x92, 0xca, 0x46, 0x22,
	0xbb, 0x19, 0xf5, 0xd5, 0x54, 0x4c, 0x22, 0x3b, 0xc4, 0xb1, 0x91, 0x34, 0x52, 0xe7, 0x8f, 0x2b,
	0x64, 0xde, 0x38, 0x98, 0x03, 0xb4, 0xfd, 0x95, 0x93, 0xd2, 0xd6, 0x35, 0x4a, 0xf5, 0x69, 0xfc,
	0x75, 0x32, 0x8b, 0x7d, 0x81, 0xda, 0xda, 0xf1, 0xe2, 0x7f, 0x80, 0xbd, 0x32, 0x0d, 0xf4, 0x6d,
	0x4d, 0xce, 0xfd, 0xe2, 0x7b, 0x64, 0xb2, 0x87, 0x11, 0x5c, 0xf3, 0x7f, 0xa8, 0xe7, 0x4c, 0x89,
	0x09, 0xbc, 0xf2, 0x1b, 0x64, 0x3c, 0x8f, 0x9c, 0xfb, 0x49, 0xbb, 0x55, 0xa7, 0xdc, 0xfd, 0x47,
	0xda, 0x12, 0x9a, 0x08, 0xfa, 0x36, 0x14, 0xab, 0x1d, 0x7c, 0xd4, 0x7a, 0x06, 0xe1, 0x73, 0xbf,
	0x1e, 0x24, 0xd1, 0x21, 0x8b, 0xe4, 0xbe, 0xfb, 0xab, 0x7a, 0xee, 0x47, 0xad, 0x67, 0x9b, 0x2c,
	0x39, 0x78, 0x68, 0x08, 0xce, 0x65, 0x32, 0x0a, 0xfb, 0x5c, 0x4e, 0xc3, 0x8e, 0x1f, 0xb5, 0x9e,
	0xb9, 0x5f, 0xe8, 0xc9, 0xa0, 0x4a, 0x3d, 0x1a, 0x76, 0xd6, 0x5a, 0xcf, 0x9c, 0xdb, 0xc4, 0x01,
	0x10, 0x0c, 0x24, 0x25, 0x1d, 0xe2, 0x08, 0xff, 0x58, 0xcf, 0x06, 0x45, 0xaa, 0xd1, 0x24, 0x5a,
	0x6b, 0x3d, 0x83, 0x18, 0xc2, 0x3c, 0x39, 0x23, 0x53, 0xe1, 0xab, 0xd6, 0x73, 0xff, 0x09, 0xd6,
	0x7b, 0x5a, 0xa6, 0x62, 0xaf, 0x9b, 0x51, 0x67, 0x81, 0x0c, 0x29, 0x5a, 0x27, 0x88, 0xdb, 0xd4,
	0xfd, 0x35, 0x24, 0x2a, 0xf4, 0x53, 0x55, 0x00, 0x83, 0x55, 0xef, 0xfe, 0xa0, 0xbf, 0x84, 0x0c,
	0x24, 0x13, 0x92, 0x85, 0xc2, 0xfd, 0x75, 0xec, 0xfe, 0xf4, 0xe5, 0x74, 0xbf, 0x52, 0x02, 0x8e,
	0x44, 0xbc, 0x69, 0x4b, 0x9f, 0x5a, 0xae, 0x8e, 0xf3, 0xb3, 0x15, 0x72, 0x3a, 0x68, 0xf8, 0x51,
	0x20, 0x03, 0xf7, 0x37, 0x2a, 0x8b, 0xaf, 0x5e, 0x1f, 0xbe, 0xff, 0xd9, 0x57, 0xaf, 0x9a, 0xd2,
	0x28, 0x68, 0xf8, 0x99, 0x77, 0x2a, 0x68, 0xac, 0x05, 0x32, 0x50, 0xab, 0x89, 0x0c, 0xb3, 0x3c,
	0xca, 0x03, 0xa1, 0x6c, 0xe8, 0x9b, 0xdf, 0xac, 0xe8, 0x60, 0x55, 0x98, 0xe9, 0x20, 0xcf, 0x4e,
	0x46, 0x13, 0xd3, 0x3d, 0x1d, 0xf5, 0x75, 0x41, 0x8b, 0xba, 0xff, 0x14, 0x61, 0xa7, 0x3b, 0xbc,
	0x01, 0x07, 0x47, 0x17, 0x08, 0x51, 0x0a, 0x45, 0xf5, 0xae, 0xcf, 0x33, 0xf7, 0xb7, 0x90, 0x3a,
	0xa4, 0x8b, 0xbc, 0xcc, 0x59, 0x24, 0xc3, 0x89, 0xe0, 0x79, 0x44, 0xec, 0xb7, 0x11, 0x40, 0x12,
	0xc1, 0x4d, 0x28, 0xec, 0x87, 0xc8, 0x42, 0x93, 0x07, 0x21, 0x6d, 0xb4, 0x63, 0x65, 0x3b, 0x61,
	0x1d, 0xd1, 0x70, 0xd5, 0xa0, 0xee, 0xf7, 0x90, 0x65, 0xce, 0x80, 0x3c, 0xc4, 0x68, 0xf6, 0xed,
	0x3a, 0x57, 0xc6, 0xb4, 0xc9, 0x73, 0x5e, 0xd8, 0x7d, 0xfd, 0x8e, 0x36, 0xa6, 0x4d, 0xae, 0xe1,
	0xb0, 0xe7, 0xba, 0x4d, 0x9c, 0x26, 0x57, 0x63, 0x24, 0xa6, 0x7e, 0x16, 0xc8, 0x7d, 0xc4, 0x7e,
	0x1f, 0xb1, 0x63, 0x4d, 0x5e, 0x53, 0x94, 0xdd, 0x40, 0xee, 0x03, 0x7a, 0x91, 0x0c, 0x37, 0x84,
	0x48, 0xfc, 0xb4, 0xd1, 0x50, 0xab, 0xda, 0xef, 0x22, 0x8c, 0xa8, 0xb2, 0x1d, 0x28, 0x52, 0xcb,
	0x42, 0x23, 0xab, 0x17, 0x90, 0xdf, 0x43, 0xc8, 0x30, 0x14, 0x6a, 0xcc, 0x75, 0xed, 0x92, 0x04,
	0xe1, 0x81, 0x72, 0x9c, 0x3e, 0xf7, 0x93, 0xd4, 0xfd, 0x7d, 0xad, 0x9d, 0x22, 0x54, 0xc3, 0x83,
	0xa8, 0x46, 0x3f, 0xdf, 0x4e, 0x9d, 0x37, 0xc8, 0x28, 0x78, 0x3b, 0xe0, 0x8b, 0x48, 0x9a, 0xb8,
	0xff, 0x0c, 0x61, 0x23, 0x50, 0xfa, 0x29, 0x16, 0xaa, 0x06, 0x47, 0x14, 0xec, 0x88, 0xfe, 0x00,
	0x21, 0x43, 0x50, 0x04, 0x5b, 0xa1, 0x5b, 0x64, 0x42, 0xa4, 0xe1, 0x01, 0xd5, 0x3b, 0x20, 0xf4,
	0x9f, 0xfe, 0x50, 0x7f, 0x22, 0x52, 0x14, 0x2e, 0xf7, 0x97, 0x18, 0x4a, 0x2a, 0x42, 0x53, 0x7f,
	0x84, 0xed, 0x7d, 0x96, 0x81, 0xbc, 0x3c, 0x04, 0x75, 0x8b, 0xe8, 0x93, 0x24, 0xdf, 0xaa, 0xfe,
	0x8f, 0xb5, 0x5c, 0xa4, 0x3c, 0xcc, 0x95, 0x58, 0x20, 0x43, 0xaa, 0xd7, 0x31, 0xec, 0xf8, 0xcf,
	0x51, 0xe0, 0x99, 0x44, 0x70, 0x8c, 0x34, 0x62, 0xad, 0x59, 0x20, 0x84, 0xda, 0xc7, 0x87, 0x71,
	0x2a, 0xa8, 0xfb, 0x2f, 0xf2, 0x5a, 0x77, 0xb1, 0x7c, 0x55, 0x15, 0x2b, 0x6f, 0x4b, 0x0d, 0x61,
	0x9a, 0x40, 0xdc, 0xd7, 0x6f, 0x30, 0xae, 0x9a, 0x52, 0xb8, 0xff, 0x12, 0xe1, 0x13, 0x49, 0x9d,
	0xaf, 0x23, 0xed, 0x91, 0x22, 0x41, 0xa0, 0xca, 0xc1, 0xa9, 0xe1, 0xd7, 0x5b, 0x6a, 0x9c, 0xf3,
	0x0e, 0xe5, 0xc2, 0xfd, 0x57, 0xda, 0x9a, 0x21, 0xe9, 0x61, 0x2b, 0xab, 0x21, 0xc1, 0xb9, 0x42,
	0xce, 0xaa, 0x0a, 0xc2, 0xb8, 0x2d, 0x74, 0x14, 0xf1, 0x4f, 0x74, 0xab, 0x27, 0x75, 0xbe, 0x8a,
	0xa5, 0x1b, 0x91, 0x81, 0xb1, 0xc4, 0x20, 0xdd, 0x7f, 0x5d, 0xc0, 0x36, 0x12, 0x0d, 0x74, 0x6e,
	0x92, 0x71, 0xd6, 0x4c, 0x52, 0x4e, 0xad, 0xb3, 0xc4, 0x7f, 0xa3, 0x8d, 0x1e, 0x12, 0x8a, 0x53,
	0xc3, 0x7b, 0x64, 0x32, 0x3f, 0xba, 0xec, 0x64, 0x4a, 0x30, 0x53, 0x26, 0xfd, 0x4f, 0xf5, 0x97,
	0x19, 0xda, 0xd3, 0x2c, 0x59, 0x05, 0x8a, 0x9a, 0x86, 0x2c, 0xf5, 0x03, 0x88, 0x73, 0xfd, 0x5b,
	0x3d, 0x0d, 0x59, 0x5a, 0x85, 0x78, 0xd6, 0x05, 0x42, 0xa0, 0x17, 0x91, 0xfa, 0xef, 0xf4, 0x34,
	0x54, 0x45, 0x48, 0x5f, 0x24, 0xc3, 0xe8, 0xe1, 0x22, 0xe0, 0xdf, 0xeb, 0x69, 0x08, 0x65, 0x88,
	0xf8, 0xad, 0x4a, 0x7e, 0x2a, 0x68, 0x5b, 0xd1, 0xff, 0x80, 0x56, 0x54, 0xbc, 0xa4, 0x45, 0xb4,
	0xce, 0xfd, 0x96, 0x68, 0x82, 0x02, 0x22, 0x3f, 0x5c, 0xb4, 0xac, 0xa8, 0x5a, 0xab, 0x98, 0x08,
	0x03, 0x1e, 0x81, 0x25, 0xd5, 0xc3, 0xfb, 0xcf, 0xcc, 0x5a, 0x85, 0x24, 0x65, 0xe8, 0x70, 0x7c,
	0xdf, 0xb5, 0xa2, 0x96, 0x9c, 0x66, 0x71, 0x10, 0x42, 0xa0, 0xfd, 0xcf, 0x2b, 0xa5, 0xb0, 0xa5,
	0x87, 0x94, 0xaa, 0x80, 0xc9, 0x6a, 0xf0, 0x51, 0x1b, 0x03, 0xa2, 0xff, 0x11, 0xc1, 0xa3, 0x1a,
	0xbc, 0xd6, 0x86, 0x78, 0xe8, 0x07, 0x64, 0xa1, 0x17, 0x09, 0x76, 0xd4, 0x4f, 0xe0, 0x14, 0xc5,
	0xfd, 0x0b, 0xe4, 0x9a, 0x2d, 0x71, 0x29, 0x6b, 0xba, 0x0d, 0x74, 0xe7, 0x11, 0xb9, 0x48, 0x9b,
	0x70, 0xbc, 0x86, 0x7e, 0x60, 0xd2, 0x64, 0x09, 0xa5, 0x9c, 0x25, 0xcd, 0xdc, 0x56, 0xfe, 0x27,
	0x14, 0xb1, 0x80, 0xb8, 0x5d, 0xe5, 0x16, 0x16, 0x28, 0x63, 0x3d, 0xbf, 0x57, 0x21, 0xb3, 0xca,
	0xa0, 0xb3, 0x84, 0x49, 0x5f, 0x74, 0x93, 0x10, 0xa3, 0xd5, 0x22, 0xa3, 0xa1, 0xfb, 0x9f, 0x2b,
	0x2f, 0xf3, 0xf0, 0x4c, 0xd5, 0xab, 0xaa, 0xf5, 0x26, 0x65, 0x98, 0x6d, 0x24, 0x4c, 0xd6, 0xba,
	0x49, 0xa8, 0x0c, 0x69, 0x2d, 0xa3, 0xa1, 0xf3, 0xa7, 0x15, 0x72, 0xa9, 0xac, 0x67, 0xb6, 0x1f,
	0x08, 0xea, 0xcb, 0xc3, 0xd4, 0xd2, 0xf8, 0xbf, 0x9c, 0x8c, 0xc6, 0xe7, 0x2c, 0x8d, 0x77, 0x95,
	0x5a, 0x7b, 0x87, 0x69, 0xae, 0xf9, 0x1f, 0x55, 0xc8, 0x42, 0x59, 0xf3, 0x28, 0x4d, 0xa8, 0xa5,
	0xf4, 0x7f, 0x3d, 0x19, 0xa5, 0x67, 0x2d, 0xa5, 0xd7, 0xd2, 0x84, 0xe6, 0x0a, 0xdf, 0x20, 0x66,
	0x22, 0xf8, 0x81, 0x58, 0x86, 0x85, 0xce, 0xfd, 0x6f, 0xda, 0xf5, 0xd3, 0x84, 0xaa, 0x58, 0x56,
	0xcb, 0x1c, 0xec, 0x6b, 0xb2, 0x03, 0x66, 0x8c, 0xbf, 0xfb, 0x03, 0xb3, 0xaf, 0xc9, 0x0e, 0x98,
	0xb6, 0xfc, 0xca, 0xf0, 0x03, 0xa6, 0x2d, 0xa8, 0xf2, 0xc2, 0x58, 0xc4, 0x64, 0xd7, 0xfd, 0xef,
	0xda, 0xa8, 0x29, 0xca, 0x13, 0x41, 0x9f, 0xea, 0x72, 0x35, 0x3f, 0x01, 0x1c, 0xc4, 0x71, 0x7a,
	0xe8, 0xb3, 0x04, 0x18, 0xdc, 0xff, 0xa1, 0xe7, 0x9b, 0x22, 0x55, 0x15, 0x65, 0x03, 0x09, 0xe0,
	0xa5, 0x2a, 0xb8, 0x60, 0x4d, 0x65, 0x06, 0x59, 0xbd, 0x99, 0xb9, 0xff, 0x53, 0xaf, 0x04, 0x8a,
	0x50, 0x83, 0xf2, 0x8d, 0x7a, 0x33, 0x73, 0x7e, 0xbb, 0x42, 0xa6, 0x72, 0x3f, 0xa1, 0x15, 0x28,
	0xf3, 0x98, 0xa8, 0xa6, 0x73, 0xff, 0xd7, 0xcb, 0x75, 0xf3, 0xeb, 0xdc, 0x6f, 0xc2, 0x21, 0xaa,
	0x37, 0x69, 0xd4, 0xd9, 0x2a, 0xb4, 0x59, 0xfa, 0x26, 0x19, 0xb1, 0x7b, 0xc9, 0x71, 0xc9, 0x69,
	0xdc, 0x06, 0x0b, 0x57, 0x3b, 0xb6, 0xfa, 0x27, 0x78, 0x46, 0x41, 0x92, 0x1a, 0xea, 0x2b, 0xe8,
	0x3a, 0x58, 0x45, 0x4b, 0x77, 0xc8, 0xf4, 0xc6, 0xee, 0xd3, 0xe5, 0xbd, 0x76, 0x92, 0x50, 0x73,
	0xd8, 0x0e, 0x3e, 0xf1, 0x14, 0x79, 0x1d, 0xfd, 0x61, 0x6c, 0x2a, 0xfc, 0xb1, 0x74, 0x93, 0x38,
	0x0a, 0xbe, 0xb5, 0xb6, 0xf7, 0x7c, 0xec, 0x3d, 0x32, 0xeb, 0xed, 0xad, 0xa6, 0x89, 0x90, 0x5c,
	0x29, 0xff, 0x7c, 0x86, 0x6b, 0x64, 0x6c, 0x63, 0xf7, 0xe9, 0xca, 0xf3, 0x81, 0x5f, 0xc7, 0x2b,
	0x48, 0xf1, 0x7d, 0xb5, 0xa6, 0x05, 0x51, 0xc4, 0x7d, 0xa9, 0xb6, 0x0c, 0xc5, 0x6f, 0x2a, 0xb0,
	0x29, 0x46, 0xbc, 0x11, 0x28, 0x34, 0xf7, 0x8a, 0x6e, 0x93, 0xa9, 0xcd, 0xfb, 0x4f, 0x77, 0xb7,
	0xd7, 0x9f, 0xee, 0x6e, 0x3f, 0xbf, 0x9a, 0x07, 0x64, 0xba, 0xa8, 0xa6, 0x25, 0xb2, 0xc3, 0xff,
	0xaf, 0xba, 0x6e, 0x91, 0x49, 0xf5, 0x35, 0x5b, 0x2f, 0x54, 0x15, 0x82, 0x97, 0x5f, 0x0c, 0x7c,
	0x9d, 0x8c, 0x6f, 0xd6, 0xfc, 0xcd, 0xda, 0x0b, 0x75, 0xc1, 0xc6, 0x6e, 0x67, 0xf9, 0x51, 0x9c,
	0x1e, 0xaa, 0x91, 0xf2, 0xa2, 0x0c, 0x2b, 0x2f, 0xce, 0xf0, 0xe7, 0x73, 0x38, 0x18, 0xcd, 0xb5,
	0x06, 0x67, 0x9c, 0xbc, 0x1a, 0x34, 0x98, 0x06, 0xa9, 0x7f, 0x9d, 0x4b, 0x64, 0x04, 0x66, 0x4a,
	0xf9, 0xce, 0xd7, 0xb0, 0x2a, 0x33, 0x57, 0x1e, 0x6e, 0x13, 0x07, 0x20, 0xad, 0x10, 0xdc, 0x58,
	0x0d, 0x7c, 0x15, 0x67, 0xb4, 0xa2, 0x6c, 0x29, 0x42, 0x2f, 0x3a, 0x0e, 0xea, 0xb4, 0xb8, 0xe4,
	0xf2, 0x5a, 0x81, 0xde, 0x54, 0x04, 0x83, 0xfe, 0x7e, 0x85, 0x4c, 0x02, 0x5c, 0xc2, 0x18, 0xcf,
	0xf1, 0xaf, 0xc3, 0x94, 0x3e, 0xfc, 0xea, 0xa7, 0xf4, 0xc0, 0xf9, 0xe5, 0x4d, 0xa8, 0xaa, 0x4a,
	0xc5, 0xce, 0xaf, 0x55, 0xc8, 0x38, 0x36, 0x43, 0x54, 0x34, 0xc2, 0x29, 0x50, 0x53, 0xbe, 0x1c,
	0x35, 0xcb, 0xf3, 0xda, 0x3b, 0x0b, 0x4d, 0x1f, 0xe5, 0x0d, 0x7f, 0x5d, 0xeb, 0x67, 0x0f, 0xfd,
	0xd3, 0xda, 0xa7, 0xce, 0x3a, 0xcb, 0x4f, 0xf3, 0xc1, 0xaf, 0xb6, 0x80, 0x06, 0x19, 0x60, 0xaf,
	0x6a, 0xf8, 0x19, 0x80, 0x4f, 0x6a, 0x78, 0xb0, 0x55, 0x90, 0x9c, 0xef, 0x56, 0x60, 0xa0, 0xac,
	0xe4, 0xa2, 0x87, 0xe0, 0xd3, 0x3f, 0x7f, 0x29, 0x9f, 0x6e, 0x5b, 0x1d, 0x18, 0x9b, 0xa6, 0xc0,
	0xf9, 0xf5, 0x0a, 0x0c, 0xb7, 0x95, 0x9e, 0xc1, 0x49, 0x4e, 0x4a, 0x39, 0xd5, 0x05, 0x2b, 0xa5,
	0xf9, 0x90, 0x6b, 0x58, 0x9e, 0x10, 0xc3, 0x27, 0xaa, 0x61, 0x69, 0x0e, 0x7e, 0x81, 0x23, 0x7b,
	0xa5, 0x34, 0x72, 0x46, 0x4e, 0x4a, 0x3f, 0x35, 0x58, 0x57, 0xac, 0xc1, 0xfa, 0x3b, 0x15, 0x32,
	0x93, 0x6b, 0x57, 0xee, 0xe5, 0xd1, 0x93, 0xd2, 0x71, 0x52, 0xeb, 0x58, 0xea, 0xe8, 0xdf, 0xa8,
	0x10, 0x27, 0xbe, 0xaf, 0xd4, 0xec, 0x64, 0xb1, 0xc8, 0x95, 0x3c, 0x0b, 0x4a, 0xf2, 0x97, 0xe3,
	0x9c, 0xd8, 0x8b, 0xae, 0x37, 0x1e, 0xdf, 0x7f, 0x8a, 0xca, 0x18, 0x15, 0xff, 0xb0, 0x42, 0xa6,
	0xb9, 0x54, 0x5b, 0x53, 0xbd, 0xec, 0xe7, 0x5a, 0x8e, 0x81, 0x96, 0xdd, 0xaf, 0x5e, 0xcb, 0x63,
	0x9c, 0x0e, 0x6f, 0x92, 0xcb, 0x3e, 0x82, 0xf3, 0x9b, 0x15, 0x32, 0x81, 0xb3, 0xdb, 0x1e, 0x9a,
	0xe3, 0xa0, 0x6b, 0xfb, 0xe5, 0x74, 0x7b, 0xcf, 0xa2, 0xef, 0x8d, 0xc1, 0x04, 0x2f, 0x3c, 0x09,
	0xa3, 0xe3, 0x72, 0x59, 0xc7, 0x89, 0x97, 0xa8, 0xe3, 0xf2, 0x20, 0x1d, 0x97, 0x6d, 0x1d, 0xbf,
	0x57, 0x21, 0x93, 0x38, 0x34, 0x7d, 0x6a, 0x6b, 0xe9, 0x80, 0x96, 0x9d, 0xaf, 0x5e, 0xcb, 0x41,
	0x7e, 0x9d, 0x1e, 0x9f, 0xeb, 0x96, 0x9e, 0xbf, 0x52, 0x21, 0xa3, 0xb1, 0xf0, 0xad, 0xd9, 0x33,
	0xf9, 0xb2, 0x66, 0x4f, 0xaf, 0xcf, 0xe6, 0x0d, 0xc7, 0x62, 0x53, 0x58, 0x46, 0xc8, 0x34, 0x60,
	0xee, 0x6a, 0x2a, 0xf5, 0xa6, 0x5e, 0x96, 0x9b, 0x32, 0xd0, 0xd5, 0xd5, 0x2d, 0xb8, 0x25, 0xb2,
	0x43, 0x7b, 0x86, 0x43, 0xfd, 0x0d, 0xed, 0x24, 0xe6, 0xaa, 0x4e, 0xbf, 0xac, 0x19, 0x7e, 0x8c,
	0x4f, 0x8b, 0x6e, 0x45, 0x0f, 0xc1, 0xe8, 0xbb, 0xd2, 0xaf, 0xef, 0xcc, 0x4b, 0xd4, 0x77, 0xe5,
	0x38, 0x7d, 0x7b, 0x09, 0xce, 0x9f, 0x54, 0xc8, 0x5c, 0xee, 0x65, 0xf5, 0xe9, 0x3c, 0x7b, 0xd2,
	0x6d, 0x3c, 0xa3, 0x5d, 0xb7, 0x63, 0xd4, 0x5e, 0x19, 0xac, 0xb6, 0x7b, 0xd2, 0x4d, 0x3d, 0xa3,
	0xd7, 0xd3, 0x1e, 0xda, 0xd2, 0x9f, 0xbd, 0x8a, 0x7b, 0xc9, 0xfc, 0x6c, 0x25, 0x68, 0xf8, 0xce,
	0x1a, 0xb9, 0x28, 0xda, 0x75, 0xbf, 0xc9, 0xd3, 0xb6, 0xa2, 0x24, 0x70, 0xaf, 0xd2, 0x04, 0x2e,
	0xf1, 0x58, 0x18, 0x37, 0xda, 0xe7, 0x44, 0xbb, 0xfe, 0x58, 0xa1, 0x76, 0x11, 0xa4, 0x33, 0x20,
	0xf0, 0x74, 0xf8, 0x0e, 0x71, 0x32, 0x9e, 0x86, 0x70, 0xb7, 0x30, 0xcf, 0x9a, 0xd0, 0x7b, 0xf0,
	0x89, 0x9c, 0x62, 0x92, 0x26, 0xd4, 0xa6, 0x12, 0x0e, 0xde, 0x73, 0xe4, 0xab, 0x18, 0xfc, 0x55,
	0x85, 0x39, 0xa8, 0x4a, 0xce, 0x8b, 0x2c, 0x66, 0xd2, 0xdf, 0x4f, 0x39, 0x7b, 0x06, 0x47, 0xdb,
	0x10, 0x2f, 0x97, 0x3c, 0x48, 0x44, 0x8b, 0x49, 0xd8, 0x05, 0x8d, 0x7a, 0xf3, 0x00, 0xfa, 0x08,
	0x31, 0x78, 0xe1, 0x69, 0x4f, 0x23, 0x9c, 0x0f, 0xc9, 0xc2, 0x40, 0x11, 0xf5, 0x38, 0x0d, 0x0f,
	0x68, 0x04, 0xfb, 0xa2, 0x51, 0x6f, 0xae, 0x5f, 0xc2, 0x43, 0x04, 0x38, 0xeb, 0xe4, 0x62, 0x59,
	0xc0, 0x21, 0x93, 0xfb, 0x11, 0x0f, 0x0e, 0x0b, 0x2d, 0x4e, 0xe1, 0xe5, 0x13, 0x5b, 0xc6, 0xa7,
	0x1a, 0x94, 0xeb, 0xb1, 0x4a, 0x2e, 0x1c, 0x23, 0xc6, 0x68, 0x72, 0x5a, 0xb7, 0xf1, 0x00, 0x29,
	0x5a, 0x97, 0xa5, 0xdf, 0x1b, 0x25, 0xa3, 0xa5, 0xee, 0x73, 0xae, 0x90, 0xb3, 0x10, 0xa5, 0x96,
	0xfb, 0x3c, 0x95, 0x32, 0xa6, 0x26, 0x26, 0x32, 0xaa, 0x4a, 0xf7, 0x4c, 0xa1, 0xda, 0x43, 0xc6,
	0xe9, 0x61, 0x8e, 0x8a, 0xf0, 0xac, 0xe1, 0x15, 0x7d, 0x17, 0x21, 0x3d, 0x34, 0xc8, 0x08, 0xce,
	0x1a, 0xee, 0x92, 0xc9, 0x7d, 0xd6, 0xdc, 0xef, 0x85, 0x63, 0x0f, 0x4d, 0x28, 0x52, 0x19, 0xff,
	0x90, 0x5c, 0xe8, 0xbd, 0xdf, 0xd3, 0xc3, 0xaa, 0xfb, 0xa9, 0x74, 0xc5, 0xa7, 0x2c, 0xe3, 0x3a,
	0x19, 0x87, 0x0f, 0x09, 0x83, 0x38, 0x16, 0x7a, 0xd4, 0xbd, 0x6e, 0x0e, 0x57, 0x83, 0x68, 0x55,
	0x15, 0xe3, 0x40, 0xbb, 0x4b, 0x26, 0x01, 0x99, 0xa7, 0xd0, 0x20, 0x18, 0x3b, 0x61, 0x42, 0x91,
	0xcc, 0xf8, 0x41, 0xfc, 0x55, 0x32, 0x56, 0x04, 0xb6, 0x51, 0x1d, 0x6c, 0xea, 0xd1, 0xc8, 0x44,
	0xb5, 0x41, 0x83, 0x45, 0x32, 0xc2, 0x52, 0x3c, 0xb9, 0x81, 0x43, 0xac, 0x33, 0x78, 0x38, 0xc5,
	0x52, 0x45, 0x85, 0xe3, 0xab, 0x9b, 0x64, 0x02, 0x43, 0xfe, 0xb6, 0x92, 0x43, 0x78, 0x5e, 0x03,
	0x04, 0x4b, 0xcb, 0xdb, 0xc4, 0xb1, 0x6a, 0x35, 0xe7, 0x4f, 0x44, 0x47, 0xd5, 0x4d, 0xc5, 0xe6,
	0x08, 0x6a, 0x89, 0x8c, 0xb2, 0x54, 0xdf, 0x98, 0x81, 0xca, 0x87, 0x31, 0x76, 0xc5, 0x52, 0xb8,
	0x27, 0x03, 0xb5, 0x5f, 0xd3, 0xc7, 0x5e, 0x30, 0x6d, 0xf4, 0xb1, 0xd7, 0x48, 0x71, 0xea, 0x55,
	0xa3, 0x89, 0xc4, 0x53, 0xaf, 0x6f, 0x90, 0x79, 0x94, 0x24, 0xda, 0x75, 0x9c, 0xd4, 0xb6, 0xbe,
	0xa3, 0x78, 0x37, 0x06, 0x10, 0x35, 0x0d, 0xb0, 0xf4, 0xae, 0x92, 0xf3, 0x3d, 0xcc, 0x3d, 0xed,
	0x7c, 0x16, 0xbb, 0xb2, 0xc4, 0x5f, 0x6e, 0xf0, 0xdb, 0xc4, 0xc9, 0x99, 0x63, 0x26, 0xf4, 0xf9,
	0xe1, 0x18, 0x7e, 0xba, 0xa1, 0x6c, 0x32, 0x81, 0x27, 0x88, 0x5f, 0x23, 0xa8, 0x0b, 0x66, 0x42,
	0x95, 0x54, 0x1d, 0xc7, 0x4b, 0x43, 0x40, 0x86, 0x6c, 0x28, 0x4b, 0xcf, 0xfc, 0x23, 0x91, 0xad,
	0x47, 0xc9, 0x09, 0xeb, 0x23, 0x81, 0xb3, 0xac, 0xe1, 0x75, 0x32, 0x6e, 0x33, 0x83, 0x7e, 0x0e,
	0x0e, 0xb6, 0x82, 0x05, 0xb4, 0x5b, 0x21, 0xb3, 0x2c, 0xa9, 0xa7, 0xed, 0x24, 0xf2, 0x7b, 0x12,
	0xc2, 0xc0, 0x93, 0x1a, 0xf5, 0xa6, 0x35, 0xf9, 0x49, 0x29, 0x27, 0x4c, 0x99, 0x9d, 0x63, 0xf8,
	0xb0, 0xb6, 0x29, 0x34, 0x3b, 0x03, 0x99, 0xcd, 0x58, 0x6b, 0x05, 0x47, 0xac, 0xd5, 0x6e, 0xe1,
	0x90, 0x14, 0xec, 0x19, 0x05, 0x97, 0x63, 0xd4, 0x1b, 0xd3, 0x04, 0x35, 0x2e, 0x6b, 0xec, 0x19,
	0x75, 0x5c, 0x72, 0x1a, 0x97, 0x0b, 0x5c, 0xe4, 0x47, 0x3d, 0xf3, 0x53, 0xcd, 0x95, 0x46, 0xc0,
	0xd4, 0x34, 0xcc, 0x52, 0x38, 0x31, 0x45, 0xd4, 0x2c, 0xce, 0x15, 0x24, 0xed, 0xa6, 0x42, 0x56,
	0x35, 0x7e, 0x9e, 0x9c, 0xd1, 0x87, 0x88, 0xb8, 0x88, 0x8d, 0x7a, 0xf9, 0x6f, 0x88, 0x5a, 0xd3,
	0xcf, 0xe0, 0xa4, 0xcd, 0xcf, 0x41, 0x73, 0xd8, 0xab, 0x86, 0xb0, 0x6b, 0xc0, 0x37, 0x88, 0x3e,
	0x18, 0xf4, 0xc3, 0x34, 0x8e, 0x19, 0x64, 0x07, 0xcc, 0xa3, 0xf6, 0x58, 0xbe, 0x6a, 0x8a, 0xe1,
	0x96, 0x8f, 0x39, 0xb8, 0xcc, 0xb1, 0xe7, 0x50, 0xae, 0x26, 0x14, 0xe0, 0x87, 0xe4, 0x42, 0x98,
	0x26, 0x92, 0xa7, 0xb1, 0x2f, 0xcd, 0x64, 0xdd, 0xc7, 0x3f, 0x9c, 0x35, 0x9b, 0x94, 0xbb, 0x0b,
	0x38, 0x3e, 0x35, 0x6a, 0x0f, 0x67, 0x2f, 0x40, 0xf6, 0x10, 0xa1, 0xd6, 0x3b, 0x4b, 0x86, 0x9e,
	0x74, 0x65, 0x21, 0xe7, 0xd1, 0x16, 0xe7, 0x42, 0x70, 0x16, 0x96, 0xa4, 0x5c, 0x21, 0x67, 0x13,
	0x2a, 0x0f, 0x53, 0x7e, 0x60, 0x92, 0xdc, 0x2e, 0xe0, 0x64, 0xd4, 0xa5, 0x3a, 0xb9, 0xed, 0x22,
	0xc1, 0x2b, 0x4d, 0x7e, 0x23, 0x0e, 0x9a, 0xc2, 0xbd, 0x88, 0x46, 0x05, 0x8a, 0x1e, 0xa9, 0x12,
	0xe7, 0x1c, 0x19, 0x52, 0x96, 0x1c, 0xc9, 0x8b, 0xd8, 0xe6, 0x49, 0x9d, 0x23, 0x71, 0x9a, 0x9c,
	0x02, 0x62, 0xe4, 0x5e, 0x5a, 0xac, 0x5c, 0x9f, 0xf0, 0x5e, 0x57, 0x14, 0xc8, 0x78, 0x34, 0x77,
	0xa2, 0x24, 0x67, 0x54, 0xb8, 0x4b, 0xb8, 0x78, 0xea, 0xcb, 0x53, 0x50, 0x06, 0x59, 0xa4, 0xdd,
	0x24, 0xd4, 0x92, 0x2f, 0xeb, 0x2c, 0xd2, 0x6e, 0x12, 0xa2, 0xe8, 0x3b, 0x64, 0x32, 0x11, 0x1c,
	0x9c, 0x11, 0xfb, 0x02, 0xd8, 0x1b, 0xd8, 0xf0, 0x89, 0xe0, 0x3b, 0x19, 0xe5, 0xc5, 0xe5, 0xaf,
	0x7b, 0xfa, 0x92, 0x1e, 0x1c, 0x42, 0x87, 0x69, 0x46, 0x23, 0x38, 0xb9, 0x71, 0xaf, 0x14, 0x77,
	0xf4, 0xb6, 0x05, 0xaf, 0x01, 0xa5, 0xd6, 0x4d, 0xc2, 0xa5, 0xff, 0x53, 0x21, 0x67, 0xcb, 0xe1,
	0x7d, 0xe7, 0x12, 0x19, 0xc1, 0xff, 0xe8, 0x11, 0x13, 0x52, 0xe8, 0xa8, 0xe9, 0x30, 0x94, 0xad,
	0x43, 0x11, 0xdc, 0x27, 0x00, 0x88, 0x3e, 0x0a, 0x84, 0xb1, 0xa2, 0x63, 0xa8, 0xe3, 0x40, 0xc1,
	0xf4, 0x09, 0x28, 0x2f, 0x04, 0x6a, 0xdc, 0xab, 0x96, 0x40, 0x0d, 0xb9, 0x49, 0x26, 0x72, 0x81,
	0x19, 0xa7, 0x0d, 0x5f, 0x50, 0xa9, 0x83, 0xa7, 0x63, 0x46, 0x9e, 0x2a, 0xaf, 0x51, 0x08, 0x74,
	0x97, 0xb0, 0x7a, 0x01, 0x1a, 0xb1, 0x71, 0xaa, 0xdf, 0x11, 0xa4, 0x13, 0x36, 0x84, 0x5e, 0x79,
	0x90, 0x55, 0x67, 0x6b, 0x88, 0xa5, 0xff, 0xfd, 0x7e, 0x91, 0xd3, 0xab, 0x9c, 0xac, 0x59, 0xb8,
	0xab, 0x62, 0x65, 0x0b, 0x9f, 0x0a, 0xf0, 0xba, 0xc7, 0x37, 0xc9, 0x92, 0x9d, 0x12, 0x96, 0x27,
	0x3c, 0xc4, 0x34, 0x94, 0x29, 0x37, 0x67, 0xd8, 0xd8, 0x02, 0x17, 0x8a, 0xac, 0x30, 0x93, 0xe9,
	0x80, 0x30, 0x7d, 0x9e, 0x7d, 0x85, 0x8c, 0x31, 0xe1, 0xc7, 0xb4, 0x19, 0x84, 0x5d, 0x3f, 0xa3,
	0x3e, 0x97, 0xba, 0x49, 0x46, 0x98, 0xd8, 0x84, 0xd2, 0x5d, 0xea, 0x49, 0xe7, 0x6d, 0x48, 0xe5,
	0x2a, 0xb2, 0x93, 0x1b, 0x98, 0x5f, 0x10, 0x53, 0xdd, 0x30, 0x93, 0x45, 0x35, 0xd5, 0xc6, 0x2a,
	0x92, 0x9c, 0x3d, 0x72, 0x8d, 0x09, 0x5f, 0xa4, 0x0d, 0x35, 0xea, 0xcc, 0x1d, 0x7c, 0x73, 0x37,
	0x0c, 0x2d, 0x1d, 0x1c, 0x51, 0x69, 0x9f, 0x0a, 0xd2, 0x31, 0x6a, 0x69, 0x43, 0x7a, 0x65, 0xf0,
	0x06, 0x62, 0xab, 0x08, 0x75, 0x76, 0xc8, 0x15, 0x26, 0xe0, 0x20, 0x6c, 0xa0, 0xe4, 0x20, 0x3e,
	0x0c, 0xba, 0xc2, 0x4f, 0x13, 0x68, 0x64, 0x48, 0x1b, 0x79, 0x22, 0xe8, 0x00, 0xb1, 0x55, 0x00,
	0xee, 0x80, 0x81, 0xe0, 0xb4, 0x95, 0x76, 0xa8, 0x9f, 0x71, 0xd6, 0x09, 0xf0, 0xb6, 0x56, 0x83,
	0xa7, 0x2d, 0x6d, 0x87, 0x4d, 0x08, 0x77, 0x1e, 0x51, 0xbb, 0x08, 0xaa, 0x8a, 0x47, 0x3c, 0x6d,
	0xa1, 0x19, 0x16, 0xce, 0x8f, 0x92, 0xdb, 0xfd, 0x32, 0x68, 0x22, 0x19, 0x57, 0xff, 0xc1, 0x35,
	0x97, 0x92, 0x44, 0x8c, 0xf2, 0x5e, 0xed, 0x91, 0xb8, 0x0e, 0x0c, 0x55, 0xc0, 0xdb, 0xd2, 0x3f,
	0x21, 0x57, 0x8f, 0xd1, 0xb0, 0xbc, 0x62, 0x60, 0x44, 0x78, 0xc8, 0xbb, 0x34, 0x40, 0xd3, 0x0d,
	0x7b, 0xdd, 0x10, 0xce, 0x01, 0x59, 0x7e, 0x21, 0x85, 0x7b, 0x2b, 0x20, 0x50, 0xc1, 0x9d, 0xe7,
	0x28, 0xde, 0x53, 0xd9, 0x87, 0x64, 0x21, 0xdf, 0xf0, 0xc0, 0x99, 0x23, 0x76, 0x55, 0xe4, 0xeb,
	0x13, 0xcf, 0x61, 0xbc, 0x5c, 0x64, 0x30, 0x4f, 0x73, 0xc8, 0xda, 0x06, 0x1e, 0x7f, 0xee, 0x92,
	0x2b, 0xb9, 0x00, 0x4e, 0x31, 0x57, 0x7c, 0xa0, 0xa4, 0x11, 0xfc, 0x7e, 0x03, 0xf6, 0x34, 0xb6,
	0x5f, 0xe2, 0x1b, 0xe4, 0x6c, 0xca, 0xb9, 0xde, 0xc1, 0xc0, 0x1c, 0x1b, 0xc5, 0x61, 0x9f, 0x72,
	0x0e, 0x1b, 0x16, 0x98, 0x69, 0x57, 0xc9, 0x58, 0x81, 0x62, 0x49, 0x44, 0x8f, 0xb4, 0x33, 0x33,
	0x6a, 0x60, 0x1b, 0xaa, 0x50, 0x0d, 0x21, 0x26, 0x7c, 0x05, 0xe5, 0x69, 0x2a, 0x07, 0x25, 0xed,
	0x8e, 0x99, 0x44, 0xcf, 0x1d, 0xce, 0xbd, 0x34, 0x95, 0xfd, 0x69, 0xbb, 0x97, 0xc9, 0x68, 0x91,
	0x51, 0x12, 0x34, 0x18, 0xf8, 0x32, 0x43, 0xde, 0x48, 0x5e, 0x58, 0x6d, 0x30, 0xb5, 0x3a, 0x97,
	0x40, 0x3e, 0xa7, 0x29, 0x6f, 0x82, 0xf3, 0x32, 0xe4, 0x4d, 0xd8, 0x50, 0x4f, 0x11, 0x9c, 0xfb,
	0x64, 0xba, 0x8c, 0x37, 0x87, 0xcc, 0x0e, 0x4e, 0x5b, 0x9b, 0xc3, 0x9c, 0x35, 0xdf, 0x21, 0x0e,
	0x4d, 0xc2, 0x20, 0x13, 0xed, 0x18, 0x5b, 0x17, 0xae, 0x04, 0x4e, 0xea, 0x4b, 0x8e, 0x36, 0x05,
	0x8e, 0xbd, 0x6e, 0x92, 0xa2, 0x5e, 0x9f, 0x4b, 0x44, 0x4f, 0xe9, 0x85, 0xdb, 0x10, 0x3c, 0x09,
	0xd8, 0xc7, 0xe4, 0x52, 0x8f, 0x3a, 0xb4, 0xa1, 0x36, 0xaa, 0x3e, 0x6b, 0x65, 0xb9, 0x6a, 0xd3,
	0x78, 0xe3, 0xa2, 0xa4, 0x1a, 0x6d, 0x3c, 0xe5, 0x8d, 0x8d, 0x56, 0x66, 0x74, 0x7c, 0x42, 0x6e,
	0x14, 0x82, 0x68, 0x27, 0xf3, 0x93, 0xce, 0xf2, 0xb1, 0x02, 0x67, 0x40, 0xe0, 0x52, 0xce, 0xb0,
	0xde, 0xc9, 0xb6, 0x3b, 0xcb, 0x2f, 0x28, 0x76, 0xe5, 0x58, 0xb1, 0xb3, 0x83, 0xc4, 0xae, 0x0c,
	0x12, 0xbb, 0x42, 0xdc, 0xf2, 0x67, 0xd3, 0xd4, 0xe7, 0xe0, 0x8a, 0x74, 0xc1, 0x67, 0x1a, 0xf2,
	0xa6, 0xec, 0xaf, 0x5d, 0x4f, 0x3d, 0xe5, 0x82, 0x74, 0x9d, 0x77, 0xc8, 0x9c, 0x36, 0x67, 0xca,
	0xdc, 0x25, 0xf4, 0x48, 0xed, 0x05, 0x33, 0x5c, 0xe8, 0xc0, 0x8f, 0x1a, 0xf2, 0xa6, 0x11, 0xf0,
	0x44, 0xd0, 0x6d, 0x7a, 0x24, 0x3f, 0x4a, 0x33, 0x58, 0xec, 0xf0, 0x6e, 0x78, 0x22, 0x21, 0x7d,
	0xb6, 0x9d, 0x30, 0xd9, 0x55, 0x7e, 0x8b, 0x31, 0xdf, 0xe0, 0x56, 0x0d, 0x79, 0xb3, 0x0a, 0xb1,
	0x6a, 0x00, 0x7b, 0xa9, 0x31, 0xe0, 0xce, 0x23, 0xb2, 0x08, 0xcc, 0xb8, 0x68, 0x0d, 0x16, 0x71,
	0x0e, 0x3b, 0x49, 0xe1, 0x1e, 0x2b, 0xd8, 0x20, 0x39, 0x9b, 0xe4, 0x32, 0xc8, 0xa1, 0x47, 0x92,
	0x26, 0x11, 0x8d, 0x8e, 0x11, 0xb5, 0x80, 0x59, 0x69, 0x0a, 0xba, 0xae, 0x91, 0x83, 0xa4, 0x3d,
	0x20, 0xf3, 0xf9, 0xfa, 0x63, 0x62, 0x1c, 0x26, 0x83, 0x8a, 0x82, 0xfb, 0x35, 0xe4, 0xb9, 0x06,
	0xb1, 0x86, 0x00, 0x93, 0x42, 0x45, 0x75, 0x12, 0x5f, 0xca, 0x1b, 0x78, 0x67, 0xf7, 0x82, 0x49,
	0xe2, 0xdb, 0xe1, 0x0d, 0xf3, 0xd8, 0x83, 0x5a, 0x55, 0xd0, 0xf1, 0x8e, 0x68, 0x83, 0x72, 0x35,
	0x6b, 0x2f, 0xea, 0x23, 0x53, 0x81, 0x96, 0x6c, 0x4d, 0x97, 0x3b, 0x6f, 0x91, 0xe9, 0x42, 0x5a,
	0xe4, 0x8b, 0x70, 0x9f, 0x46, 0xed, 0x98, 0x46, 0xe0, 0x8d, 0x41, 0x62, 0x33, 0xca, 0x8d, 0x6a,
	0x86, 0x62, 0xbd, 0x0f, 0xa1, 0x6d, 0x0e, 0x5e, 0x07, 0xbe, 0x64, 0xbf, 0x0f, 0x81, 0x86, 0x07,
	0x2f, 0x04, 0xdf, 0x26, 0x4e, 0x83, 0xc5, 0x92, 0x96, 0xad, 0x0f, 0x7a, 0x6d, 0xe3, 0x48, 0xb1,
	0x0c, 0xd0, 0x5d, 0x32, 0x59, 0xa8, 0x9f, 0xef, 0xa4, 0xc1, 0x85, 0x1b, 0xf2, 0x26, 0x8c, 0xfe,
	0xf9, 0xfe, 0x59, 0x4d, 0xda, 0x02, 0x1f, 0xd3, 0xa0, 0xc3, 0x92, 0x26, 0x38, 0x72, 0x43, 0xde,
	0x98, 0x41, 0x6f, 0x62, 0xb1, 0x5a, 0xfb, 0x3b, 0x59, 0x1e, 0x05, 0x69, 0xd2, 0x24, 0xbf, 0x1c,
	0x75, 0x05, 0x8d, 0x48, 0x27, 0xd3, 0x01, 0x90, 0xc7, 0x34, 0x31, 0x57, 0xa2, 0x1e, 0x92, 0x0b,
	0x3d, 0x4c, 0xda, 0x51, 0xce, 0x99, 0xaf, 0xa2, 0x45, 0xb4, 0x99, 0xb5, 0xa3, 0x6c, 0x64, 0xe0,
	0x3b, 0x08, 0x41, 0x14, 0xc1, 0x72, 0x04, 0x2d, 0xad, 0x7c, 0x4f, 0x30, 0x3d, 0x41, 0xec, 0x5e,
	0x33, 0xef, 0x20, 0x54, 0x11, 0xa1, 0xda, 0x7b, 0xa7, 0xa0, 0x3b, 0xab, 0x60, 0x94, 0x0d, 0xbb,
	0xbe, 0xe3, 0x5d, 0x92, 0x70, 0xdd, 0xa4, 0x65, 0x6a, 0x09, 0xfa, 0xa6, 0xb7, 0x2d, 0xc4, 0x7e,
	0x93, 0xc5, 0xe4, 0x2c, 0xdf, 0x28, 0x67, 0xe7, 0x9a, 0x4c, 0xe5, 0x19, 0x72, 0xea, 0x50, 0x15,
	0x49, 0xf7, 0x26, 0xe6, 0x07, 0xe3, 0x2f, 0xb5, 0x75, 0xb4, 0xb2, 0xf6, 0x63, 0xd6, 0x62, 0xd2,
	0xbd, 0x85, 0x5b, 0xc7, 0x96, 0x49, 0xd4, 0xdf, 0x54, 0xa5, 0xce, 0x03, 0x72, 0x4e, 0x4d, 0x74,
	0x0b, 0x7d, 0x18, 0xf0, 0x84, 0x25, 0x4d, 0x3f, 0x4d, 0xe2, 0xae, 0x7b, 0x1b, 0xa7, 0x6d, 0x5b,
	0xd0, 0x3c, 0xc1, 0xff, 0x53, 0xa4, 0xef, 0x24, 0x71, 0x57, 0x35, 0xb9, 0xc5, 0x69, 0x6e, 0x1f,
	0xd1, 0x23, 0xc9, 0x03, 0xb8, 0x7f, 0x24, 0xdc, 0x3b, 0xd8, 0xe4, 0x79, 0xad, 0x6b, 0x88, 0x59,
	0x57, 0x90, 0x5d, 0x85, 0x50, 0x1b, 0x1d, 0x4b, 0x06, 0x3d, 0x0a, 0x29, 0x8d, 0x72, 0x51, 0x28,
	0xe4, 0x2e, 0x36, 0x5a, 0x2e, 0x64, 0x1d, 0x40, 0x5a, 0x14, 0x4a, 0xf9, 0x90, 0x2c, 0x58, 0x52,
	0xd4, 0x46, 0x49, 0x40, 0x4e, 0x66, 0x46, 0x79, 0xa8, 0x66, 0xdf, 0x3d, 0x9d, 0x20, 0x69, 0x44,
	0xec, 0x19, 0xc4, 0x2e, 0x02, 0xd4, 0x0e, 0xdf, 0x12, 0x50, 0xba, 0x54, 0xfc, 0xa6, 0x4e, 0xcc,
	0x34, 0xbc, 0xf6, 0xd5, 0x62, 0xb5, 0x2f, 0x84, 0x42, 0x2a, 0xfc, 0x20, 0x0c, 0x69, 0x26, 0x69,
	0xe4, 0xbe, 0xa5, 0xf7, 0x85, 0x9a, 0x50, 0xd5, 0xe5, 0x90, 0xfd, 0x61, 0xc0, 0x6a, 0x5f, 0x42,
	0xcd, 0xbb, 0x39, 0x67, 0x4d, 0x71, 0x0d, 0x4a, 0xd5, 0xd7, 0xe4, 0x40, 0x13, 0x82, 0x4b, 0xe0,
	0xd1, 0x9a, 0x86, 0x72, 0x72, 0xe0, 0x35, 0x9d, 0x51, 0x6f, 0xce, 0x60, 0x4c, 0x04, 0x2e, 0xd9,
	0x4e, 0xe5, 0x23, 0x05, 0x28, 0xd5, 0x14, 0xd1, 0x84, 0xd1, 0x48, 0x3f, 0xb1, 0x93, 0xd7, 0xb4,
	0x06, 0xa5, 0xce, 0xbb, 0x64, 0xae, 0x07, 0x08, 0x69, 0xde, 0x69, 0xcc, 0xc2, 0xae, 0x7e, 0x79,
	0x67, 0xa6, 0xcc, 0xb2, 0x9d, 0xee, 0x02, 0x75, 0x10, 0x2b, 0x97, 0xaa, 0xc1, 0xd5, 0x68, 0x5b,
	0x19, 0xc4, 0xea, 0xc9, 0x5d, 0xa0, 0xaa, 0xb5, 0xa2, 0x97, 0x55, 0x59, 0x36, 0x5d, 0xed, 0xd7,
	0xf3, 0x17, 0x5c, 0x2c, 0xde, 0x1d, 0xde, 0xd0, 0xf5, 0x2e, 0x93, 0x99, 0x5e, 0x66, 0xcd, 0x88,
	0x6f, 0xef, 0x4c, 0x95, 0x19, 0x35, 0xd7, 0x5d, 0x32, 0x89, 0xf6, 0xcf, 0x4f, 0x1b, 0x7e, 0x9d,
	0x0a, 0x89, 0x43, 0x0b, 0x5f, 0xe1, 0x99, 0x40, 0xd2, 0x4e, 0xe3, 0xa1, 0x21, 0xa8, 0x2e, 0x28,
	0xe3, 0xf3, 0x57, 0x84, 0x90, 0xf1, 0x3d, 0xfd, 0x8a, 0x80, 0xc5, 0xb8, 0x6e, 0x03, 0x9c, 0x7b,
	0x64, 0xb2, 0x18, 0x19, 0x66, 0xa9, 0x8d, 0xf4, 0xeb, 0x3c, 0x4e, 0x3e, 0x36, 0x72, 0x4a, 0xe9,
	0xbb, 0xea, 0xd4, 0xe6, 0x79, 0x50, 0xfe, 0xae, 0x87, 0xd4, 0xe2, 0xb2, 0xab, 0xb1, 0x12, 0xec,
	0xdf, 0x2f, 0x57, 0x63, 0x65, 0xd4, 0x43, 0x08, 0xbc, 0x77, 0x6c, 0xe9, 0xe7, 0x79, 0x26, 0xfa,
	0x46, 0x94, 0xda, 0x81, 0x33, 0x7d, 0x59, 0x55, 0x75, 0x91, 0xd9, 0x83, 0x7d, 0x68, 0x96, 0xa9,
	0x5d, 0x4a, 0xf9, 0x0e, 0xcf, 0x37, 0x60, 0xb8, 0x6b, 0x2b, 0x74, 0xcf, 0x57, 0x2c, 0x78, 0x97,
	0x07, 0x76, 0x6d, 0x85, 0xf2, 0x7a, 0xc5, 0x72, 0x3e, 0x20, 0x0b, 0xac, 0x48, 0x89, 0x29, 0x16,
	0x39, 0x53, 0x59, 0xd5, 0x98, 0x5d, 0x93, 0x17, 0xa3, 0x19, 0x4d, 0xa5, 0xef, 0xc2, 0x0b, 0x1e,
	0x3d, 0x95, 0x6a, 0x71, 0xfa, 0x7d, 0x9e, 0x99, 0x9e, 0x7a, 0xb5, 0x24, 0xfd, 0xd6, 0x49, 0xa9,
	0x6a, 0x63, 0xb6, 0x4d, 0xed, 0xab, 0xc6, 0x64, 0x5b, 0xb5, 0xeb, 0x7f, 0x8d, 0x02, 0xc6, 0xee,
	0xe7, 0x0a, 0xf4, 0x66, 0x36, 0xe8, 0x17, 0x74, 0xce, 0xd9, 0x5a, 0x3c, 0x2e, 0x27, 0x36, 0x68,
	0x8f, 0xbe, 0x2f, 0x27, 0x02, 0x5f, 0xc1, 0x68, 0xc4, 0x41, 0x13, 0x5e, 0xd3, 0x01, 0x8f, 0xbe,
	0x87, 0x15, 0xae, 0xd7, 0x3f, 0x8a, 0x83, 0xa6, 0x79, 0xdf, 0xc0, 0x7c, 0x4e, 0x9f, 0x30, 0xf3,
	0x4d, 0x8f, 0xf2, 0xf7, 0x0d, 0x34, 0xb4, 0x47, 0xa2, 0xf9, 0xb0, 0x4f, 0xc8, 0x55, 0x5c, 0xd0,
	0xfc, 0x62, 0x41, 0xb4, 0xd2, 0xfc, 0xad, 0x31, 0xfa, 0xd8, 0xbc, 0xe8, 0x50, 0x8d, 0xc0, 0x24,
	0xe7, 0xfd, 0x03, 0x48, 0x6b, 0xc0, 0x6e, 0x81, 0x8a, 0xc7, 0x8a, 0xcc, 0x13, 0xa3, 0x3e, 0x42,
	0x1f, 0xed, 0x18, 0x81, 0x79, 0x86, 0xd4, 0xa7, 0xe4, 0x86, 0x2d, 0xae, 0xd4, 0x79, 0x7d, 0x4a,
	0xe2, 0xcb, 0x39, 0x6f, 0xe4, 0x32, 0xed, 0x6e, 0xec, 0xd5, 0xb3, 0x06, 0xa1, 0x84, 0x2f, 0x13,
	0x9c, 0xab, 0x8a, 0x4f, 0xea, 0x2c, 0x1d, 0x2f, 0x36, 0xd7, 0xf6, 0x12, 0x24, 0x14, 0x16, 0x4b,
	0xcb, 0xc7, 0x18, 0x41, 0xe7, 0xe5, 0x64, 0x15, 0x0c, 0x2b, 0x95, 0x80, 0x9b, 0xe6, 0x14, 0x24,
	0x0c, 0xe2, 0x9e, 0xd4, 0x96, 0x9e, 0xbc, 0x96, 0xb4, 0x2d, 0xe1, 0x8d, 0x9c, 0x51, 0x6f, 0x5c,
	0xd8, 0x79, 0x2d, 0x69, 0x1b, 0x16, 0x39, 0xce, 0xea, 0x7e, 0xd6, 0xe6, 0x4d, 0x6a, 0xc0, 0x3a,
	0xc5, 0x6a, 0x1b, 0x6d, 0x0c, 0x67, 0xf5, 0x5d, 0x45, 0xd5, 0x1c, 0x98, 0x6d, 0xb5, 0x45, 0x2e,
	0xe7, 0x1e, 0x89, 0x32, 0x23, 0x94, 0xab, 0xc1, 0x65, 0xbd, 0x6f, 0x82, 0x09, 0x1f, 0xf8, 0x56,
	0xce, 0xa2, 0x81, 0xee, 0x1a, 0x64, 0xf1, 0xb0, 0x09, 0xe6, 0x81, 0x34, 0xc8, 0x5b, 0x71, 0x9a,
	0x34, 0xe1, 0x5d, 0x95, 0x68, 0xe0, 0x80, 0x8f, 0xf5, 0x3d, 0x6b, 0x6b, 0x37, 0x8b, 0x6f, 0xea,
	0xdc, 0x52, 0x8c, 0x9b, 0x03, 0x06, 0x2c, 0xa4, 0xf0, 0x28, 0xa5, 0xad, 0xed, 0xed, 0xb7, 0xc8,
	0xad, 0x17, 0xac, 0x07, 0x1c, 0xf4, 0x4f, 0xa0, 0x05, 0xae, 0x3c, 0xb7, 0x06, 0x70, 0xde, 0x7f,
	0x8c, 0xdc, 0x79, 0x41, 0xd9, 0xe8, 0x15, 0xc0, 0xc3, 0x3d, 0xa3, 0xde, 0xb5, 0xe7, 0x4a, 0x47,
	0x67, 0xc1, 0x09, 0xc9, 0xbd, 0x2f, 0x93, 0x3f, 0x68, 0x14, 0xe2, 0x33, 0x3f, 0x37, 0x8f, 0xab,
	0x61, 0xc0, 0x68, 0xac, 0x7f, 0x79, 0x25, 0xd6, 0x47, 0xe4, 0x95, 0xec, 0xc1, 0x67, 0xdc, 0x78,
	0xee, 0x67, 0xe4, 0x75, 0x04, 0xe4, 0xee, 0x80, 0xb1, 0x63, 0x55, 0xdb, 0x37, 0x8c, 0x9e, 0xc0,
	0x77, 0xdc, 0xe8, 0x1b, 0x46, 0x9b, 0xa6, 0xce, 0xde, 0xf1, 0xf4, 0x1d, 0x72, 0xdb, 0x7a, 0xcf,
	0xe6, 0x39, 0x8d, 0x16, 0x53, 0x78, 0x76, 0x68, 0xc8, 0xbb, 0x56, 0x3c, 0x75, 0xf3, 0x25, 0x0d,
	0x16, 0x53, 0xe7, 0x33, 0xf2, 0xf6, 0x0b, 0x89, 0xd7, 0x0d, 0xd5, 0x0a, 0x98, 0xf2, 0x8f, 0xe1,
	0xd1, 0xa2, 0x51, 0xef, 0xce, 0xf3, 0x6a, 0xc1, 0xc6, 0xd2, 0x4c, 0xce, 0x3b, 0xc4, 0x2d, 0x3d,
	0x26, 0x63, 0x67, 0x8a, 0xfe, 0x30, 0xba, 0x54, 0xdc, 0x7a, 0x3d, 0xc6, 0xca, 0x14, 0x7d, 0x93,
	0x4c, 0xf5, 0x72, 0xc2, 0xa8, 0xc6, 0xd7, 0x8e, 0x9c, 0x32, 0x17, 0x0c, 0xe1, 0x65, 0x32, 0x63,
	0x9e, 0xac, 0x91, 0x01, 0x6f, 0x52, 0x99, 0xef, 0x36, 0xbe, 0xa5, 0x6d, 0x01, 0x52, 0xf7, 0x80,
	0x68, 0xb6, 0x1c, 0xd7, 0xc8, 0x98, 0xe1, 0x32, 0xf0, 0x6f, 0x9b, 0x13, 0x50, 0x28, 0x36, 0xc0,
	0xfb, 0x64, 0xda, 0x00, 0x83, 0xf0, 0x80, 0x46, 0x39, 0x1c, 0x9f, 0x32, 0x9a, 0xd4, 0xc4, 0xaa,
	0xa2, 0x19, 0x1e, 0xdc, 0xe4, 0x6a, 0x1f, 0x1c, 0x3c, 0x42, 0xd5, 0xf9, 0x89, 0x84, 0x27, 0x8e,
	0x60, 0x93, 0x8b, 0x1e, 0xb8, 0x72, 0x06, 0x91, 0xa2, 0xbe, 0x5b, 0x01, 0x69, 0x02, 0xe7, 0x09,
	0x45, 0x6b, 0xe1, 0xab, 0x47, 0x4e, 0xca, 0x1b, 0xeb, 0x48, 0xca, 0x5b, 0x0a, 0xbd, 0x85, 0xbe,
	0xfd, 0x3c, 0x36, 0x97, 0x6f, 0xbc, 0x85, 0xde, 0xed, 0x7c, 0x4d, 0x6f, 0x12, 0xb0, 0x91, 0xd1,
	0xe1, 0xb4, 0x34, 0xd5, 0x2f, 0x22, 0x61, 0x1f, 0xa0, 0xcb, 0x99, 0xab, 0xea, 0x5c, 0x25, 0x63,
	0x25, 0x36, 0x96, 0xe8, 0x07, 0x90, 0x46, 0x2d, 0xf8, 0x46, 0x02, 0xc7, 0xcb, 0x36, 0x4e, 0x99,
	0xf2, 0xba, 0xce, 0x8a, 0x28, 0x80, 0x3b, 0x6d, 0x38, 0xa8, 0x2f, 0x21, 0xfb, 0xa3, 0x13, 0xf8,
	0x82, 0xd1, 0x39, 0x8b, 0xaf, 0x2f, 0x40, 0x81, 0x2b, 0x5c, 0x3e, 0xb6, 0x21, 0x71, 0x57, 0x79,
	0x84, 0x6a, 0x51, 0x30, 0x41, 0x58, 0xed, 0x59, 0x47, 0x66, 0x85, 0x33, 0xb1, 0x91, 0xf5, 0x7a,
	0x33, 0xfb, 0x14, 0xb1, 0x3a, 0xf2, 0xaa, 0xfd, 0x6c, 0x7c, 0x11, 0x69, 0xb0, 0xd0, 0xb4, 0x2d,
	0x4b, 0x52, 0xa9, 0x09, 0xc1, 0x0f, 0x90, 0xba, 0xa3, 0xb1, 0x5a, 0xec, 0x2d, 0x08, 0x96, 0x04,
	0xc2, 0x4f, 0x3b, 0x94, 0x73, 0x16, 0x51, 0x38, 0x22, 0x69, 0x98, 0xf0, 0x41, 0x55, 0xec, 0xe8,
	0xf2, 0x1a, 0x95, 0xce, 0x4d, 0x04, 0x43, 0x2e, 0x0a, 0xbc, 0x14, 0x0a, 0xe0, 0xa6, 0xc9, 0x34,
	0x84, 0xb0, 0x7e, 0x55, 0x6c, 0x24, 0x0a, 0x7b, 0x83, 0x4c, 0xd8, 0x40, 0x3c, 0x5f, 0xda, 0xc7,
	0x11, 0x1d, 0x18, 0x20, 0x9e, 0x2e, 0x3d, 0x24, 0x17, 0x4c, 0x98, 0xb5, 0x11, 0xb4, 0x58, 0xdc,
	0xb5, 0xcd, 0x81, 0xf5, 0x72, 0xd1, 0xbc, 0x46, 0x3d, 0x02, 0x50, 0x3e, 0xf1, 0x61, 0xbd, 0x7e,
	0x97, 0xcc, 0xeb, 0x48, 0x9c, 0x76, 0xd1, 0x58, 0x82, 0x07, 0x84, 0xb0, 0xdd, 0xfe, 0x0c, 0x03,
	0x6c, 0x34, 0xf5, 0xcc, 0x68, 0xdd, 0x48, 0x3c, 0x1a, 0x44, 0xb0, 0xd9, 0xbe, 0x4c, 0x46, 0xcb,
	0x13, 0x09, 0xdf, 0x35, 0x1a, 0x09, 0xec, 0x19, 0xf4, 0x26, 0x99, 0xc2, 0x9d, 0x65, 0xcf, 0xa4,
	0xc3, 0x17, 0x8d, 0x1c, 0xa4, 0x95, 0xe6, 0xdc, 0x3d, 0x32, 0x99, 0xb6, 0x25, 0x64, 0xee, 0x2a,
	0x1b, 0x6c, 0x18, 0x5a, 0x7a, 0xfe, 0x14, 0x24, 0xc3, 0xb0, 0x42, 0x66, 0x07, 0x30, 0xf8, 0xad,
	0xe0, 0x48, 0x3f, 0x61, 0x34, 0xdd, 0xcf, 0xb4, 0x15, 0x1c, 0x39, 0x7f, 0x51, 0x21, 0x4b, 0xf6,
	0x71, 0xce, 0x31, 0xf9, 0xdb, 0xe9, 0xcb, 0xbc, 0x39, 0x6b, 0x5f, 0x31, 0xf2, 0x2e, 0xe6, 0x4f,
	0xde, 0x36, 0x76, 0x07, 0xe6, 0x72, 0x63, 0x44, 0x2f, 0x60, 0x90, 0xe0, 0x2e, 0xe1, 0xdd, 0x24,
	0x88, 0xe8, 0x55, 0x59, 0x33, 0xab, 0x41, 0x5e, 0xf0, 0xa8, 0xf2, 0xbe, 0x65, 0x6e, 0xb6, 0x3e,
	0xd7, 0x69, 0x15, 0xc2, 0x93, 0xc6, 0x5e, 0xdd, 0x21, 0x4e, 0x7f, 0x70, 0xd2, 0xe5, 0x8b, 0xaf,
	0x42, 0xa8, 0xbb, 0x37, 0x18, 0xa9, 0x2d, 0x62, 0x21, 0xd2, 0xd7, 0x29, 0xd6, 0xf0, 0x26, 0x12,
	0x58, 0xc4, 0x5c, 0x74, 0x0d, 0x29, 0xce, 0x03, 0x32, 0x3f, 0x20, 0xfc, 0x69, 0xf8, 0x24, 0xd4,
	0xe4, 0xf6, 0xd5, 0x64, 0xb8, 0x6f, 0x13, 0x07, 0x3d, 0x16, 0x3f, 0x3d, 0x2c, 0xc2, 0x6e, 0x6d,
	0xdc, 0xee, 0x21, 0x65, 0xe7, 0x30, 0xb1, 0x92, 0xb8, 0x05, 0x8d, 0x29, 0x1e, 0xa2, 0xe3, 0xe3,
	0x7e, 0xca, 0x0f, 0xa5, 0x31, 0x6b, 0x32, 0xb5, 0xd4, 0x76, 0x70, 0xc7, 0x92, 0x63, 0xb6, 0x0c,
	0x64, 0x5d, 0x23, 0x9c, 0x2b, 0xe4, 0x6c, 0xd0, 0x28, 0x25, 0xa3, 0x1d, 0xa2, 0x69, 0xc4, 0x52,
	0x13, 0xcf, 0xbe, 0x4b, 0x26, 0x35, 0xac, 0x94, 0x8f, 0x76, 0xa4, 0x4f, 0x21, 0x1a, 0xbd, 0x09,
	0x69, 0x6f, 0x92, 0x29, 0x8d, 0x2f, 0xa7, 0xa4, 0x75, 0xb1, 0xd9, 0x90, 0x56, 0xca, 0x49, 0x53,
	0x1f, 0xde, 0xe8, 0xcb, 0x4a, 0x7b, 0xa6, 0x3f, 0xbc, 0xd1, 0x93, 0x96, 0xd6, 0xb3, 0xe3, 0x83,
	0xb0, 0x47, 0x90, 0xa8, 0x0e, 0xd2, 0x27, 0xeb, 0xf0, 0x72, 0x52, 0x79, 0xc7, 0xb7, 0x6b, 0x30,
	0xdb, 0x08, 0xd1, 0x46, 0x0d, 0x76, 0x40, 0xfa, 0x8a, 0xbb, 0x94, 0x1c, 0x9e, 0x4d, 0x02, 0xa3,
	0xa6, 0x76, 0x3c, 0x78, 0xd7, 0x5c, 0x4a, 0x0e, 0xd9, 0xd3, 0xad, 0x2c, 0x05, 0xbf, 0x8c, 0xc9,
	0x70, 0x5f, 0xf9, 0x18, 0x3f, 0xa1, 0xa1, 0x50, 0x5e, 0x33, 0xc5, 0x6a, 0x8c, 0x69, 0x28, 0xa7,
	0xc5, 0x8a, 0xf0, 0x93, 0x3a, 0x32, 0x0b, 0x14, 0xaf, 0x20, 0xa8, 0x4e, 0xec, 0x87, 0x5b, 0xb5,
	0xfc, 0x94, 0xde, 0x76, 0xf6, 0x32, 0x96, 0x2a, 0x2c, 0x9a, 0x02, 0xae, 0xa1, 0x06, 0xcd, 0xfc,
	0xbd, 0xa3, 0xf1, 0x9c, 0xf4, 0x74, 0xd9, 0x9c, 0xea, 0xdb, 0xf0, 0x15, 0x0d, 0xff, 0xe9, 0x3e,
	0xf8, 0x0a, 0xc2, 0x3f, 0x21, 0x57, 0x0a, 0x38, 0xee, 0x8d, 0x20, 0xab, 0x82, 0x46, 0xfa, 0x20,
	0xba, 0x9d, 0x30, 0xd5, 0x4c, 0xf8, 0xa4, 0xd1, 0x90, 0x57, 0x1c, 0xf8, 0xc0, 0xc9, 0xc4, 0x26,
	0x62, 0xe1, 0x2c, 0xfa, 0x09, 0x22, 0x97, 0x7e, 0xa9, 0x42, 0xce, 0x98, 0x37, 0x12, 0x9c, 0x9f,
	0xa9, 0xd8, 0x69, 0x54, 0xc3, 0xf7, 0x5b, 0x2f, 0x2f, 0xa5, 0x50, 0x99, 0x1d, 0x9d, 0xb5, 0xf5,
	0x7f, 0xcd, 0x55, 0x84, 0xfc, 0x41, 0x11, 0xe7, 0xc3, 0xd2, 0x03, 0x5b, 0xc5, 0xcb, 0x2e, 0xfa,
	0x69, 0x11, 0x7d, 0x8b, 0x6e, 0xae, 0x74, 0x61, 0xcd, 0x7e, 0x7b, 0x44, 0x99, 0xea, 0xd2, 0xfb,
	0x28, 0xd6, 0x33, 0x32, 0x78, 0xad, 0x6e, 0xda, 0x26, 0x17, 0xef, 0xc8, 0x3c, 0x20, 0xf3, 0x03,
	0xf8, 0xcc, 0x43, 0x32, 0x78, 0xc5, 0xce, 0xed, 0x63, 0x35, 0x2f, 0xc9, 0x94, 0xde, 0xae, 0x31,
	0x22, 0xe0, 0x01, 0x8c, 0xd7, 0xc0, 0xf8, 0x4c, 0xc5, 0x3d, 0x7a, 0xae, 0x05, 0x32, 0x58, 0xfa,
	0x41, 0x85, 0xcc, 0xf4, 0xe5, 0x82, 0xab, 0xae, 0x95, 0xce, 0x14, 0x79, 0xdd, 0xbe, 0xe1, 0x89,
	0x3f, 0x9c, 0xef, 0x56, 0xc8, 0x59, 0xbc, 0xc6, 0x97, 0xa7, 0xe4, 0xbe, 0x72, 0x22, 0x19, 0xb9,
	0x23, 0x4a, 0x0b, 0x93, 0x86, 0xbb, 0xf4, 0x07, 0xaf, 0x90, 0xa9, 0xfe, 0xef, 0x48, 0x33, 0xe7,
	0xe7, 0x2a, 0xe4, 0x15, 0x79, 0xa4, 0xc7, 0xd8, 0xd1, 0x09, 0x24, 0xd6, 0x43, 0x63, 0x7a, 0xaf,
	0xc8, 0x23, 0x50, 0x85, 0x1f, 0xe9, 0xe6, 0x3a, 0x41, 0x55, 0xf8, 0xd1, 0xd2, 0x2f, 0x9f, 0x2e,
	0x9e, 0xcc, 0xcf, 0xc9, 0xce, 0xcf, 0x57, 0xc8, 0x6b, 0x69, 0x46, 0x13, 0xdd, 0x5a, 0x9d, 0x93,
	0x50, 0x31, 0xcd, 0x3c, 0xd0, 0xc1, 0xf9, 0xd5, 0x0a, 0x19, 0x29, 0xcd, 0xbb, 0x57, 0x4e, 0x54,
	0xa9, 0x92, 0x2e, 0xce, 0x2f, 0x56, 0xc8, 0x29, 0xfd, 0xb2, 0xe2, 0xab, 0x27, 0xaa, 0x96, 0xd6,
	0x42, 0x4d, 0xcb, 0xa1, 0xe2, 0x25, 0xcd, 0xd7, 0x4e, 0x54, 0xa7, 0x42, 0x11, 0xe7, 0x8b, 0x0a,
	0x19, 0x2d, 0x6d, 0x90, 0x75, 0xb2, 0xe9, 0x89, 0xf5, 0xa2, 0xbd, 0x23, 0x77, 0x7e, 0xa1, 0x42,
	0x5e, 0x97, 0xa9, 0x0c, 0x62, 0x9d, 0x5b, 0x7a, 0x52, 0x5a, 0xa1, 0x12, 0xf5, 0x53, 0xf0, 0xa6,
	0xeb, 0xdb, 0xff, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x66, 0x5f, 0x7c, 0xcd, 0x62, 0x00, 0x00,
}
