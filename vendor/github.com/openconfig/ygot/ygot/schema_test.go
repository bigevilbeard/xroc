// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ygot

import (
	"reflect"
	"testing"

	"github.com/openconfig/goyang/pkg/yang"
)

func TestGzipToSchema(t *testing.T) {
	containerElement := &yang.Entry{
		Name: "container",
		Annotation: map[string]interface{}{
			"schemapath": "/module/container",
			"structname": "container",
		},
	}
	containerElement.Dir = map[string]*yang.Entry{
		"foo": {
			Name:   "foo",
			Parent: containerElement,
		},
	}

	tests := []struct {
		name    string
		in      []byte
		want    map[string]*yang.Entry
		wantErr bool
	}{{
		name: "simple entry",
		in: []byte{
			0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0xaa, 0xc3, 0x30,
			0x0c, 0x45, 0x77, 0x7f, 0x85, 0xf0, 0x1c, 0xc8, 0x9b, 0xbd, 0x3d, 0xda, 0xad, 0xd0, 0x7f, 0x10,
			0x8e, 0xd3, 0x08, 0x6a, 0xa9, 0xa4, 0xca, 0x54, 0xfc, 0xef, 0x25, 0x09, 0xb4, 0x76, 0x95, 0xd1,
			0xe7, 0x0a, 0xdf, 0xc3, 0x7d, 0x39, 0x00, 0x00, 0x1f, 0x85, 0x15, 0x89, 0xd3, 0xec, 0x03, 0xec,
			0x68, 0xc3, 0x57, 0xcc, 0xc9, 0x87, 0x3a, 0xee, 0xbe, 0xe1, 0x85, 0x78, 0xf0, 0x01, 0xfe, 0x2a,
			0x74, 0x12, 0x1e, 0xe9, 0xf6, 0x03, 0xcf, 0xd4, 0xfe, 0xba, 0xc1, 0x51, 0xc4, 0xc0, 0xa6, 0x72,
			0x3d, 0xe8, 0x6c, 0x6c, 0x4b, 0x0f, 0xca, 0x9b, 0xac, 0x7c, 0x5e, 0xa5, 0x92, 0xfa, 0x67, 0x16,
			0x45, 0x25, 0x61, 0xeb, 0xf6, 0x8c, 0x53, 0xca, 0xf8, 0x40, 0x9d, 0x56, 0x91, 0x3e, 0xcb, 0xb0,
			0xdc, 0x53, 0x7f, 0xb4, 0xc1, 0x7e, 0xae, 0xf3, 0x12, 0x95, 0xcd, 0x54, 0xae, 0x35, 0x28, 0xae,
			0xbc, 0x01, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x85, 0x8c, 0xf4, 0x9f, 0x6d,
			0x01, 0x00, 0x00,
		},
		want: map[string]*yang.Entry{
			"container": containerElement,
		},
	}}

	for _, tt := range tests {
		got, err := GzipToSchema(tt.in)
		if err != nil {
			if !tt.wantErr {
				t.Errorf("%s: GzipToSchema(%v): got unexpected error: %v\n", tt.name, tt.in, err)
			}
			continue
		}

		if !reflect.DeepEqual(got, tt.want) {
			t.Errorf("%s: GzipToSchema(%v): did not get expected output, got: %#v, want: %#v", tt.name, tt.in, got, tt.want)
		}
	}
}
